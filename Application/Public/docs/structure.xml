<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="ChickenWire Documentation">
  <file path="ChickenWire/Model.php" hash="98d794122047c11141a00994ed8a810a" package="Default">
    <class final="false" abstract="false" namespace="ChickenWire" line="88" package="ChickenWire">
      <extends>\ActiveRecord\Model</extends>
      <name>Model</name>
      <full_name>\ChickenWire\Model</full_name>
      <docblock line="8">
        <description>The ChickenWire Model class</description>
        <long-description>&lt;p&gt;This extends the ActiveRecord Model, adding a few extra features.&lt;/p&gt;

&lt;h3&gt;Authentication model&lt;/h3&gt;

&lt;p&gt;To create a Model for authentication, using the Auth class, you can use
the configurator $authModel. A simple example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User extends \ChickenWire\Model
{
    static $authModel = \ChickenWire\Auth\Auth::BLOWFISH;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, even simpler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static $authModel = true;        // Blowfish is the default encryption
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also specify extra options, using an array instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User extends \ChickenWire\Model
{
    static $authModel = array(
        "type" =&gt; \ChickenWire\Auth\Auth::BLOWFISH,
        "passwordField" =&gt; "userpassword"
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following options are available:&lt;/p&gt;

&lt;table border="1" cellpadding="3"&gt;
&lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;Option&lt;/th&gt;
        &lt;th&gt;Default value&lt;/th&gt;
        &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;passwordField&lt;/td&gt;
        &lt;td&gt;"password"&lt;/td&gt;
        &lt;td&gt;The database column name for the password.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;salt&lt;/td&gt;
        &lt;td&gt;&lt;i&gt;null&lt;/i&gt;&lt;/td&gt;
        &lt;td&gt;The salt to use for all passwords. When you leave this &lt;i&gt;null&lt;/i&gt; a random salt will be generated.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;saltField&lt;/td&gt;
        &lt;td&gt;"salt"&lt;/td&gt;
        &lt;td&gt;The database column name for the salt.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;saltLength&lt;/td&gt;
        &lt;td&gt;16&lt;/td&gt;
        &lt;td&gt;The length of generated salts.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;type&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;The encryption type (Auth::BLOWFISH or Auth::MD5). For more information see Auth.&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; See Auth for a complete picture.&lt;/p&gt;</long-description>
        <tag line="8" name="see" description="\ChickenWire\Auth\Auth" refers="\ChickenWire\Auth\Auth"/>
        <tag line="8" name="package" description="ChickenWire"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="91" namespace="ChickenWire" package="Default">
        <name>$authModel</name>
        <default/>
      </property>
      <property final="false" static="true" visibility="private" line="94" namespace="ChickenWire" package="Default">
        <name>$_cwInitialized</name>
        <default>false</default>
      </property>
      <property final="false" static="true" visibility="private" line="96" namespace="ChickenWire" package="Default">
        <name>$_authSettings</name>
        <default>null</default>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire" line="99" package="ChickenWire">
        <name>table</name>
        <full_name>table</full_name>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="ChickenWire" line="121" package="ChickenWire">
        <name>_initializeCW</name>
        <full_name>_initializeCW</full_name>
        <docblock line="116">
          <description>Initialize ChickenWire featues</description>
          <long-description/>
          <tag line="116" name="param" description="The Table object to work with" type="\ActiveRecord\Table" variable="$table">
            <type by_reference="false">\ActiveRecord\Table</type>
          </tag>
          <tag line="116" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="121">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="ChickenWire" line="140" package="ChickenWire">
        <name>_interpretAuthSettings</name>
        <full_name>_interpretAuthSettings</full_name>
        <docblock line="136">
          <description>Read the $authModel settings, and apply default settings, etc.</description>
          <long-description/>
          <tag line="136" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ChickenWire" line="199" package="ChickenWire">
        <name>_setAuthValues</name>
        <full_name>_setAuthValues</full_name>
        <docblock line="196">
          <description>Apply authentication values to the record (before save)</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="257" package="ChickenWire">
        <name>resaltPassword</name>
        <full_name>resaltPassword</full_name>
        <docblock line="251">
          <description>Re-encrypt the password</description>
          <long-description/>
          <tag line="251" name="param" description="The plain text password to re-encrypt" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="251" name="param" description="(default: '') Optional salt to encrypt with. If you leave this empty, a random salt will be generated." type="string" variable="$salt">
            <type by_reference="false">string</type>
          </tag>
          <tag line="251" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="257">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
        <argument line="257">
          <name>$salt</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Model.php</error>
      <error line="91" code="50018">No DocBlock was found for property $authModel</error>
      <error line="94" code="50018">No DocBlock was found for property $_cwInitialized</error>
      <error line="96" code="50018">No DocBlock was found for property $_authSettings</error>
      <error line="99" code="50010">No DocBlock was found for method table()</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/Route.php" hash="c3a143430839dd80aefc74aa0f57e92b" package="Default">
    <class final="false" abstract="false" namespace="ChickenWire" line="7" package="Default">
      <extends>\ChickenWire\Core\MagicObject</extends>
      <name>Route</name>
      <full_name>\ChickenWire\Route</full_name>
      <property final="false" static="true" visibility="protected" line="10" namespace="ChickenWire" package="Default">
        <name>$_routes</name>
        <default>array()</default>
      </property>
      <property final="false" static="true" visibility="protected" line="12" namespace="ChickenWire" package="Default">
        <name>$_propReadWrite</name>
        <default>array('ssl', 'pattern', 'controller', 'action', 'methods', 'ssl', 'models', 'autoLoad', 'patternVariables', 'module')</default>
      </property>
      <property final="false" static="true" visibility="protected" line="14" namespace="ChickenWire" package="Default">
        <name>$_withModule</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="protected" line="315" namespace="ChickenWire" package="Default">
        <name>$_pattern</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="316" namespace="ChickenWire" package="Default">
        <name>$_controller</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="317" namespace="ChickenWire" package="Default">
        <name>$_action</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="318" namespace="ChickenWire" package="Default">
        <name>$_methods</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="319" namespace="ChickenWire" package="Default">
        <name>$_ssl</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="321" namespace="ChickenWire" package="Default">
        <name>$_models</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="322" namespace="ChickenWire" package="Default">
        <name>$_autoLoad</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="324" namespace="ChickenWire" package="Default">
        <name>$_module</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="326" namespace="ChickenWire" package="Default">
        <name>$_regexPattern</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="327" namespace="ChickenWire" package="Default">
        <name>$_patternVariables</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire" line="16" package="Default">
        <name>add</name>
        <full_name>add</full_name>
        <argument line="16">
          <name>$pattern</name>
          <default/>
          <type/>
        </argument>
        <argument line="16">
          <name>$options</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire" line="28" package="Default">
        <name>withModule</name>
        <full_name>withModule</full_name>
        <argument line="28">
          <name>$module</name>
          <default/>
          <type>\ChickenWire\Module</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire" line="35" package="Default">
        <name>endWith</name>
        <full_name>endWith</full_name>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire" line="49" package="Default">
        <name>match</name>
        <full_name>match</full_name>
        <docblock line="42">
          <description>Match the given request on all configured routes and return first match</description>
          <long-description/>
          <tag line="42" name="param" description="The request to match" type="\ChickenWire\ChickenWire\Request" variable="$request">
            <type by_reference="false">\ChickenWire\ChickenWire\Request</type>
          </tag>
          <tag line="42" name="param" description="&amp;$httpStatus This param will be filled with the resulting HTTP status code" type="\ChickenWire\Number" variable="$httpStatus">
            <type by_reference="false">\ChickenWire\Number</type>
          </tag>
          <tag line="42" name="param" description="&amp;$urlParams&#9;This will be an array containing the matched URL parameters" type="Array" variable="$urlParams">
            <type by_reference="false">Array</type>
          </tag>
          <tag line="42" name="return" description="The matched, orfalse when no match was found" type="\ChickenWire\Route|\ChickenWire\number">
            <type by_reference="false">\ChickenWire\Route</type>
            <type by_reference="false">\ChickenWire\number</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$request</name>
          <default/>
          <type/>
        </argument>
        <argument line="49">
          <name>$httpStatus</name>
          <default/>
          <type/>
        </argument>
        <argument line="49">
          <name>$urlParams</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire" line="131" package="Default">
        <name>resources</name>
        <full_name>resources</full_name>
        <argument line="131">
          <name>$modelClass</name>
          <default/>
          <type/>
        </argument>
        <argument line="131">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire" line="309" package="Default">
        <name>all</name>
        <full_name>all</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="330" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="330">
          <name>$pattern</name>
          <default/>
          <type/>
        </argument>
        <argument line="330">
          <name>$options</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="389" package="Default">
        <name>__get_controllerClass</name>
        <full_name>__get_controllerClass</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="411" package="Default">
        <name>__toString</name>
        <full_name>__toString</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Route.php</error>
      <error line="7" code="50000">No DocBlock was found for \ChickenWire\Route</error>
      <error line="10" code="50018">No DocBlock was found for property $_routes</error>
      <error line="12" code="50018">No DocBlock was found for property $_propReadWrite</error>
      <error line="14" code="50018">No DocBlock was found for property $_withModule</error>
      <error line="315" code="50018">No DocBlock was found for property $_pattern</error>
      <error line="316" code="50018">No DocBlock was found for property $_controller</error>
      <error line="317" code="50018">No DocBlock was found for property $_action</error>
      <error line="318" code="50018">No DocBlock was found for property $_methods</error>
      <error line="319" code="50018">No DocBlock was found for property $_ssl</error>
      <error line="321" code="50018">No DocBlock was found for property $_models</error>
      <error line="322" code="50018">No DocBlock was found for property $_autoLoad</error>
      <error line="324" code="50018">No DocBlock was found for property $_module</error>
      <error line="326" code="50018">No DocBlock was found for property $_regexPattern</error>
      <error line="327" code="50018">No DocBlock was found for property $_patternVariables</error>
      <error line="16" code="50010">No DocBlock was found for method add()</error>
      <error line="28" code="50010">No DocBlock was found for method withModule()</error>
      <error line="35" code="50010">No DocBlock was found for method endWith()</error>
      <error line="131" code="50010">No DocBlock was found for method resources()</error>
      <error line="309" code="50010">No DocBlock was found for method all()</error>
      <error line="330" code="50010">No DocBlock was found for method __construct()</error>
      <error line="389" code="50010">No DocBlock was found for method __get_controllerClass()</error>
      <error line="411" code="50010">No DocBlock was found for method __toString()</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/Auth/AuthResult.php" hash="18ea2a5ec919a54d530c1e573a5d3cae" package="Default">
    <class final="false" abstract="false" namespace="ChickenWire\Auth" line="18" package="ChickenWire">
      <extends/>
      <name>AuthResult</name>
      <full_name>\ChickenWire\Auth\AuthResult</full_name>
      <docblock line="5">
        <description>Authentication result</description>
        <long-description>&lt;p&gt;The AuthResult class is used as a return value for authentication
validation in Auth.&lt;/p&gt;</long-description>
        <tag line="5" name="see" description="\ChickenWire\Auth\Auth" refers="\ChickenWire\Auth\Auth"/>
        <tag line="5" name="package" description="ChickenWire"/>
      </docblock>
      <constant namespace="ChickenWire\Auth" line="21" package="ChickenWire">
        <name>SUCCESS</name>
        <full_name>SUCCESS</full_name>
        <value>"SUCCESS"</value>
      </constant>
      <constant namespace="ChickenWire\Auth" line="22" package="ChickenWire">
        <name>USER_NOT_FOUND</name>
        <full_name>USER_NOT_FOUND</full_name>
        <value>"USER_NOT_FOUND"</value>
      </constant>
      <constant namespace="ChickenWire\Auth" line="23" package="ChickenWire">
        <name>INCORRECT_PASSWORD</name>
        <full_name>INCORRECT_PASSWORD</full_name>
        <value>"INCORRECT_PASSWORD"</value>
      </constant>
      <constant namespace="ChickenWire\Auth" line="24" package="ChickenWire">
        <name>ACCOUNT_SUSPENDED</name>
        <full_name>ACCOUNT_SUSPENDED</full_name>
        <value>"ACCOUNT_SUSPENDED"</value>
      </constant>
      <property final="false" static="true" visibility="private" line="26" namespace="ChickenWire\Auth" package="Default">
        <name>$_messages</name>
        <default>array(self::SUCCESS =&gt; "Authentication was successful.", self::USER_NOT_FOUND =&gt; "The user could not be found.", self::INCORRECT_PASSWORD =&gt; "The given password was incorrect.", self::ACCOUNT_SUSPENDED =&gt; "The account is suspended.")</default>
      </property>
      <property final="false" static="false" visibility="public" line="37" namespace="ChickenWire\Auth" package="Default">
        <name>$success</name>
        <default/>
        <docblock line="33">
          <description>Boolean value indicating authentication success</description>
          <long-description/>
          <tag line="33" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="43" namespace="ChickenWire\Auth" package="Default">
        <name>$result</name>
        <default/>
        <docblock line="39">
          <description>Result code (one of the constants)</description>
          <long-description/>
          <tag line="39" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="49" namespace="ChickenWire\Auth" package="Default">
        <name>$message</name>
        <default/>
        <docblock line="45">
          <description>Human-readable result</description>
          <long-description/>
          <tag line="45" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="55" namespace="ChickenWire\Auth" package="Default">
        <name>$user</name>
        <default/>
        <docblock line="51">
          <description>The Model instance for the authenticated user.</description>
          <long-description>&lt;p&gt;(Only present on success)&lt;/p&gt;</long-description>
          <tag line="51" name="var" description="" type="\ChickenWire\Model">
            <type by_reference="false">\ChickenWire\Model</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Auth" line="64" package="ChickenWire">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="57">
          <description>Create a new Authentication Result</description>
          <long-description/>
          <tag line="57" name="param" description="Result code (one of the constants)" type="string" variable="$result">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="param" description="(default: null) The authenticated user's Model instance" type="\ChickenWire\Model" variable="$user">
            <type by_reference="false">\ChickenWire\Model</type>
          </tag>
          <tag line="57" name="param" description="(default: &quot;&quot;) When empty, a default message will be used for the result." type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$result</name>
          <default/>
          <type/>
        </argument>
        <argument line="64">
          <name>$user</name>
          <default>null</default>
          <type>\ChickenWire\Model</type>
        </argument>
        <argument line="64">
          <name>$message</name>
          <default>""</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Auth/AuthResult.php</error>
      <error line="26" code="50018">No DocBlock was found for property $_messages</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/Auth/Auth.php" hash="f0de46d22bd68ce4748ea4aa274730e9" package="Default">
    <class final="false" abstract="false" namespace="ChickenWire\Auth" line="124" package="ChickenWire">
      <extends>\ChickenWire\Core\MagicObject</extends>
      <name>Auth</name>
      <full_name>\ChickenWire\Auth\Auth</full_name>
      <docblock line="7">
        <description>Authentication class for user authentication</description>
        <long-description>&lt;p&gt;This class is used for user authentication. In your configuration files you can
add the Auth objects to the framework through Auth::add(). Then in your controller(s)
you set the static $requiresAuth variable. Lastly you'll configure your user Model.&lt;/p&gt;

&lt;h3&gt;Logging in and out&lt;/h3&gt;

&lt;p&gt;To create or destroy a session you can use the &lt;b&gt;login&lt;/b&gt; and &lt;b&gt;logout&lt;/b&gt; methods,
respectively.&lt;/p&gt;

&lt;p&gt;You might have a session controller that looked like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class SessionController extends \ChickenWire\Controller
{
    static $requiresAuth = array("Admin",
        "only" =&gt; "delete"
    );

    public function add()
    {
        //... Render your login form
    }
    public function create()
    {
        $auth = \ChickenWire\Auth\Auth::get("Admin");
        $result = $auth-&gt;login($this-&gt;params-&gt;username, $this-&gt;params-&gt;password);

        if ($result-&gt;success) {
            $this-&gt;redirect('/admin/', array(
                'flash' =&gt; 'Welcome ' . $result-&gt;user-&gt;name
            ));
        } else {
            //... Show login form again.
        }

    }
    public function delete()
    {
        $this-&gt;auth-&gt;logout();
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Configuration&lt;/h3&gt;

&lt;h4&gt;Auth configuration&lt;/h4&gt;

&lt;p&gt;Configuration example (in your Application/Config/ directory):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Auth::add("&lt;b&gt;Admin&lt;/b&gt;", array(
    "model" =&gt; "\Application\Models\User",
    "type" =&gt; &lt;b&gt;Auth::BLOWFISH&lt;/b&gt;,
    "rotateSalt" =&gt; true,
    "loginAction" =&gt; "\Application\Controllers\SessionController::add"
));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For all options see the constructor.&lt;/p&gt;

&lt;h4&gt;Configure your controller&lt;/h4&gt;

&lt;p&gt;To enable authentication for a controller, you can use the configurator $requiresAuth:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyController extends \ChickenWire\Controller
{
    static $requiresAuth = "&lt;b&gt;Admin&lt;/b&gt;";

    [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on configuring your controllers (specific methods, etc.), see Controller::$requiresAuth.&lt;/p&gt;

&lt;h4&gt;Create model for Blowfish&lt;/h4&gt;

&lt;p&gt;If you choose Auth::BLOWFISH authentication, your Model's table needs to have the following columns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;username&lt;/b&gt; (varchar)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;password&lt;/b&gt; (varchar)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;salt&lt;/b&gt; (varchar)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;lastlogin_at&lt;/b&gt; (timestamp)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then simply set the configurator to &lt;i&gt;true&lt;/i&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User extends \ChickenWire\Model
{
    static $authModel = &lt;b&gt;Auth::BLOWFISH&lt;/b&gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, even simpler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static $authModel = true;        // Blowfish is the default encryption
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Create model for MD5&lt;/h4&gt;

&lt;p&gt;If you choose Auth::MD5 instead, you'll need the following columns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;username&lt;/b&gt; (varchar)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;password&lt;/b&gt; (varchar)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;lastlogin_at&lt;/b&gt; (timestamp)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then configure your model as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User extends \ChickenWire\Model
{
    static $authModel = Auth::MD5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Note: &lt;/b&gt; This is a simple authentication, without salt, and generally deemed insecure.&lt;/p&gt;</long-description>
        <tag line="7" name="see" description="\ChickenWire\Auth\Controller::$requiresAuth" refers="\ChickenWire\Auth\Controller::$requiresAuth"/>
        <tag line="7" name="package" description="ChickenWire"/>
      </docblock>
      <constant namespace="ChickenWire\Auth" line="134" package="ChickenWire">
        <name>MD5</name>
        <full_name>MD5</full_name>
        <value>"MD5"</value>
        <docblock line="127">
          <description>MD5 authentication</description>
          <long-description>&lt;p&gt;This uses simple one-way hashing, where
the password is stored in the database without a salt, as
a md5 hash.&lt;/p&gt;</long-description>
        </docblock>
      </constant>
      <constant namespace="ChickenWire\Auth" line="145" package="ChickenWire">
        <name>BLOWFISH</name>
        <full_name>BLOWFISH</full_name>
        <value>"BLOWFISH"</value>
        <docblock line="136">
          <description>Blowfish authentication with salt</description>
          <long-description>&lt;p&gt;Salted authentication uses a salt that is stored in the
database next to the encrypted password. This salt is unique
per user and can be changed on each update for added security
The salt is concatenated with the actual password in the hash.
The password will be encrypted using Blowfish.&lt;/p&gt;</long-description>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="protected" line="148" namespace="ChickenWire\Auth" package="Default">
        <name>$_auths</name>
        <default>array()</default>
      </property>
      <property final="false" static="true" visibility="protected" line="150" namespace="ChickenWire\Auth" package="Default">
        <name>$_propRead</name>
        <default>array("loginController", "loginAction", "name", "result", "user")</default>
      </property>
      <property final="false" static="true" visibility="protected" line="152" namespace="ChickenWire\Auth" package="Default">
        <name>$_sessionPrefix</name>
        <default>"ChickenWireAuthentication"</default>
      </property>
      <property final="false" static="false" visibility="protected" line="201" namespace="ChickenWire\Auth" package="Default">
        <name>$_name</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="202" namespace="ChickenWire\Auth" package="Default">
        <name>$_model</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="203" namespace="ChickenWire\Auth" package="Default">
        <name>$_type</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="204" namespace="ChickenWire\Auth" package="Default">
        <name>$_usernameField</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="205" namespace="ChickenWire\Auth" package="Default">
        <name>$_passwordField</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="206" namespace="ChickenWire\Auth" package="Default">
        <name>$_saltField</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="207" namespace="ChickenWire\Auth" package="Default">
        <name>$_lastloginField</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="208" namespace="ChickenWire\Auth" package="Default">
        <name>$_loginController</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="209" namespace="ChickenWire\Auth" package="Default">
        <name>$_loginAction</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="210" namespace="ChickenWire\Auth" package="Default">
        <name>$_rotateSalt</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="212" namespace="ChickenWire\Auth" package="Default">
        <name>$_reflModel</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="214" namespace="ChickenWire\Auth" package="Default">
        <name>$_result</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="215" namespace="ChickenWire\Auth" package="Default">
        <name>$_authenticated</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="216" namespace="ChickenWire\Auth" package="Default">
        <name>$_user</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Auth" line="162" package="ChickenWire">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="155">
          <description>Add a new authentication to the framework</description>
          <long-description></long-description>
          <tag line="155" name="param" description="The reference key for this Auth object" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="155" name="param" description="Array with options" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="155" name="see" description="\ChickenWire\Auth\__construct()" refers="\ChickenWire\Auth\__construct()"/>
          <tag line="155" name="return" description="The newly created Auth." type="\ChickenWire\Auth\Auth">
            <type by_reference="false">\ChickenWire\Auth\Auth</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="162">
          <name>$options</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Auth" line="182" package="ChickenWire">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="177">
          <description>Retrieve a previously defined Auth by its name</description>
          <long-description></long-description>
          <tag line="177" name="param" description="Name as used when the Auth was configured" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="177" name="return" description="The Auth object" type="\ChickenWire\Auth\Auth">
            <type by_reference="false">\ChickenWire\Auth\Auth</type>
          </tag>
        </docblock>
        <argument line="182">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Auth" line="195" package="ChickenWire">
        <name>all</name>
        <full_name>all</full_name>
        <docblock line="191">
          <description>Get the array of Auth objects defined (by reference)</description>
          <long-description></long-description>
          <tag line="191" name="return" description="(Reference to) array containing all Auth objects that were added through Auth::add()." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Auth" line="238" package="ChickenWire">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="218">
          <description>Create a new Auth object</description>
          <long-description>&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; You should not use this constructor directly, but use Auth::add() instead.&lt;/p&gt;</long-description>
          <tag line="218" name="param" description="The name of this authentication" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="218" name="param" description="Array of options:&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;b&gt;model&lt;/b&gt; The full classname of the model to use for authentication&lt;/li&gt;&#10;&lt;li&gt;&lt;b&gt;loginAction&lt;/b&gt; The controller and method to call when authentication fails. E.g.: \BMK\Controllers\SessionController::login&lt;/li&gt;&#10;&lt;li&gt;&lt;b&gt;type&lt;/b&gt; (default: Auth::SALT) The type of encryption/authentication to use (Auth::MD5 or Auth::SALT).&lt;/li&gt;&#10;&lt;li&gt;&lt;b&gt;rotateSalt&lt;/b&gt; (default: false) Whether to generate a new random salt and re-encrypt the password, each time a user is validated.&lt;/li&gt;&#10;&lt;li&gt;&lt;b&gt;usernameField&lt;/b&gt;&#9;(default: username) The name of the field in the model that contains the username.&#10;&lt;li&gt;&lt;b&gt;passwordField&lt;/b&gt;&#9;(default: password) The name of the field in the model that contains the (encrypted) password.&#10;&lt;li&gt;&lt;b&gt;saltField&lt;/b&gt;&#9;(default: salt) The name of the field in the model that contains the salt.&#10;&lt;li&gt;&lt;b&gt;lastloginField&lt;/b&gt; (default: lastlogin_at) The name of the field in the model that contains the timestamp of the last login. If this field is not found, the last login time will not be stored.&#10;&lt;/ul&gt;" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="238">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="238">
          <name>$options</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Auth" line="297" package="ChickenWire">
        <name>login</name>
        <full_name>login</full_name>
        <docblock line="289">
          <description>Validate the given username and password and store
the session is authentication is successful.</description>
          <long-description></long-description>
          <tag line="289" name="param" description="The username for the user to validate." type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="289" name="param" description="The unencrypted password for the user to validate." type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="289" name="return" description="Result object containing information of authentication" type="\ChickenWire\Auth\AuthResult">
            <type by_reference="false">\ChickenWire\Auth\AuthResult</type>
          </tag>
        </docblock>
        <argument line="297">
          <name>$username</name>
          <default></default>
          <type/>
        </argument>
        <argument line="297">
          <name>$password</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Auth" line="329" package="ChickenWire">
        <name>logout</name>
        <full_name>logout</full_name>
        <docblock line="325">
          <description>Log out current user</description>
          <long-description></long-description>
          <tag line="325" name="return" description="Wheter logout was successful" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Auth" line="355" package="ChickenWire">
        <name>validate</name>
        <full_name>validate</full_name>
        <docblock line="348">
          <description>Validate the given username and password.</description>
          <long-description></long-description>
          <tag line="348" name="param" description="The username for the user to validate." type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="348" name="param" description="The unencrypted password for the user to validate." type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="348" name="return" description="Whether user validation was successful." type="\ChickenWire\Auth\AuthResult">
            <type by_reference="false">\ChickenWire\Auth\AuthResult</type>
          </tag>
        </docblock>
        <argument line="355">
          <name>$username</name>
          <default></default>
          <type/>
        </argument>
        <argument line="355">
          <name>$password</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Auth" line="422" package="ChickenWire">
        <name>isAuthenticated</name>
        <full_name>isAuthenticated</full_name>
        <docblock line="418">
          <description>Check if the current session is authenticated for this Auth instance</description>
          <long-description></long-description>
          <tag line="418" name="return" description="True if authenticated, false when not authenticated." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ChickenWire\Auth" line="467" package="ChickenWire">
        <name>_initModel</name>
        <full_name>_initModel</full_name>
        <docblock line="463">
          <description>Initialize the model class (reflection)</description>
          <long-description></long-description>
          <tag line="463" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Auth/Auth.php</error>
      <error line="148" code="50018">No DocBlock was found for property $_auths</error>
      <error line="150" code="50018">No DocBlock was found for property $_propRead</error>
      <error line="152" code="50018">No DocBlock was found for property $_sessionPrefix</error>
      <error line="201" code="50018">No DocBlock was found for property $_name</error>
      <error line="202" code="50018">No DocBlock was found for property $_model</error>
      <error line="203" code="50018">No DocBlock was found for property $_type</error>
      <error line="204" code="50018">No DocBlock was found for property $_usernameField</error>
      <error line="205" code="50018">No DocBlock was found for property $_passwordField</error>
      <error line="206" code="50018">No DocBlock was found for property $_saltField</error>
      <error line="207" code="50018">No DocBlock was found for property $_lastloginField</error>
      <error line="208" code="50018">No DocBlock was found for property $_loginController</error>
      <error line="209" code="50018">No DocBlock was found for property $_loginAction</error>
      <error line="210" code="50018">No DocBlock was found for property $_rotateSalt</error>
      <error line="212" code="50018">No DocBlock was found for property $_reflModel</error>
      <error line="214" code="50018">No DocBlock was found for property $_result</error>
      <error line="215" code="50018">No DocBlock was found for property $_authenticated</error>
      <error line="216" code="50018">No DocBlock was found for property $_user</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/Util/Str.php" hash="8a8f371b9c6af1dfa6be7760cb50a5dc" package="Default">
    <class final="false" abstract="false" namespace="ChickenWire\Util" line="5" package="Default">
      <extends/>
      <name>Str</name>
      <full_name>\ChickenWire\Util\Str</full_name>
      <property final="false" static="true" visibility="private" line="8" namespace="ChickenWire\Util" package="Default">
        <name>$plural</name>
        <default>array('/(quiz)$/i' =&gt; "$1zes", '/^(ox)$/i' =&gt; "$1en", '/([m|l])ouse$/i' =&gt; "$1ice", '/(matr|vert|ind)ix|ex$/i' =&gt; "$1ices", '/(x|ch|ss|sh)$/i' =&gt; "$1es", '/([^aeiouy]|qu)y$/i' =&gt; "$1ies", '/(hive)$/i' =&gt; "$1s", '/(?:([^f])fe|([lr])f)$/i' =&gt; "$1$2ves", '/(shea|lea|loa|thie)f$/i' =&gt; "$1ves", '/sis$/i' =&gt; "ses", '/([ti])um$/i' =&gt; "$1a", '/(tomat|potat|ech|her|vet)o$/i' =&gt; "$1oes", '/(bu)s$/i' =&gt; "$1ses", '/(alias)$/i' =&gt; "$1es", '/(octop)us$/i' =&gt; "$1i", '/(ax|test)is$/i' =&gt; "$1es", '/(us)$/i' =&gt; "$1es", '/s$/i' =&gt; "s", '/$/' =&gt; "s")</default>
      </property>
      <property final="false" static="true" visibility="private" line="30" namespace="ChickenWire\Util" package="Default">
        <name>$singular</name>
        <default>array('/(quiz)zes$/i' =&gt; "$1", '/(matr)ices$/i' =&gt; "$1ix", '/(vert|ind)ices$/i' =&gt; "$1ex", '/^(ox)en$/i' =&gt; "$1", '/(alias)es$/i' =&gt; "$1", '/(octop|vir)i$/i' =&gt; "$1us", '/(cris|ax|test)es$/i' =&gt; "$1is", '/(shoe)s$/i' =&gt; "$1", '/(o)es$/i' =&gt; "$1", '/(bus)es$/i' =&gt; "$1", '/([m|l])ice$/i' =&gt; "$1ouse", '/(x|ch|ss|sh)es$/i' =&gt; "$1", '/(m)ovies$/i' =&gt; "$1ovie", '/(s)eries$/i' =&gt; "$1eries", '/([^aeiouy]|qu)ies$/i' =&gt; "$1y", '/([lr])ves$/i' =&gt; "$1f", '/(tive)s$/i' =&gt; "$1", '/(hive)s$/i' =&gt; "$1", '/(li|wi|kni)ves$/i' =&gt; "$1fe", '/(shea|loa|lea|thie)ves$/i' =&gt; "$1f", '/(^analy)ses$/i' =&gt; "$1sis", '/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i' =&gt; "$1$2sis", '/([ti])a$/i' =&gt; "$1um", '/(n)ews$/i' =&gt; "$1ews", '/(h|bl)ouses$/i' =&gt; "$1ouse", '/(corpse)s$/i' =&gt; "$1", '/(us)es$/i' =&gt; "$1", '/(us|ss)$/i' =&gt; "$1", '/s$/i' =&gt; "")</default>
      </property>
      <property final="false" static="true" visibility="private" line="62" namespace="ChickenWire\Util" package="Default">
        <name>$irregular</name>
        <default>array('move' =&gt; 'moves', 'foot' =&gt; 'feet', 'goose' =&gt; 'geese', 'sex' =&gt; 'sexes', 'child' =&gt; 'children', 'man' =&gt; 'men', 'tooth' =&gt; 'teeth', 'person' =&gt; 'people')</default>
      </property>
      <property final="false" static="true" visibility="private" line="73" namespace="ChickenWire\Util" package="Default">
        <name>$uncountable</name>
        <default>array('sheep', 'fish', 'deer', 'series', 'species', 'money', 'rice', 'information', 'equipment')</default>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Util" line="91" package="Default">
        <name>random</name>
        <full_name>random</full_name>
        <docblock line="85">
          <description>Generate a random string</description>
          <long-description/>
          <tag line="85" name="param" description="(default: 10)" type="integer" variable="$length">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="85" name="param" description="(default: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz023456789')" type="string" variable="$charset">
            <type by_reference="false">string</type>
          </tag>
          <tag line="85" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$length</name>
          <default>10</default>
          <type/>
        </argument>
        <argument line="91">
          <name>$charset</name>
          <default>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz023456789"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Util" line="113" package="Default">
        <name>slugify</name>
        <full_name>slugify</full_name>
        <docblock line="107">
          <description>Convert string to URL-safe slug</description>
          <long-description/>
          <tag line="107" name="param" description="The input string" type="string" variable="$input">
            <type by_reference="false">string</type>
          </tag>
          <tag line="107" name="param" description="(default: '-') The character/string to use as a seperator" type="string" variable="$spaceChar">
            <type by_reference="false">string</type>
          </tag>
          <tag line="107" name="return" description="The resulting slug" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$input</name>
          <default/>
          <type/>
        </argument>
        <argument line="113">
          <name>$spaceChar</name>
          <default>'-'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Util" line="127" package="Default">
        <name>titleize</name>
        <full_name>titleize</full_name>
        <docblock line="122">
          <description>Titleize the given string (upper-case on first character)</description>
          <long-description/>
          <tag line="122" name="param" description="" type="string" variable="$input">
            <type by_reference="false">string</type>
          </tag>
          <tag line="122" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$input</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Util" line="138" package="Default">
        <name>pluralize</name>
        <full_name>pluralize</full_name>
        <docblock line="132">
          <description>Pluralize the given string (if count is not 1)</description>
          <long-description/>
          <tag line="132" name="param" description="" type="string" variable="$input">
            <type by_reference="false">string</type>
          </tag>
          <tag line="132" name="param" description="The number of items. If this is 1, the singular will be returned." type="integer" variable="$count">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="132" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="138">
          <name>$input</name>
          <default/>
          <type/>
        </argument>
        <argument line="138">
          <name>$count</name>
          <default>2</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Util" line="169" package="Default">
        <name>singularize</name>
        <full_name>singularize</full_name>
        <argument line="169">
          <name>$input</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Util" line="202" package="Default">
        <name>unaccent</name>
        <full_name>unaccent</full_name>
        <docblock line="196">
          <description>Remove accents from characters in given string</description>
          <long-description/>
          <tag line="196" name="param" description="The input string" type="string" variable="$input">
            <type by_reference="false">string</type>
          </tag>
          <tag line="196" name="param" description="(default: UTF-8)" type="string" variable="$encoding">
            <type by_reference="false">string</type>
          </tag>
          <tag line="196" name="return" description="The string without accents" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$input</name>
          <default/>
          <type/>
        </argument>
        <argument line="202">
          <name>$encoding</name>
          <default>'UTF-8'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Util" line="214" package="Default">
        <name>encryptPassword</name>
        <full_name>encryptPassword</full_name>
        <docblock line="207">
          <description>Encrypt password using Blowfish, with an optional salt added</description>
          <long-description/>
          <tag line="207" name="param" description="The password to encrypt" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="207" name="param" description="A salt to add to the password" type="string" variable="$salt">
            <type by_reference="false">string</type>
          </tag>
          <tag line="207" name="param" description="(default: 6) The number of rounds to process (Note that a high number will increase security, but also increase processor time)" type="integer" variable="$rounds">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="207" name="return" description="The encrypted/hashed password" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="214">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
        <argument line="214">
          <name>$salt</name>
          <default>""</default>
          <type/>
        </argument>
        <argument line="214">
          <name>$rounds</name>
          <default>6</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Util" line="223" package="Default">
        <name>verifyPassword</name>
        <full_name>verifyPassword</full_name>
        <argument line="223">
          <name>$plain</name>
          <default/>
          <type/>
        </argument>
        <argument line="223">
          <name>$hashed</name>
          <default/>
          <type/>
        </argument>
        <argument line="223">
          <name>$salt</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="223">
          <name>$rounds</name>
          <default>6</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Util/Str.php</error>
      <error line="5" code="50000">No DocBlock was found for \ChickenWire\Util\Str</error>
      <error line="8" code="50018">No DocBlock was found for property $plural</error>
      <error line="30" code="50018">No DocBlock was found for property $singular</error>
      <error line="62" code="50018">No DocBlock was found for property $irregular</error>
      <error line="73" code="50018">No DocBlock was found for property $uncountable</error>
      <error line="169" code="50010">No DocBlock was found for method singularize()</error>
      <error line="223" code="50010">No DocBlock was found for method verifyPassword()</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/Util/Http.php" hash="a685957b8c2fc0a8e21f3e1317887b9a" package="Default">
    <class final="false" abstract="false" namespace="ChickenWire\Util" line="5" package="Default">
      <extends/>
      <name>Http</name>
      <full_name>\ChickenWire\Util\Http</full_name>
      <property final="false" static="true" visibility="public" line="8" namespace="ChickenWire\Util" package="Default">
        <name>$statusCodes</name>
        <default>array(200 =&gt; "OK", 201 =&gt; "Created", 202 =&gt; "Accepted", 203 =&gt; "Non-Authoritative Information", 204 =&gt; "No Content", 205 =&gt; "Reset Content", 206 =&gt; "Partial Content", 300 =&gt; "Multiple Choices", 301 =&gt; "Moved Permanently", 302 =&gt; "Moved Temporarily", 304 =&gt; "Not Modified", 305 =&gt; "Use Proxy", 307 =&gt; "Temporary Redirect", 400 =&gt; "Bad Request", 401 =&gt; "Unauthorized", 402 =&gt; "Payment Required", 403 =&gt; "Forbidden", 404 =&gt; "Not Found", 405 =&gt; "Method Not Allowed", 406 =&gt; "Not Acceptable", 408 =&gt; "Request Timeout", 409 =&gt; "Conflict", 410 =&gt; "Gone", 411 =&gt; "Length Required", 412 =&gt; "Precondition Failed", 500 =&gt; "Internal Server Error", 501 =&gt; "Not Implemented", 502 =&gt; "Bad Gateway", 503 =&gt; "Service Unavailable", 504 =&gt; "Gateway Timeout")</default>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Util" line="44" package="Default">
        <name>sendStatus</name>
        <full_name>sendStatus</full_name>
        <argument line="44">
          <name>$code</name>
          <default/>
          <type/>
        </argument>
        <argument line="44">
          <name>$httpVersion</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Util/Http.php</error>
      <error line="5" code="50000">No DocBlock was found for \ChickenWire\Util\Http</error>
      <error line="8" code="50018">No DocBlock was found for property $statusCodes</error>
      <error line="44" code="50010">No DocBlock was found for method sendStatus()</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/Util/Reflection.php" hash="12931da80d2c6e068890a52b4f596449" package="Default">
    <class final="false" abstract="false" namespace="ChickenWire\Util" line="5" package="Default">
      <extends/>
      <name>Reflection</name>
      <full_name>\ChickenWire\Util\Reflection</full_name>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Util" line="12" package="Default">
        <name>getCallingClass</name>
        <full_name>getCallingClass</full_name>
        <docblock line="8">
          <description>Get the class of the caller through backtrace</description>
          <long-description/>
          <tag line="8" name="return" description="The name of the class, or false when failed" type="string|false">
            <type by_reference="false">string</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Util/Reflection.php</error>
      <error line="5" code="50000">No DocBlock was found for \ChickenWire\Util\Reflection</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/Controller.php" hash="a99639b9103aa7ee03381cb672cb5b24" package="Default">
    <class final="false" abstract="false" namespace="ChickenWire" line="38" package="ChickenWire">
      <extends>\ChickenWire\Core\MagicObject</extends>
      <name>Controller</name>
      <full_name>\ChickenWire\Controller</full_name>
      <docblock line="7">
        <description>The ChickenWire controller class</description>
        <long-description>&lt;p&gt;This is the basis for all Controllers in your Application. To create
a new controller simply extend this class. Any public function you
define in your controller can then be used to route to.&lt;/p&gt;

&lt;h3&gt;Configurators&lt;/h3&gt;

&lt;p&gt;You can add one or more of the following configurators to your controller
to add features.&lt;/p&gt;

&lt;h4&gt;requiresAuth&lt;/h4&gt;

&lt;p&gt;If your actions require a user to be logged in, you can define an Auth object
in your configuration, and specify its name in your controllers. See Auth for
more information.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static $requiresAuth = "BMK";            // Authentication required for all actions
static $requiresAuth = array("BMK",
    "except" =&gt; array("index", "show")      // No authentication required for &lt;i&gt;index&lt;/i&gt; and &lt;i&gt;show&lt;/i&gt; actions
);
static $requiresAuth = array("BMK",
    "only" =&gt; array("secret")               // Authentication only required for the &lt;i&gt;secret&lt;/i&gt; action
);
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="7" name="see" description="\ChickenWire\Auth" refers="\ChickenWire\Auth"/>
        <tag line="7" name="see" description="\ChickenWire\Route" refers="\ChickenWire\Route"/>
        <tag line="7" name="package" description="ChickenWire"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="41" namespace="ChickenWire" package="Default">
        <name>$requiresAuth</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="protected" line="43" namespace="ChickenWire" package="Default">
        <name>$request</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="44" namespace="ChickenWire" package="Default">
        <name>$auth</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="47" package="ChickenWire">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="47">
          <name>$request</name>
          <default/>
          <type>\ChickenWire\Request</type>
        </argument>
        <argument line="47">
          <name>$execute</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ChickenWire" line="98" package="ChickenWire">
        <name>_checkAuth</name>
        <full_name>_checkAuth</full_name>
        <docblock line="94">
          <description>Check if current action needs authentication, and if it is validated</description>
          <long-description/>
          <tag line="94" name="return" description="Whether authentication passed" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ChickenWire" line="156" package="ChickenWire">
        <name>_invokeAuthLoginAction</name>
        <full_name>_invokeAuthLoginAction</full_name>
        <docblock line="152">
          <description>Invoke the Login action for the Controller's Auth object</description>
          <long-description/>
          <tag line="152" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ChickenWire" line="186" package="ChickenWire">
        <name>_autoLoadModels</name>
        <full_name>_autoLoadModels</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="247" package="ChickenWire">
        <name>__get_params</name>
        <full_name>__get_params</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="250" package="ChickenWire">
        <name>__get_route</name>
        <full_name>__get_route</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ChickenWire" line="256" package="ChickenWire">
        <name>show404</name>
        <full_name>show404</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Controller.php</error>
      <error line="41" code="50018">No DocBlock was found for property $requiresAuth</error>
      <error line="43" code="50018">No DocBlock was found for property $request</error>
      <error line="44" code="50018">No DocBlock was found for property $auth</error>
      <error line="47" code="50010">No DocBlock was found for method __construct()</error>
      <error line="186" code="50010">No DocBlock was found for method _autoLoadModels()</error>
      <error line="247" code="50010">No DocBlock was found for method __get_params()</error>
      <error line="250" code="50010">No DocBlock was found for method __get_route()</error>
      <error line="256" code="50010">No DocBlock was found for method show404()</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/AutoLoad.php" hash="844f1331ffa03cfc6bcc4cccf57beb6f" package="Default">
    <include line="11" type="Require" package="Default">
      <name/>
    </include>
    <include line="26" type="Require" package="Default">
      <name/>
    </include>
    <include line="42" type="Require Once" package="Default">
      <name/>
    </include>
    <function namespace="ChickenWire" line="6" package="Default">
      <name>autoLoad</name>
      <full_name>\ChickenWire\autoLoad</full_name>
      <argument line="6">
        <name>$class</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="ChickenWire" line="39" package="Default">
      <name>initAutoLoad</name>
      <full_name>\ChickenWire\initAutoLoad</full_name>
    </function>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/AutoLoad.php</error>
      <error line="6" code="50009">No DocBlock was found for function \ChickenWire\autoLoad()</error>
      <error line="39" code="50009">No DocBlock was found for function \ChickenWire\initAutoLoad()</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/Application.php" hash="bae126bb1f39f77b767bc4477e0faf28" package="Default">
    <constant namespace="global" line="196" package="Default">
      <name>CHICKENWIRE_PATH</name>
      <full_name>\CHICKENWIRE_PATH</full_name>
      <value>dirname(__FILE__)</value>
    </constant>
    <constant namespace="global" line="197" package="Default">
      <name>APP_ROOT</name>
      <full_name>\APP_ROOT</full_name>
      <value>dirname(__DIR__)</value>
    </constant>
    <constant namespace="global" line="198" package="Default">
      <name>APP_PATH</name>
      <full_name>\APP_PATH</full_name>
      <value>APP_ROOT . "/Application"</value>
    </constant>
    <constant namespace="global" line="199" package="Default">
      <name>CONFIG_PATH</name>
      <full_name>\CONFIG_PATH</full_name>
      <value>APP_PATH . "/Config"</value>
    </constant>
    <constant namespace="global" line="200" package="Default">
      <name>CONTROLLER_PATH</name>
      <full_name>\CONTROLLER_PATH</full_name>
      <value>APP_PATH . "/Controllers"</value>
    </constant>
    <constant namespace="global" line="201" package="Default">
      <name>MODEL_PATH</name>
      <full_name>\MODEL_PATH</full_name>
      <value>APP_PATH . "/Models"</value>
    </constant>
    <constant namespace="global" line="202" package="Default">
      <name>VIEW_PATH</name>
      <full_name>\VIEW_PATH</full_name>
      <value>APP_PATH . "/Views"</value>
    </constant>
    <constant namespace="global" line="203" package="Default">
      <name>MODULE_PATH</name>
      <full_name>\MODULE_PATH</full_name>
      <value>APP_ROOT . "/Modules"</value>
    </constant>
    <class final="false" abstract="false" namespace="ChickenWire" line="76" package="ChickenWire">
      <extends>\ChickenWire\Core\Singleton</extends>
      <name>Application</name>
      <full_name>\ChickenWire\Application</full_name>
      <docblock line="9">
        <description>ChickenWire Application Class</description>
        <long-description>&lt;p&gt;The is the main Application class that handles the request
and outputs the requested content.&lt;/p&gt;

&lt;p&gt;Configuration of the application can be done through files in your
/Application/Config directory, or any of the Modules/ Config directories).
Any PHP file in those directories will be loaded upon booting of the
application.&lt;/p&gt;

&lt;p&gt;Possible application settings are:&lt;/p&gt;

&lt;table border="1" cellpadding="3"&gt;
&lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;Property&lt;/th&gt;
        &lt;th&gt;Default value&lt;/th&gt;
        &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;applicationNamespace&lt;/td&gt;
        &lt;td&gt;"Application"&lt;/td&gt;
        &lt;td&gt;The PHP namespace for your Application.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;autoLoadModules&lt;/td&gt;
        &lt;td&gt;false&lt;/td&gt;
        &lt;td&gt;Whether to automatically load all modules that are found in your /Modules/ directory. If you leave this on false, you'll have to load each module individually, through Module::load - this allows for more configuration options.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;database&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;The ActiveRecord database connection to use.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;httpPort&lt;/td&gt;
    &lt;td&gt;80&lt;/td&gt;
    &lt;td&gt;The port for HTTP requests (only specify when it deviates from the default port 80, otherwise the port number will be added to all generated urls)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;sslPort&lt;/td&gt;
    &lt;td&gt;443&lt;/td&gt;
    &lt;td&gt;The port for HTTPS requests (only specify when it deviates from the default port 443, otherwise the port number will be added to all generated urls)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;timezone&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;The timezone used for date/time functions. This needs to be a valid PHP timezone ({@link http://php.net/manual/en/timezones.php}), for example Europe/Amsterdam.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;webPath&lt;/td&gt;
    &lt;td&gt;/&lt;/td&gt;
    &lt;td&gt;Root of the application as seen from the webserver (e.g. /my-application/ for http://www.my-domain.com/my-application/).&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Each of these settings can be defined specifically for each environment, or
for all environments at once (see Configuration).&lt;/p&gt;</long-description>
        <tag line="9" name="see" description="\ChickenWire\Core\Configuration" refers="\ChickenWire\Core\Configuration"/>
        <tag line="9" name="see" description="\ChickenWire\Module" refers="\ChickenWire\Module"/>
        <tag line="9" name="package" description="ChickenWire"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="83" namespace="ChickenWire" package="Default">
        <name>$inflector</name>
        <default/>
        <docblock line="79">
          <description>The default inflector used throughout the Application</description>
          <long-description/>
          <tag line="79" name="var" description="" type="\ActiveRecord\Inflector">
            <type by_reference="false">\ActiveRecord\Inflector</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="108" namespace="ChickenWire" package="Default">
        <name>$_instance</name>
        <default/>
      </property>
      <property final="false" static="true" visibility="public" line="115" namespace="ChickenWire" package="Default">
        <name>$defaultSettings</name>
        <default>array("webPath" =&gt; null, "httpPort" =&gt; null, "sslPort" =&gt; null, "applicationNamespace" =&gt; "Application", "timezone" =&gt; "", "autoLoadModules" =&gt; false)</default>
        <docblock line="110">
          <description>The default settings for the Application.</description>
          <long-description>&lt;p&gt;These can be overridden in your config files.&lt;/p&gt;</long-description>
          <tag line="110" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="132" namespace="ChickenWire" package="Default">
        <name>$config</name>
        <default/>
        <docblock line="127">
          <description>The Configuration object for the Application</description>
          <long-description/>
          <tag line="127" name="var" description="" type="\ChickenWire\Core\Configuration">
            <type by_reference="false">\ChickenWire\Core\Configuration</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="134" namespace="ChickenWire" package="Default">
        <name>$_request</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="135" namespace="ChickenWire" package="Default">
        <name>$_route</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="136" namespace="ChickenWire" package="Default">
        <name>$_controller</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire" line="89" package="ChickenWire">
        <name>boot</name>
        <full_name>boot</full_name>
        <docblock line="85">
          <description>Boot up the ChickenWire application</description>
          <long-description/>
          <tag line="85" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire" line="101" package="ChickenWire">
        <name>getConfiguration</name>
        <full_name>getConfiguration</full_name>
        <docblock line="97">
          <description>Get the ChickenWire application configuration object</description>
          <long-description/>
          <tag line="97" name="return" description="The ChickenWire Configuration object" type="\ChickenWire\Core\Configuration">
            <type by_reference="false">\ChickenWire\Core\Configuration</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ChickenWire" line="142" package="ChickenWire">
        <name>_boot</name>
        <full_name>_boot</full_name>
        <docblock line="138">
          <description>Boot up the application (internal function)</description>
          <long-description/>
          <tag line="138" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ChickenWire" line="190" package="ChickenWire">
        <name>_configure</name>
        <full_name>_configure</full_name>
        <docblock line="186">
          <description>Load and apply configuration files</description>
          <long-description/>
          <tag line="186" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ChickenWire" line="243" package="ChickenWire">
        <name>_loadModules</name>
        <full_name>_loadModules</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Application.php</error>
      <error line="108" code="50018">No DocBlock was found for property $_instance</error>
      <error line="134" code="50018">No DocBlock was found for property $_request</error>
      <error line="135" code="50018">No DocBlock was found for property $_route</error>
      <error line="136" code="50018">No DocBlock was found for property $_controller</error>
      <error line="243" code="50010">No DocBlock was found for method _loadModules()</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/Module.php" hash="9f1cfdcaa4005835bc68e874bddf0bf3" package="Default">
    <include line="125" type="Require" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="ChickenWire" line="71" package="ChickenWire">
      <extends>\ChickenWire\Core\MagicObject</extends>
      <name>Module</name>
      <full_name>\ChickenWire\Module</full_name>
      <docblock line="7">
        <description>Module class containing information on loaded modules</description>
        <long-description>&lt;p&gt;A module is a seperate set of models, views and controllers contained
within your application. Modules have the same structure as an Application,
with the exception of the settings for how the module behaves inside the
Application. These settings can either be placed inside a Module.php file
in the module's root directory, for example:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Module.php&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $module-&gt;namespace = "SomeModule";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file will be automatically loaded when the module is loaded. You can optionally also
configure the module inline, through the load() method, like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Module::load("SomeModule");      // No extra configuration
Module::load("SomeModule", array(
    "namespace" =&gt; "SomeModulesNamespace"       // Overriding default settings
));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When neither of the configuration options is used, the values will be guessed as follows:&lt;/p&gt;

&lt;table border="1" cellpadding="3"&gt;
&lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;Setting&lt;/th&gt;
        &lt;th&gt;Guess&lt;/th&gt;
        &lt;th&gt;Example for SomeModule&lt;/th&gt;
        &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;namespace&lt;/td&gt;
        &lt;td&gt;The name of the Module&lt;/td&gt;
        &lt;td&gt;SomeModule&lt;/td&gt;
        &lt;td&gt;The PHP namespace for your module.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;path&lt;/td&gt;
        &lt;td&gt;MODULE_PATH + name of the module&lt;/td&gt;
        &lt;td&gt;/srv/www/htdocs/Modules/SomeModule&lt;/td&gt;
        &lt;td&gt;The full root path of the module.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;urlPrefix&lt;/td&gt;
        &lt;td&gt;/ + slugified name of the module&lt;/td&gt;
        &lt;td&gt;/somemodule&lt;/td&gt;
        &lt;td&gt;The prefix for all routes defined in this module. You can also enter an empty string, so the routes will be the same as the application.&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;When you use autoLoadModules (see Application), all subdirectories in the Modules/ directory
will be automatically loaded, with no extra configuration (except the Module.php config file). It will
assume the name is the same as the directory name.&lt;/p&gt;</long-description>
        <tag line="7" name="see" description="\ChickenWire\Application" refers="\ChickenWire\Application"/>
        <tag line="7" name="package" description="ChickenWire"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="73" namespace="ChickenWire" package="Default">
        <name>$_propRead</name>
        <default>array("name", "path", "namespace", "urlPrefix")</default>
      </property>
      <property final="false" static="true" visibility="protected" line="75" namespace="ChickenWire" package="Default">
        <name>$_modules</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="protected" line="95" namespace="ChickenWire" package="Default">
        <name>$_name</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="96" namespace="ChickenWire" package="Default">
        <name>$_path</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="98" namespace="ChickenWire" package="Default">
        <name>$_namespace</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="99" namespace="ChickenWire" package="Default">
        <name>$_urlPrefix</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire" line="77" package="ChickenWire">
        <name>all</name>
        <full_name>all</full_name>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire" line="82" package="ChickenWire">
        <name>load</name>
        <full_name>load</full_name>
        <argument line="82">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="82">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="101" package="ChickenWire">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="101">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="101">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ChickenWire" line="146" package="ChickenWire">
        <name>_loadConfig</name>
        <full_name>_loadConfig</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Module.php</error>
      <error line="73" code="50018">No DocBlock was found for property $_propRead</error>
      <error line="75" code="50018">No DocBlock was found for property $_modules</error>
      <error line="95" code="50018">No DocBlock was found for property $_name</error>
      <error line="96" code="50018">No DocBlock was found for property $_path</error>
      <error line="98" code="50018">No DocBlock was found for property $_namespace</error>
      <error line="99" code="50018">No DocBlock was found for property $_urlPrefix</error>
      <error line="77" code="50010">No DocBlock was found for method all()</error>
      <error line="82" code="50010">No DocBlock was found for method load()</error>
      <error line="101" code="50010">No DocBlock was found for method __construct()</error>
      <error line="146" code="50010">No DocBlock was found for method _loadConfig()</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/Request.php" hash="91faf765fe7842c6eb3d92990274ebe8" package="Default">
    <class final="false" abstract="false" namespace="ChickenWire" line="5" package="Default">
      <extends>\ChickenWire\Core\MagicObject</extends>
      <name>Request</name>
      <full_name>\ChickenWire\Request</full_name>
      <property final="false" static="true" visibility="protected" line="8" namespace="ChickenWire" package="Default">
        <name>$_propRead</name>
        <default>array('uri', 'method', 'route')</default>
      </property>
      <property final="false" static="false" visibility="protected" line="10" namespace="ChickenWire" package="Default">
        <name>$_uri</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="11" namespace="ChickenWire" package="Default">
        <name>$_method</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="13" namespace="ChickenWire" package="Default">
        <name>$_queryParams</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="14" namespace="ChickenWire" package="Default">
        <name>$_urlParams</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="protected" line="15" namespace="ChickenWire" package="Default">
        <name>$_requestParams</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="17" namespace="ChickenWire" package="Default">
        <name>$_queryParamsStore</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="protected" line="18" namespace="ChickenWire" package="Default">
        <name>$_urlParamsStore</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="protected" line="19" namespace="ChickenWire" package="Default">
        <name>$_requestParamsStore</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="protected" line="21" namespace="ChickenWire" package="Default">
        <name>$_route</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="public" line="23" namespace="ChickenWire" package="Default">
        <name>$params</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="28" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="69" package="Default">
        <name>setUrlParams</name>
        <full_name>setUrlParams</full_name>
        <argument line="69">
          <name>$params</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="77" package="Default">
        <name>isGet</name>
        <full_name>isGet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="81" package="Default">
        <name>isPost</name>
        <full_name>isPost</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="85" package="Default">
        <name>isPut</name>
        <full_name>isPut</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="89" package="Default">
        <name>isDelete</name>
        <full_name>isDelete</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ChickenWire" line="95" package="Default">
        <name>__get_urlParams</name>
        <full_name>__get_urlParams</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ChickenWire" line="102" package="Default">
        <name>__get_queryParams</name>
        <full_name>__get_queryParams</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire" line="109" package="Default">
        <name>__get_requestParams</name>
        <full_name>__get_requestParams</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Request.php</error>
      <error line="5" code="50000">No DocBlock was found for \ChickenWire\Request</error>
      <error line="8" code="50018">No DocBlock was found for property $_propRead</error>
      <error line="10" code="50018">No DocBlock was found for property $_uri</error>
      <error line="11" code="50018">No DocBlock was found for property $_method</error>
      <error line="13" code="50018">No DocBlock was found for property $_queryParams</error>
      <error line="14" code="50018">No DocBlock was found for property $_urlParams</error>
      <error line="15" code="50018">No DocBlock was found for property $_requestParams</error>
      <error line="17" code="50018">No DocBlock was found for property $_queryParamsStore</error>
      <error line="18" code="50018">No DocBlock was found for property $_urlParamsStore</error>
      <error line="19" code="50018">No DocBlock was found for property $_requestParamsStore</error>
      <error line="21" code="50018">No DocBlock was found for property $_route</error>
      <error line="23" code="50018">No DocBlock was found for property $params</error>
      <error line="28" code="50010">No DocBlock was found for method __construct()</error>
      <error line="69" code="50010">No DocBlock was found for method setUrlParams()</error>
      <error line="77" code="50010">No DocBlock was found for method isGet()</error>
      <error line="81" code="50010">No DocBlock was found for method isPost()</error>
      <error line="85" code="50010">No DocBlock was found for method isPut()</error>
      <error line="89" code="50010">No DocBlock was found for method isDelete()</error>
      <error line="95" code="50010">No DocBlock was found for method __get_urlParams()</error>
      <error line="102" code="50010">No DocBlock was found for method __get_queryParams()</error>
      <error line="109" code="50010">No DocBlock was found for method __get_requestParams()</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/Core/Store.php" hash="9fac36e0756b1cf0a5e966b9f56f68ec" package="Default">
    <class final="false" abstract="false" namespace="ChickenWire\Core" line="21" package="ChickenWire">
      <extends/>
      <name>Store</name>
      <full_name>\ChickenWire\Core\Store</full_name>
      <docblock line="5">
        <description>The Store class is a dictionary with type validation</description>
        <long-description>&lt;p&gt;The Store class is used in the ChickenWire\Controller class, to retrieve
parameters in a strongly typed fashion, making sure the variables are
the right type before using them. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$this-&gt;request-&gt;params-&gt;getInt("id");
$this-&gt;request-&gt;requestParams-&gt;getFloat("price");
$this-&gt;request-&gt;queryParams-&gt;getString("search");
$this-&gt;request-&gt;urlParams-&gt;getInt("category_id");
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="5" name="package" description="ChickenWire"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25" namespace="ChickenWire\Core" package="Default">
        <name>$_sources</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="protected" line="26" namespace="ChickenWire\Core" package="Default">
        <name>$_readOnly</name>
        <default>false</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="42" package="ChickenWire">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="29">
          <description>Create new Store instance</description>
          <long-description>&lt;p&gt;The source arrays are passed by reference, so changing values in the Store, will
also change the value in the original array.&lt;/p&gt;</long-description>
          <tag line="29" name="param" description="Associative array containing values to add to the store." type="array" variable="$source1">
            <type by_reference="false">array</type>
          </tag>
          <tag line="29" name="param" description="(optional) Associative array containing values to add to the store" type="array" variable="$source2">
            <type by_reference="false">array</type>
          </tag>
          <tag line="29" name="param" description="(optional) Associative array containing values to add to the store" type="array" variable="$source3">
            <type by_reference="false">array</type>
          </tag>
          <tag line="29" name="param" description="(optional) Associative array containing values to add to the store" type="array" variable="$source4">
            <type by_reference="false">array</type>
          </tag>
          <tag line="29" name="param" description="(optional) Associative array containing values to add to the store" type="array" variable="$source5">
            <type by_reference="false">array</type>
          </tag>
          <tag line="29" name="param" description="(optional) Associative array containing values to add to the store" type="array" variable="$source6">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$source1</name>
          <default/>
          <type/>
        </argument>
        <argument line="42">
          <name>$source2</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="42">
          <name>$source3</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="42">
          <name>$source4</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="42">
          <name>$source5</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="42">
          <name>$source6</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="56" package="ChickenWire">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="53">
          <description/>
          <long-description/>
          <tag line="53" name="ignore" description=""/>
        </docblock>
        <argument line="56">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="62" package="ChickenWire">
        <name>__isset</name>
        <full_name>__isset</full_name>
        <docblock line="59">
          <description/>
          <long-description/>
          <tag line="59" name="ignore" description=""/>
        </docblock>
        <argument line="62">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="82" package="ChickenWire">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="74">
          <description>Get a value from the store</description>
          <long-description>&lt;p&gt;Throws an exception if the property cannot be found.&lt;/p&gt;</long-description>
          <tag line="74" name="param" description="Property name" type="string" variable="$prop">
            <type by_reference="false">string</type>
          </tag>
          <tag line="74" name="return" description="The value of the property" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="104" package="ChickenWire">
        <name>has</name>
        <full_name>has</full_name>
        <docblock line="99">
          <description>Check if given property is found in the Store</description>
          <long-description/>
          <tag line="99" name="param" description="Name of the property" type="string" variable="$prop">
            <type by_reference="false">string</type>
          </tag>
          <tag line="99" name="return" description="True if property is found, false if it does not exist" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="125" package="ChickenWire">
        <name>getArray</name>
        <full_name>getArray</full_name>
        <docblock line="120">
          <description>Get array value from the Store</description>
          <long-description/>
          <tag line="120" name="param" description="Property name" type="string" variable="$prop">
            <type by_reference="false">string</type>
          </tag>
          <tag line="120" name="return" description="The array value for the property, or null if it is not an array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="125">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="144" package="ChickenWire">
        <name>getString</name>
        <full_name>getString</full_name>
        <docblock line="139">
          <description>Get string value from the Store</description>
          <long-description/>
          <tag line="139" name="param" description="Property name" type="string" variable="$prop">
            <type by_reference="false">string</type>
          </tag>
          <tag line="139" name="return" description="The string value for the property, or null if it is not an string." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="163" package="ChickenWire">
        <name>getInt</name>
        <full_name>getInt</full_name>
        <docblock line="158">
          <description>Get int value from the Store</description>
          <long-description/>
          <tag line="158" name="param" description="Property name" type="string" variable="$prop">
            <type by_reference="false">string</type>
          </tag>
          <tag line="158" name="return" description="The int value for the property, or null if it is not a number." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="163">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="187" package="ChickenWire">
        <name>getFloat</name>
        <full_name>getFloat</full_name>
        <docblock line="182">
          <description>Get float value from the Store</description>
          <long-description/>
          <tag line="182" name="param" description="Property name" type="string" variable="$prop">
            <type by_reference="false">string</type>
          </tag>
          <tag line="182" name="return" description="The float value for the property, or null if it is not a number." type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="212" package="ChickenWire">
        <name>getDouble</name>
        <full_name>getDouble</full_name>
        <docblock line="206">
          <description>Get double value (actually an alias of getFloat, because float and double are
identical in PHP)</description>
          <long-description/>
          <tag line="206" name="param" description="Property name" type="string" variable="$prop">
            <type by_reference="false">string</type>
          </tag>
          <tag line="206" name="return" description="The float value for the property, or null if it is not a number." type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="212">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="222" package="ChickenWire">
        <name>getBool</name>
        <full_name>getBool</full_name>
        <docblock line="217">
          <description>Get boolean value from the Store</description>
          <long-description/>
          <tag line="217" name="param" description="$prop Property name" type="\ChickenWire\Core\" variable="$string"/>
          <tag line="217" name="return" description="Property value, or null when value was not a boolean." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="222">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="254" package="ChickenWire">
        <name>setReadOnly</name>
        <full_name>setReadOnly</full_name>
        <docblock line="250">
          <description>Make the store read only so the original sources cannot be changed</description>
          <long-description/>
          <tag line="250" name="param" description="True for read-only, false for write access" type="bool" variable="$readOnly">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="254">
          <name>$readOnly</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Core/Store.php</error>
      <error line="25" code="50018">No DocBlock was found for property $_sources</error>
      <error line="26" code="50018">No DocBlock was found for property $_readOnly</error>
      <error line="217" code="50014">Name of argument $prop does not match with the DocBlock's name $string in getBool()</error>
      <notice line="217" code="50013">Parameter $string could not be found in getBool()</notice>
    </parse_markers>
  </file>
  <file path="ChickenWire/Core/Singleton.php" hash="9edec9816113c855b25822610c1f6ac4" package="Default">
    <class final="false" abstract="true" namespace="ChickenWire\Core" line="9" package="Default">
      <extends/>
      <name>Singleton</name>
      <full_name>\ChickenWire\Core\Singleton</full_name>
      <docblock line="5">
        <description>Simple implementation of the singleton pattern.</description>
        <long-description/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ChickenWire\Core" line="12" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ChickenWire\Core" line="18" package="Default">
        <name>instance</name>
        <full_name>instance</full_name>
        <docblock line="14">
          <description>Retrieve the instance (or create it, if it's not already created)</description>
          <long-description/>
          <tag line="14" name="return" description="The instance of this class." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Core/Singleton.php</error>
      <error line="12" code="50010">No DocBlock was found for method __construct()</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/Core/MagicObject.php" hash="557b3def532fd5d08edb672d09eee264" package="Default">
    <class final="false" abstract="true" namespace="ChickenWire\Core" line="58" package="ChickenWire">
      <extends/>
      <name>MagicObject</name>
      <full_name>\ChickenWire\Core\MagicObject</full_name>
      <docblock line="5">
        <description>MagicObject class facilitates easy use of getters and setters.</description>
        <long-description>&lt;p&gt;By extending MagicObject the class will have a __get and __set
function, that allows properties to be made accessible. You
can define static arrays in your class called $_propRead,
$_propWrite, and $propReadWrite, containing your local variables that
should be made public. All your local private/protected variables
should be prefixed with an underscore.&lt;/p&gt;

&lt;p&gt;You can also define specific getters and setters through __get_prop
and __set_prop.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Person extends \ChickenWire\Core\MagicObject
{
        protected static $_propReadWrite = array('firstname');
        protected static $_propRead = array('lastname');

        protected $_firstname;
        protected $_lastname;

        public function __construct($firstname = '', $lastname = '')
        {
            $this-&gt;_firstname = $firstname;
            $this-&gt;_lastname = $lastname;
        }

        protected function __get_name()
        {
            return $this-&gt;_firstname . ' ' . $this-&gt;_lastname;
        }
        protected function __set_name($value)
        {
            list($this-&gt;_firstname, $this-&gt;_lastname) = preg_split('/\ /', $value);
        }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$john = new Person("John", "Derringer");
echo $john-&gt;name;       // output: John Derringer

$john-&gt;firstname = "Jane";
echo $john-&gt;name;       // output: Jane Derringer
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="5" name="package" description="ChickenWire"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="61" namespace="ChickenWire\Core" package="Default">
        <name>$_propReadWrite</name>
        <default>null</default>
      </property>
      <property final="false" static="true" visibility="protected" line="62" namespace="ChickenWire\Core" package="Default">
        <name>$_propRead</name>
        <default>null</default>
      </property>
      <property final="false" static="true" visibility="protected" line="63" namespace="ChickenWire\Core" package="Default">
        <name>$_propWrite</name>
        <default>null</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="68" package="ChickenWire">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="65">
          <description/>
          <long-description/>
          <tag line="65" name="ignore" description=""/>
        </docblock>
        <argument line="68">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="93" package="ChickenWire">
        <name>__set</name>
        <full_name>__set</full_name>
        <docblock line="90">
          <description/>
          <long-description/>
          <tag line="90" name="ignore" description=""/>
        </docblock>
        <argument line="93">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
        <argument line="93">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Core/MagicObject.php</error>
      <error line="61" code="50018">No DocBlock was found for property $_propReadWrite</error>
      <error line="62" code="50018">No DocBlock was found for property $_propRead</error>
      <error line="63" code="50018">No DocBlock was found for property $_propWrite</error>
    </parse_markers>
  </file>
  <file path="ChickenWire/Core/Configuration.php" hash="e136f3bf43cfcf30909f81aa959d0fa4" package="Default">
    <include line="170" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="ChickenWire\Core" line="57" package="ChickenWire">
      <extends/>
      <name>Configuration</name>
      <full_name>\ChickenWire\Core\Configuration</full_name>
      <docblock line="9">
        <description>Configuration class for multiple environment configuration</description>
        <long-description>&lt;p&gt;The Configuration class can be used to create a configuration for
one or more environments (usually development, test, and production). This class
is mainly used by the ChickenWire\Application class, to store all
framework configuration. On construction the Configuration will try to
load default settings from the calling/defined class. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Application
{
    static $defaultSettings = array(
        "name" =&gt; "Not a real application."
    );

    private $_settings;
    function __construct()
    {
        $this-&gt;_settings = new \ChickenWire\Core\Configuration();
        echo $this-&gt;_settings-&gt;name;        // output: Not a real application.
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the Application's config files the local variable $config is an
instance of this class.&lt;/p&gt;

&lt;p&gt;Example of a configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Set environment
$config-&gt;environment = ($_SERVER['HTTP_HOST'] == 'www.live-domain.com') ? 'production' : 'development';

// Database (for each environment seperately)
$config-&gt;database = array(
    'development' =&gt; 'mysql://root:guess@localhost/[dbname];charset=utf8',
    'production' =&gt; 'mysql://[user]:[pass]@localhost/[dbname]-admin;charset=utf8'
);

// Set timezone (for all environments)
$config-&gt;timezone = "Europe/Amsterdam";
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="9" name="property" description="The environment we are currently in. This determines which value will be returned when you have configured multiple environments." type="string" variable="$environment">
          <type by_reference="false">string</type>
        </tag>
        <tag line="9" name="package" description="ChickenWire"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="60" namespace="ChickenWire\Core" package="Default">
        <name>$_envSettings</name>
        <default>array('development' =&gt; array())</default>
      </property>
      <property final="false" static="false" visibility="protected" line="61" namespace="ChickenWire\Core" package="Default">
        <name>$_environment</name>
        <default>'development'</default>
      </property>
      <property final="false" static="false" visibility="protected" line="63" namespace="ChickenWire\Core" package="Default">
        <name>$_defaults</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="70" package="ChickenWire">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="66">
          <description>Create a new Configuration instance</description>
          <long-description/>
          <tag line="66" name="param" description="(default: the calling class) The class for which the configuration is meant. When you leave this null it will assume the class you call this constructor from." type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$class</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="99" package="ChickenWire">
        <name>allFor</name>
        <full_name>allFor</full_name>
        <docblock line="94">
          <description>Get the values of the given setting for each environment</description>
          <long-description/>
          <tag line="94" name="param" description="The settings to retrieve" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="94" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="113" package="ChickenWire">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="110">
          <description/>
          <long-description/>
          <tag line="110" name="ignore" description=""/>
        </docblock>
        <argument line="113">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="123" package="ChickenWire">
        <name>__set</name>
        <full_name>__set</full_name>
        <docblock line="120">
          <description/>
          <long-description/>
          <tag line="120" name="ignore" description=""/>
        </docblock>
        <argument line="123">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="123">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ChickenWire\Core" line="164" package="ChickenWire">
        <name>load</name>
        <full_name>load</full_name>
        <docblock line="159">
          <description>Load a PHP configuration file inside the context of this configuration</description>
          <long-description/>
          <tag line="159" name="param" description="The PHP file to load" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="159" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="164">
          <name>$file</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ChickenWire/Core/Configuration.php</error>
      <error line="60" code="50018">No DocBlock was found for property $_envSettings</error>
      <error line="61" code="50018">No DocBlock was found for property $_environment</error>
      <error line="63" code="50018">No DocBlock was found for property $_defaults</error>
    </parse_markers>
  </file>
  <file path="Application/Models/Client.php" hash="4b5c8bc98c033adf33e369da69f3129e" package="Default">
    <class final="false" abstract="false" namespace="Application\Models" line="5" package="Default">
      <extends>\ChickenWire\Model</extends>
      <name>Client</name>
      <full_name>\Application\Models\Client</full_name>
      <property final="false" static="true" visibility="public" line="8" namespace="Application\Models" package="Default">
        <name>$has_many</name>
        <default>array('projects')</default>
      </property>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Application/Models/Client.php</error>
      <error line="5" code="50000">No DocBlock was found for \Application\Models\Client</error>
      <error line="8" code="50018">No DocBlock was found for property $has_many</error>
    </parse_markers>
  </file>
  <file path="Application/Models/Project.php" hash="98208f7ae005572679b6e4b6c5bbdb62" package="Default">
    <class final="false" abstract="false" namespace="Application\Models" line="5" package="Default">
      <extends>\ChickenWire\Model</extends>
      <name>Project</name>
      <full_name>\Application\Models\Project</full_name>
      <property final="false" static="true" visibility="public" line="8" namespace="Application\Models" package="Default">
        <name>$belongs_to</name>
        <default>array('client')</default>
      </property>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Application/Models/Project.php</error>
      <error line="5" code="50000">No DocBlock was found for \Application\Models\Project</error>
      <error line="8" code="50018">No DocBlock was found for property $belongs_to</error>
    </parse_markers>
  </file>
  <file path="Application/Public/docs/ajax_search.php" hash="af5b30d502c52d4bf5a47ea66f85c65d" package="Search">
    <docblock line="2">
      <description>phpDocumentor</description>
      <long-description>&lt;p&gt;PHP Version 5&lt;/p&gt;</long-description>
      <tag line="2" name="category" description="phpDocumentor"/>
      <tag line="2" name="package" description="Search"/>
      <tag line="2" name="author" description="Mike van Riel &lt;mike.vanriel@naenius.com&gt;"/>
      <tag line="2" name="copyright" description="2010-2011 Mike van Riel / Naenius (http://www.naenius.com)"/>
      <tag line="2" name="license" description="http://www.opensource.org/licenses/mit-license.php MIT"/>
      <tag line="2" name="link" description="http://phpdoc.org" link="http://phpdoc.org"/>
    </docblock>
  </file>
  <file path="Application/Controllers/ProjectController.php" hash="91e4eb53cf53b08733ee6bf5f4d656d7" package="Default">
    <class final="false" abstract="false" namespace="Application\Controllers" line="8" package="Default">
      <extends>\ChickenWire\Controller</extends>
      <name>ProjectController</name>
      <full_name>\Application\Controllers\ProjectController</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Application\Controllers" line="11" package="Default">
        <name>index</name>
        <full_name>index</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Application\Controllers" line="18" package="Default">
        <name>add</name>
        <full_name>add</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Application\Controllers" line="28" package="Default">
        <name>show</name>
        <full_name>show</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Application/Controllers/ProjectController.php</error>
      <error line="8" code="50000">No DocBlock was found for \Application\Controllers\ProjectController</error>
      <error line="11" code="50010">No DocBlock was found for method index()</error>
      <error line="18" code="50010">No DocBlock was found for method add()</error>
      <error line="28" code="50010">No DocBlock was found for method show()</error>
    </parse_markers>
  </file>
  <file path="Application/Controllers/ApplicationController.php" hash="bd523413964757b2020f91662ebdbaeb" package="Default">
    <class final="false" abstract="false" namespace="Application\Controllers" line="5" package="Default">
      <extends>\ChickenWire\Controller</extends>
      <name>ApplicationController</name>
      <full_name>\Application\Controllers\ApplicationController</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Application\Controllers" line="9" package="Default">
        <name>index</name>
        <full_name>index</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Application/Controllers/ApplicationController.php</error>
      <error line="5" code="50000">No DocBlock was found for \Application\Controllers\ApplicationController</error>
      <error line="9" code="50010">No DocBlock was found for method index()</error>
    </parse_markers>
  </file>
  <file path="Application/Config/Modules.php" hash="85c6035968f286ce5073cbbce09d96b7" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Application/Config/Modules.php</error>
    </parse_markers>
  </file>
  <file path="Application/Config/Routes.php" hash="c1d6ae651fdeeb2d8413b71ac01c2a80" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Application/Config/Routes.php</error>
    </parse_markers>
  </file>
  <file path="Application/Config/Application.php" hash="30e12de434c7ac4c1c8556e2e6e5c0b2" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Application/Config/Application.php</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Model.php" hash="d2148bdcb4001f7db0a4272626b40d65" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <include line="620" type="Require Once" package="Default">
      <name>Validations.php</name>
    </include>
    <include line="1042" type="Require Once" package="Default">
      <name>Validations.php</name>
    </include>
    <include line="1788" type="Require Once" package="Default">
      <name>Serialization.php</name>
    </include>
    <class final="false" abstract="false" namespace="ActiveRecord" line="74" package="ActiveRecord">
      <extends/>
      <name>Model</name>
      <full_name>\ActiveRecord\Model</full_name>
      <docblock line="7">
        <description>The base class for your models.</description>
        <long-description>&lt;p&gt;Defining an ActiveRecord model for a table called people and orders:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE people(
  id int primary key auto_increment,
  parent_id int,
  first_name varchar(50),
  last_name varchar(50)
);

CREATE TABLE orders(
  id int primary key auto_increment,
  person_id int not null,
  cost decimal(10,2),
  total decimal(10,2)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;class Person extends ActiveRecord\Model {
  static $belongs_to = array(
    array('parent', 'foreign_key' =&gt; 'parent_id', 'class_name' =&gt; 'Person')
  );

  static $has_many = array(
    array('children', 'foreign_key' =&gt; 'parent_id', 'class_name' =&gt; 'Person'),
    array('orders')
  );

  static $validates_length_of = array(
    array('first_name', 'within' =&gt; array(1,50)),
    array('last_name', 'within' =&gt; array(1,50))
  );
}

class Order extends ActiveRecord\Model {
  static $belongs_to = array(
    array('person')
  );

  static $validates_numericality_of = array(
    array('cost', 'greater_than' =&gt; 0),
    array('total', 'greater_than' =&gt; 0)
  );

  static $before_save = array('calculate_total_with_tax');

  public function calculate_total_with_tax() {
    $this-&gt;total = $this-&gt;cost * 0.045;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a more in-depth look at defining models, relationships, callbacks and many other things
please consult our {@link http://www.phpactiverecord.org/guides Guides}.&lt;/p&gt;</long-description>
        <tag line="7" name="package" description="ActiveRecord"/>
        <tag line="7" name="see" description="\ActiveRecord\BelongsTo" refers="\ActiveRecord\BelongsTo"/>
        <tag line="7" name="see" description="CallBack" refers="CallBack"/>
        <tag line="7" name="see" description="\ActiveRecord\HasMany" refers="\ActiveRecord\HasMany"/>
        <tag line="7" name="see" description="\ActiveRecord\HasAndBelongsToMany" refers="\ActiveRecord\HasAndBelongsToMany"/>
        <tag line="7" name="see" description="\ActiveRecord\Serialization" refers="\ActiveRecord\Serialization"/>
        <tag line="7" name="see" description="\ActiveRecord\Validations" refers="\ActiveRecord\Validations"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="81" namespace="ActiveRecord" package="Default">
        <name>$errors</name>
        <default/>
        <docblock line="76">
          <description>An instance of {@link Errors} and will be instantiated once a write method is called.</description>
          <long-description/>
          <tag line="76" name="var" description="" type="\ActiveRecord\Errors">
            <type by_reference="false">\ActiveRecord\Errors</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="88" namespace="ActiveRecord" package="Default">
        <name>$attributes</name>
        <default>array()</default>
        <docblock line="83">
          <description>Contains model values as column_name =&gt; value</description>
          <long-description/>
          <tag line="83" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="95" namespace="ActiveRecord" package="Default">
        <name>$__dirty</name>
        <default>null</default>
        <docblock line="90">
          <description>Flag whether or not this model's attributes have been modified since it will either be null or an array of column_names that have been modified</description>
          <long-description/>
          <tag line="90" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="102" namespace="ActiveRecord" package="Default">
        <name>$__readonly</name>
        <default>false</default>
        <docblock line="97">
          <description>Flag that determines of this model can have a writer method invoked such as: save/update/insert/delete</description>
          <long-description/>
          <tag line="97" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="109" namespace="ActiveRecord" package="Default">
        <name>$__relationships</name>
        <default>array()</default>
        <docblock line="104">
          <description>Array of relationship objects as model_attribute_name =&gt; relationship</description>
          <long-description/>
          <tag line="104" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="116" namespace="ActiveRecord" package="Default">
        <name>$__new_record</name>
        <default>true</default>
        <docblock line="111">
          <description>Flag that determines if a call to save() should issue an insert or an update sql statement</description>
          <long-description/>
          <tag line="111" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="123" namespace="ActiveRecord" package="Default">
        <name>$connection</name>
        <default/>
        <docblock line="118">
          <description>Set to the name of the connection this {@link Model} should use.</description>
          <long-description/>
          <tag line="118" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="130" namespace="ActiveRecord" package="Default">
        <name>$db</name>
        <default/>
        <docblock line="125">
          <description>Set to the name of the database this Model's table is in.</description>
          <long-description/>
          <tag line="125" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="140" namespace="ActiveRecord" package="Default">
        <name>$table_name</name>
        <default/>
        <docblock line="132">
          <description>Set this to explicitly specify the model's table name if different from inferred name.</description>
          <long-description>&lt;p&gt;If your table doesn't follow our table name convention you can set this to the
name of your table to explicitly tell ActiveRecord what your table is called.&lt;/p&gt;</long-description>
          <tag line="132" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="147" namespace="ActiveRecord" package="Default">
        <name>$primary_key</name>
        <default/>
        <docblock line="142">
          <description>Set this to override the default primary key name if different from default name of "id".</description>
          <long-description/>
          <tag line="142" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="154" namespace="ActiveRecord" package="Default">
        <name>$sequence</name>
        <default/>
        <docblock line="149">
          <description>Set this to explicitly specify the sequence name for the table.</description>
          <long-description/>
          <tag line="149" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="173" namespace="ActiveRecord" package="Default">
        <name>$alias_attribute</name>
        <default>array()</default>
        <docblock line="156">
          <description>Allows you to create aliases for attributes.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;class Person extends ActiveRecord\Model {
  static $alias_attribute = array(
    'alias_first_name' =&gt; 'first_name',
    'alias_last_name' =&gt; 'last_name');
}

$person = Person::first();
$person-&gt;alias_first_name = 'Tito';
echo $person-&gt;alias_first_name;
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="156" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="195" namespace="ActiveRecord" package="Default">
        <name>$attr_accessible</name>
        <default>array()</default>
        <docblock line="175">
          <description>Whitelist of attributes that are checked from mass-assignment calls such as constructing a model or using update_attributes.</description>
          <long-description>&lt;p&gt;This is the opposite of {@link attr_protected $attr_protected}.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Person extends ActiveRecord\Model {
  static $attr_accessible = array('first_name','last_name');
}

$person = new Person(array(
  'first_name' =&gt; 'Tito',
  'last_name' =&gt; 'the Grief',
  'id' =&gt; 11111));

echo $person-&gt;id; # =&gt; null
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="175" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="207" namespace="ActiveRecord" package="Default">
        <name>$attr_protected</name>
        <default>array()</default>
        <docblock line="197">
          <description>Blacklist of attributes that cannot be mass-assigned.</description>
          <long-description>&lt;p&gt;This is the opposite of {@link attr_accessible $attr_accessible} and the format
for defining these are exactly the same.&lt;/p&gt;

&lt;p&gt;If the attribute is both accessible and protected, it is treated as protected.&lt;/p&gt;</long-description>
          <tag line="197" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="231" namespace="ActiveRecord" package="Default">
        <name>$delegate</name>
        <default>array()</default>
        <docblock line="209">
          <description>Delegates calls to a relationship.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;class Person extends ActiveRecord\Model {
  static $belongs_to = array(array('venue'),array('host'));
  static $delegate = array(
    array('name', 'state', 'to' =&gt; 'venue'),
    array('name', 'to' =&gt; 'host', 'prefix' =&gt; 'woot'));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can then do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$person-&gt;state     # same as calling $person-&gt;venue-&gt;state
$person-&gt;name      # same as calling $person-&gt;venue-&gt;name
$person-&gt;woot_name # same as calling $person-&gt;host-&gt;name
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="209" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="1273" namespace="ActiveRecord" package="Default">
        <name>$VALID_OPTIONS</name>
        <default>array('conditions', 'limit', 'offset', 'order', 'select', 'joins', 'include', 'readonly', 'group', 'from', 'having')</default>
        <docblock line="1268">
          <description>A list of valid finder options.</description>
          <long-description/>
          <tag line="1268" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="250" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="233">
          <description>Constructs a model.</description>
          <long-description>&lt;p&gt;When a user instantiates a new object (e.g.: it was not ActiveRecord that instantiated via a find)
then @var $attributes will be mapped according to the schema's defaults. Otherwise, the given
$attributes will be mapped via set_attributes_via_mass_assignment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new Person(array('first_name' =&gt; 'Tito', 'last_name' =&gt; 'the Grief'));
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="233" name="param" description="Hash containing names and values to mass assign to the model" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="233" name="param" description="Set to true to guard protected/non-accessible attributes" type="boolean" variable="$guard_attributes">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="233" name="param" description="Set to true if this model is being created from a find call" type="boolean" variable="$instantiating_via_find">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="233" name="param" description="Set to true if this should be considered a new record" type="boolean" variable="$new_record">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="233" name="return" description="" type="\ActiveRecord\Model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
        </docblock>
        <argument line="250">
          <name>$attributes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="250">
          <name>$guard_attributes</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="250">
          <name>$instantiating_via_find</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="250">
          <name>$new_record</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="323" package="ActiveRecord">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="271">
          <description>Magic method which delegates to read_attribute().</description>
          <long-description>&lt;p&gt;This handles firing off getter methods,
as they are not checked/invoked inside of read_attribute(). This circumvents the problem with
a getter being accessed with the same name as an actual attribute.&lt;/p&gt;

&lt;p&gt;You can also define customer getter methods for the model.&lt;/p&gt;

&lt;p&gt;EXAMPLE:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User extends ActiveRecord\Model {

  # define custom getter methods. Note you must
  # prepend get_ to your method name:
  function get_middle_initial() {
    return $this-&gt;middle_name{0};
  }
}

$user = new User();
echo $user-&gt;middle_name;  # will call $user-&gt;get_middle_name()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you define a custom getter with the same name as an attribute then you
will need to use read_attribute() to get the attribute's value.
This is necessary due to the way __get() works.&lt;/p&gt;

&lt;p&gt;For example, assume 'name' is a field on the table and we're defining a
custom getter for 'name':&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User extends ActiveRecord\Model {

  # INCORRECT way to do it
  # function get_name() {
  #   return strtoupper($this-&gt;name);
  # }

  function get_name() {
    return strtoupper($this-&gt;read_attribute('name'));
  }
}

$user = new User();
$user-&gt;name = 'bob';
echo $user-&gt;name; # =&gt; BOB
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="271" name="see" description="\ActiveRecord\read_attribute()" refers="\ActiveRecord\read_attribute()"/>
          <tag line="271" name="param" description="Name of an attribute" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="271" name="return" description="The value of the attribute" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="323">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="342" package="ActiveRecord">
        <name>__isset</name>
        <full_name>__isset</full_name>
        <docblock line="336">
          <description>Determines if an attribute exists for this {@link Model}.</description>
          <long-description/>
          <tag line="336" name="param" description="" type="string" variable="$attribute_name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="336" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="342">
          <name>$attribute_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="397" package="ActiveRecord">
        <name>__set</name>
        <full_name>__set</full_name>
        <docblock line="347">
          <description>Magic allows un-defined attributes to set via $attributes.</description>
          <long-description>&lt;p&gt;You can also define customer setter methods for the model.&lt;/p&gt;

&lt;p&gt;EXAMPLE:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User extends ActiveRecord\Model {

  # define custom setter methods. Note you must
  # prepend set_ to your method name:
  function set_password($plaintext) {
    $this-&gt;encrypted_password = md5($plaintext);
  }
}

$user = new User();
$user-&gt;password = 'plaintext';  # will call $user-&gt;set_password('plaintext')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you define a custom setter with the same name as an attribute then you
will need to use assign_attribute() to assign the value to the attribute.
This is necessary due to the way __set() works.&lt;/p&gt;

&lt;p&gt;For example, assume 'name' is a field on the table and we're defining a
custom setter for 'name':&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User extends ActiveRecord\Model {

  # INCORRECT way to do it
  # function set_name($name) {
  #   $this-&gt;name = strtoupper($name);
  # }

  function set_name($name) {
    $this-&gt;assign_attribute('name',strtoupper($name));
  }
}

$user = new User();
$user-&gt;name = 'bob';
echo $user-&gt;name; # =&gt; BOB
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="347" name="throws" description="UndefinedPropertyException} if $name does not exist" type="\ActiveRecord\{@link">
            <type by_reference="false">\ActiveRecord\{@link</type>
          </tag>
          <tag line="347" name="param" description="Name of attribute, relationship or other to set" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="347" name="param" description="The value" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="347" name="return" description="The value" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="397">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="397">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="423" package="ActiveRecord">
        <name>__wakeup</name>
        <full_name>__wakeup</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="436" package="ActiveRecord">
        <name>assign_attribute</name>
        <full_name>assign_attribute</full_name>
        <docblock line="429">
          <description>Assign a value to an attribute.</description>
          <long-description/>
          <tag line="429" name="param" description="Name of the attribute" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="429" name="param" description="&amp;$value Value of the attribute" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="429" name="return" description="the attribute value" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="436">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="436">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="473" package="ActiveRecord">
        <name>read_attribute</name>
        <full_name>read_attribute</full_name>
        <docblock line="464">
          <description>Retrieves an attribute's value or a relationship object based on the name passed.</description>
          <long-description>&lt;p&gt;If the attribute
accessed is 'id' then it will return the model's primary key no matter what the actual attribute name is
for the primary key.&lt;/p&gt;</long-description>
          <tag line="464" name="param" description="Name of an attribute" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="464" name="return" description="The value of the attribute" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="464" name="throws" description="UndefinedPropertyException} if name could not be resolved to an attribute, relationship, ..." type="\ActiveRecord\{@link">
            <type by_reference="false">\ActiveRecord\{@link</type>
          </tag>
        </docblock>
        <argument line="473">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="529" package="ActiveRecord">
        <name>flag_dirty</name>
        <full_name>flag_dirty</full_name>
        <docblock line="524">
          <description>Flags an attribute as dirty.</description>
          <long-description/>
          <tag line="524" name="param" description="Attribute name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="529">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="542" package="ActiveRecord">
        <name>dirty_attributes</name>
        <full_name>dirty_attributes</full_name>
        <docblock line="537">
          <description>Returns hash of attributes that have been modified since loading the model.</description>
          <long-description/>
          <tag line="537" name="return" description="null if no dirty attributes otherwise returns array of dirty attributes." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="556" package="ActiveRecord">
        <name>attribute_is_dirty</name>
        <full_name>attribute_is_dirty</full_name>
        <docblock line="551">
          <description>Check if a particular attribute has been modified since loading the model.</description>
          <long-description/>
          <tag line="551" name="param" description="Name of the attribute" type="string" variable="$attribute">
            <type by_reference="false">string</type>
          </tag>
          <tag line="551" name="return" description="TRUE if it has been modified." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="556">
          <name>$attribute</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="566" package="ActiveRecord">
        <name>attributes</name>
        <full_name>attributes</full_name>
        <docblock line="561">
          <description>Returns a copy of the model's attributes hash.</description>
          <long-description/>
          <tag line="561" name="return" description="A copy of the model's attribute data" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="577" package="ActiveRecord">
        <name>get_primary_key</name>
        <full_name>get_primary_key</full_name>
        <docblock line="571">
          <description>Retrieve the primary key name.</description>
          <long-description/>
          <tag line="571" name="param" description="Set to true to return the first value in the pk array only" type="boolean" variable="$first">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="571" name="return" description="The primary key for the model" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="577">
          <name>$first</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="589" package="ActiveRecord">
        <name>get_real_attribute_name</name>
        <full_name>get_real_attribute_name</full_name>
        <docblock line="583">
          <description>Returns the actual attribute name if $name is aliased.</description>
          <long-description/>
          <tag line="583" name="param" description="An attribute name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="583" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="589">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="618" package="ActiveRecord">
        <name>get_validation_rules</name>
        <full_name>get_validation_rules</full_name>
        <docblock line="600">
          <description>Returns array of validator data for this Model.</description>
          <long-description>&lt;p&gt;Will return an array looking like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array(
  'name' =&gt; array(
    array('validator' =&gt; 'validates_presence_of'),
    array('validator' =&gt; 'validates_inclusion_of', 'in' =&gt; array('Bob','Joe','John')),
  'password' =&gt; array(
    array('validator' =&gt; 'validates_length_of', 'minimum' =&gt; 6))
  )
);
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="600" name="return" description="An array containing validator data for this model." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="632" package="ActiveRecord">
        <name>get_values_for</name>
        <full_name>get_values_for</full_name>
        <docblock line="626">
          <description>Returns an associative array containing values for all the attributes in $attributes</description>
          <long-description/>
          <tag line="626" name="param" description="Array containing attribute names" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="626" name="return" description="A hash containing $name =&gt; $value" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="632">
          <name>$attributes</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="649" package="ActiveRecord">
        <name>table_name</name>
        <full_name>table_name</full_name>
        <docblock line="644">
          <description>Retrieves the name of the table for this Model.</description>
          <long-description/>
          <tag line="644" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="662" package="ActiveRecord">
        <name>is_delegated</name>
        <full_name>is_delegated</full_name>
        <docblock line="654">
          <description>Returns the attribute name on the delegated relationship if $name is
delegated or null if not delegated.</description>
          <long-description/>
          <tag line="654" name="param" description="Name of an attribute" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="654" name="param" description="An array containing delegate data" type="array" variable="$delegate">
            <type by_reference="false">array</type>
          </tag>
          <tag line="654" name="return" description="attribute name or null" type="\ActiveRecord\delegated">
            <type by_reference="false">\ActiveRecord\delegated</type>
          </tag>
        </docblock>
        <argument line="662">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="662">
          <name>$delegate</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="678" package="ActiveRecord">
        <name>is_readonly</name>
        <full_name>is_readonly</full_name>
        <docblock line="673">
          <description>Determine if the model is in read-only mode.</description>
          <long-description/>
          <tag line="673" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="688" package="ActiveRecord">
        <name>is_new_record</name>
        <full_name>is_new_record</full_name>
        <docblock line="683">
          <description>Determine if the model is a new record.</description>
          <long-description/>
          <tag line="683" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="699" package="ActiveRecord">
        <name>verify_not_readonly</name>
        <full_name>verify_not_readonly</full_name>
        <docblock line="693">
          <description>Throws an exception if this model is set to readonly.</description>
          <long-description/>
          <tag line="693" name="throws" description="" type="\ActiveRecord\ActiveRecord\ReadOnlyException">
            <type by_reference="false">\ActiveRecord\ActiveRecord\ReadOnlyException</type>
          </tag>
          <tag line="693" name="param" description="Name of method that was invoked on model for exception message" type="string" variable="$method_name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="699">
          <name>$method_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="710" package="ActiveRecord">
        <name>readonly</name>
        <full_name>readonly</full_name>
        <docblock line="705">
          <description>Flag model as readonly.</description>
          <long-description/>
          <tag line="705" name="param" description="Set to true to put the model into readonly mode" type="boolean" variable="$readonly">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="710">
          <name>$readonly</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="720" package="ActiveRecord">
        <name>connection</name>
        <full_name>connection</full_name>
        <docblock line="715">
          <description>Retrieve the connection for this model.</description>
          <long-description/>
          <tag line="715" name="return" description="" type="\ActiveRecord\Connection">
            <type by_reference="false">\ActiveRecord\Connection</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="730" package="ActiveRecord">
        <name>reestablish_connection</name>
        <full_name>reestablish_connection</full_name>
        <docblock line="725">
          <description>Re-establishes the database connection with a new connection.</description>
          <long-description/>
          <tag line="725" name="return" description="" type="\ActiveRecord\Connection">
            <type by_reference="false">\ActiveRecord\Connection</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="742" package="ActiveRecord">
        <name>table</name>
        <full_name>table</full_name>
        <docblock line="735">
          <description>Returns the {@link Table} object for this model.</description>
          <long-description>&lt;p&gt;Be sure to call in static scoping: static::table()&lt;/p&gt;</long-description>
          <tag line="735" name="return" description="" type="\ActiveRecord\Table">
            <type by_reference="false">\ActiveRecord\Table</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="754" package="ActiveRecord">
        <name>create</name>
        <full_name>create</full_name>
        <docblock line="747">
          <description>Creates a model and saves it to the database.</description>
          <long-description/>
          <tag line="747" name="param" description="Array of the models attributes" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="747" name="param" description="True if the validators should be run" type="boolean" variable="$validate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="747" name="return" description="" type="\ActiveRecord\Model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
        </docblock>
        <argument line="754">
          <name>$attributes</name>
          <default/>
          <type/>
        </argument>
        <argument line="754">
          <name>$validate</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="774" package="ActiveRecord">
        <name>save</name>
        <full_name>save</full_name>
        <docblock line="762">
          <description>Save the model to the database.</description>
          <long-description>&lt;p&gt;This function will automatically determine if an INSERT or UPDATE needs to occur.
If a validation or a callback for this model returns false, then the model will
not be saved and this will return false.&lt;/p&gt;

&lt;p&gt;If saving an existing model only data that has changed will be saved.&lt;/p&gt;</long-description>
          <tag line="762" name="param" description="Set to true or false depending on if you want the validators to run or not" type="boolean" variable="$validate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="762" name="return" description="True if the model was saved to the database otherwise false" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="774">
          <name>$validate</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="787" package="ActiveRecord">
        <name>insert</name>
        <full_name>insert</full_name>
        <docblock line="780">
          <description>Issue an INSERT sql statement for this model's attribute.</description>
          <long-description/>
          <tag line="780" name="see" description="\ActiveRecord\save" refers="\ActiveRecord\save"/>
          <tag line="780" name="param" description="Set to true or false depending on if you want the validators to run or not" type="boolean" variable="$validate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="780" name="return" description="True if the model was saved to the database otherwise false" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="787">
          <name>$validate</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="846" package="ActiveRecord">
        <name>update</name>
        <full_name>update</full_name>
        <docblock line="839">
          <description>Issue an UPDATE sql statement for this model's dirty attributes.</description>
          <long-description/>
          <tag line="839" name="see" description="\ActiveRecord\save" refers="\ActiveRecord\save"/>
          <tag line="839" name="param" description="Set to true or false depending on if you want the validators to run or not" type="boolean" variable="$validate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="839" name="return" description="True if the model was saved to the database otherwise false" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="846">
          <name>$validate</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="905" package="ActiveRecord">
        <name>delete_all</name>
        <full_name>delete_all</full_name>
        <docblock line="871">
          <description>Deletes records matching conditions in $options</description>
          <long-description>&lt;p&gt;Does not instantiate models and therefore does not invoke callbacks&lt;/p&gt;

&lt;p&gt;Delete all using a hash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YourModel::delete_all(array('conditions' =&gt; array('name' =&gt; 'Tito')));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delete all using an array:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YourModel::delete_all(array('conditions' =&gt; array('name = ?', 'Tito')));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delete all using a string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YourModel::delete_all(array('conditions' =&gt; 'name = "Tito"));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An options array takes the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;conditions:&lt;/b&gt; Conditions using a string/hash/array&lt;/li&gt;
&lt;li&gt;&lt;b&gt;limit:&lt;/b&gt; Limit number of records to delete (MySQL &amp; Sqlite only)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;order:&lt;/b&gt; A SQL fragment for ordering such as: 'name asc', 'id desc, name asc' (MySQL &amp; Sqlite only)&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="871" name="params" description="array $options&#10;return integer Number of rows affected"/>
        </docblock>
        <argument line="905">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="958" package="ActiveRecord">
        <name>update_all</name>
        <full_name>update_all</full_name>
        <docblock line="929">
          <description>Updates records using set in $options</description>
          <long-description>&lt;p&gt;Does not instantiate models and therefore does not invoke callbacks&lt;/p&gt;

&lt;p&gt;Update all using a hash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YourModel::update_all(array('set' =&gt; array('name' =&gt; "Bob")));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update all using a string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YourModel::update_all(array('set' =&gt; 'name = "Bob"'));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An options array takes the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;set:&lt;/b&gt; String/hash of field names and their values to be updated with
&lt;li&gt;&lt;b&gt;conditions:&lt;/b&gt; Conditions using a string/hash/array&lt;/li&gt;
&lt;li&gt;&lt;b&gt;limit:&lt;/b&gt; Limit number of records to update (MySQL &amp; Sqlite only)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;order:&lt;/b&gt; A SQL fragment for ordering such as: 'name asc', 'id desc, name asc' (MySQL &amp; Sqlite only)&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="929" name="params" description="array $options&#10;return integer Number of rows affected"/>
        </docblock>
        <argument line="958">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="991" package="ActiveRecord">
        <name>delete</name>
        <full_name>delete</full_name>
        <docblock line="986">
          <description>Deletes this model from the database and returns true if successful.</description>
          <long-description/>
          <tag line="986" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1014" package="ActiveRecord">
        <name>values_for_pk</name>
        <full_name>values_for_pk</full_name>
        <docblock line="1009">
          <description>Helper that creates an array of values for the primary key(s).</description>
          <long-description/>
          <tag line="1009" name="return" description="An array in the form array(key_name =&gt; value, ...)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1025" package="ActiveRecord">
        <name>values_for</name>
        <full_name>values_for</full_name>
        <docblock line="1019">
          <description>Helper to return a hash of values for the specified attributes.</description>
          <long-description/>
          <tag line="1019" name="param" description="Array of attribute names" type="array" variable="$attribute_names">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1019" name="return" description="An array in the form array(name =&gt; value, ...)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1025">
          <name>$attribute_names</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="1040" package="ActiveRecord">
        <name>_validate</name>
        <full_name>_validate</full_name>
        <docblock line="1035">
          <description>Validates the model.</description>
          <long-description/>
          <tag line="1035" name="return" description="True if passed validators otherwise false" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1071" package="ActiveRecord">
        <name>is_dirty</name>
        <full_name>is_dirty</full_name>
        <docblock line="1066">
          <description>Returns true if the model has been modified.</description>
          <long-description/>
          <tag line="1066" name="return" description="true if modified" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1082" package="ActiveRecord">
        <name>is_valid</name>
        <full_name>is_valid</full_name>
        <docblock line="1076">
          <description>Run validations on model and returns whether or not model passed validation.</description>
          <long-description/>
          <tag line="1076" name="see" description="\ActiveRecord\is_invalid" refers="\ActiveRecord\is_invalid"/>
          <tag line="1076" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1093" package="ActiveRecord">
        <name>is_invalid</name>
        <full_name>is_invalid</full_name>
        <docblock line="1087">
          <description>Runs validations and returns true if invalid.</description>
          <long-description/>
          <tag line="1087" name="see" description="\ActiveRecord\is_valid" refers="\ActiveRecord\is_valid"/>
          <tag line="1087" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1101" package="ActiveRecord">
        <name>set_timestamps</name>
        <full_name>set_timestamps</full_name>
        <docblock line="1098">
          <description>Updates a model's timestamps.</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1118" package="ActiveRecord">
        <name>update_attributes</name>
        <full_name>update_attributes</full_name>
        <docblock line="1112">
          <description>Mass update the model with an array of attribute data and saves to the database.</description>
          <long-description/>
          <tag line="1112" name="param" description="An attribute data array in the form array(name =&gt; value, ...)" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1112" name="return" description="True if successfully updated and saved otherwise false" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1118">
          <name>$attributes</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1131" package="ActiveRecord">
        <name>update_attribute</name>
        <full_name>update_attribute</full_name>
        <docblock line="1124">
          <description>Updates a single attribute and saves the record without going through the normal validation procedure.</description>
          <long-description/>
          <tag line="1124" name="param" description="Name of attribute" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1124" name="param" description="Value of the attribute" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1124" name="return" description="True if successful otherwise false" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1131">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="1131">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1146" package="ActiveRecord">
        <name>set_attributes</name>
        <full_name>set_attributes</full_name>
        <docblock line="1137">
          <description>Mass update the model with data from an attributes hash.</description>
          <long-description>&lt;p&gt;Unlike update_attributes() this method only updates the model's data
but DOES NOT save it to the database.&lt;/p&gt;</long-description>
          <tag line="1137" name="see" description="\ActiveRecord\update_attributes" refers="\ActiveRecord\update_attributes"/>
          <tag line="1137" name="param" description="An array containing data to update in the form array(name =&gt; value, ...)" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1146">
          <name>$attributes</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="1158" package="ActiveRecord">
        <name>set_attributes_via_mass_assignment</name>
        <full_name>set_attributes_via_mass_assignment</full_name>
        <docblock line="1151">
          <description>Passing $guard_attributes as true will throw an exception if an attribute does not exist.</description>
          <long-description/>
          <tag line="1151" name="throws" description="" type="\ActiveRecord\ActiveRecord\UndefinedPropertyException">
            <type by_reference="false">\ActiveRecord\ActiveRecord\UndefinedPropertyException</type>
          </tag>
          <tag line="1151" name="param" description="An array in the form array(name =&gt; value, ...)" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1151" name="param" description="Flag of whether or not protected/non-accessible attributes should be guarded" type="boolean" variable="$guard_attributes">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1158">
          <name>$attributes</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="1158">
          <name>$guard_attributes</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1214" package="ActiveRecord">
        <name>set_relationship_from_eager_load</name>
        <full_name>set_relationship_from_eager_load</full_name>
        <docblock line="1206">
          <description>Add a model to the given named ($name) relationship.</description>
          <long-description/>
          <tag line="1206" name="internal" description="This should &lt;strong&gt;only&lt;/strong&gt; be used by eager load"/>
          <tag line="1206" name="param" description="" type="\ActiveRecord\Model" variable="$model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
          <tag line="1206" name="param" description="of relationship for this table" type="\ActiveRecord\" variable="$name"/>
          <tag line="1206" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="1214">
          <name>$model</name>
          <default>null</default>
          <type>\ActiveRecord\Model</type>
        </argument>
        <argument line="1214">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1240" package="ActiveRecord">
        <name>reload</name>
        <full_name>reload</full_name>
        <docblock line="1235">
          <description>Reloads the attributes and relationships of this object from the database.</description>
          <long-description/>
          <tag line="1235" name="return" description="" type="\ActiveRecord\Model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1251" package="ActiveRecord">
        <name>__clone</name>
        <full_name>__clone</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1263" package="ActiveRecord">
        <name>reset_dirty</name>
        <full_name>reset_dirty</full_name>
        <docblock line="1258">
          <description>Resets the dirty array.</description>
          <long-description/>
          <tag line="1258" name="see" description="\ActiveRecord\dirty_attributes" refers="\ActiveRecord\dirty_attributes"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1314" package="ActiveRecord">
        <name>__callStatic</name>
        <full_name>__callStatic</full_name>
        <docblock line="1275">
          <description>Enables the use of dynamic finders.</description>
          <long-description>&lt;p&gt;Dynamic finders are just an easy way to do queries quickly without having to
specify an options array with conditions in it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SomeModel::find_by_first_name('Tito');
SomeModel::find_by_first_name_and_last_name('Tito','the Grief');
SomeModel::find_by_first_name_or_last_name('Tito','the Grief');
SomeModel::find_all_by_last_name('Smith');
SomeModel::count_by_name('Bob')
SomeModel::count_by_name_or_state('Bob','VA')
SomeModel::count_by_name_and_state('Bob','VA')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also create the model if the find call returned no results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Person::find_or_create_by_name('Tito');

# would be the equivalent of
if (!Person::find_by_name('Tito'))
  Person::create(array('Tito'));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some other examples of find_or_create_by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Person::find_or_create_by_name_and_id('Tito',1);
Person::find_or_create_by_name_and_id(array('name' =&gt; 'Tito', 'id' =&gt; 1));
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="1275" name="param" description="Name of method" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1275" name="param" description="Method args" type="mixed" variable="$args">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1275" name="return" description="" type="\ActiveRecord\Model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
          <tag line="1275" name="throws" description="ActiveRecordException} if invalid query" type="\ActiveRecord\{@link">
            <type by_reference="false">\ActiveRecord\{@link</type>
          </tag>
          <tag line="1275" name="see" description="\ActiveRecord\find" refers="\ActiveRecord\find"/>
        </docblock>
        <argument line="1314">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
        <argument line="1314">
          <name>$args</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1362" package="ActiveRecord">
        <name>__call</name>
        <full_name>__call</full_name>
        <docblock line="1355">
          <description>Enables the use of build|create for associations.</description>
          <long-description/>
          <tag line="1355" name="param" description="Name of method" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1355" name="param" description="Method args" type="mixed" variable="$args">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1355" name="return" description="An instance of a given {@link AbstractRelationship}" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="1362">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
        <argument line="1362">
          <name>$args</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1393" package="ActiveRecord">
        <name>all</name>
        <full_name>all</full_name>
        <docblock line="1387">
          <description>Alias for self::find('all').</description>
          <long-description/>
          <tag line="1387" name="see" description="\ActiveRecord\find" refers="\ActiveRecord\find"/>
          <tag line="1387" name="return" description="array of records found" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1408" package="ActiveRecord">
        <name>count</name>
        <full_name>count</full_name>
        <docblock line="1398">
          <description>Get a count of qualifying records.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;YourModel::count(array('conditions' =&gt; 'amount &gt; 3.14159265'));
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="1398" name="see" description="\ActiveRecord\find" refers="\ActiveRecord\find"/>
          <tag line="1398" name="return" description="Number of records that matched the query" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1440" package="ActiveRecord">
        <name>exists</name>
        <full_name>exists</full_name>
        <docblock line="1428">
          <description>Determine if a record exists.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;SomeModel::exists(123);
SomeModel::exists(array('conditions' =&gt; array('id=? and name=?', 123, 'Tito')));
SomeModel::exists(array('id' =&gt; 123, 'name' =&gt; 'Tito'));
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="1428" name="see" description="\ActiveRecord\find" refers="\ActiveRecord\find"/>
          <tag line="1428" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1451" package="ActiveRecord">
        <name>first</name>
        <full_name>first</full_name>
        <docblock line="1445">
          <description>Alias for self::find('first').</description>
          <long-description/>
          <tag line="1445" name="see" description="\ActiveRecord\find" refers="\ActiveRecord\find"/>
          <tag line="1445" name="return" description="The first matched record or null if not found" type="\ActiveRecord\Model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1462" package="ActiveRecord">
        <name>last</name>
        <full_name>last</full_name>
        <docblock line="1456">
          <description>Alias for self::find('last')</description>
          <long-description/>
          <tag line="1456" name="see" description="\ActiveRecord\find" refers="\ActiveRecord\find"/>
          <tag line="1456" name="return" description="The last matched record or null if not found" type="\ActiveRecord\Model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1521" package="ActiveRecord">
        <name>find</name>
        <full_name>find</full_name>
        <docblock line="1467">
          <description>Find records in the database.</description>
          <long-description>&lt;p&gt;Finding by the primary key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# queries for the model with id=123
YourModel::find(123);

# queries for model with id in(1,2,3)
YourModel::find(1,2,3);

# finding by pk accepts an options array
YourModel::find(123,array('order' =&gt; 'name desc'));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finding by using a conditions array:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YourModel::find('first', array('conditions' =&gt; array('name=?','Tito'),
  'order' =&gt; 'name asc'))
YourModel::find('all', array('conditions' =&gt; 'amount &gt; 3.14159265'));
YourModel::find('all', array('conditions' =&gt; array('id in(?)', array(1,2,3))));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finding by using a hash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YourModel::find(array('name' =&gt; 'Tito', 'id' =&gt; 1));
YourModel::find('first',array('name' =&gt; 'Tito', 'id' =&gt; 1));
YourModel::find('all',array('name' =&gt; 'Tito', 'id' =&gt; 1));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An options array can take the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;select:&lt;/b&gt; A SQL fragment for what fields to return such as: '*', 'people.*', 'first_name, last_name, id'&lt;/li&gt;
&lt;li&gt;&lt;b&gt;joins:&lt;/b&gt; A SQL join fragment such as: 'JOIN roles ON(roles.user_id=user.id)' or a named association on the model&lt;/li&gt;
&lt;li&gt;&lt;b&gt;include:&lt;/b&gt; TODO not implemented yet&lt;/li&gt;
&lt;li&gt;&lt;b&gt;conditions:&lt;/b&gt; A SQL fragment such as: 'id=1', array('id=1'), array('name=? and id=?','Tito',1), array('name IN(?)', array('Tito','Bob')),
array('name' =&gt; 'Tito', 'id' =&gt; 1)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;limit:&lt;/b&gt; Number of records to limit the query to&lt;/li&gt;
&lt;li&gt;&lt;b&gt;offset:&lt;/b&gt; The row offset to return results from for the query&lt;/li&gt;
&lt;li&gt;&lt;b&gt;order:&lt;/b&gt; A SQL fragment for order such as: 'name asc', 'name asc, id desc'&lt;/li&gt;
&lt;li&gt;&lt;b&gt;readonly:&lt;/b&gt; Return all the models in readonly mode&lt;/li&gt;
&lt;li&gt;&lt;b&gt;group:&lt;/b&gt; A SQL group by fragment&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="1467" name="throws" description="RecordNotFound} if no options are passed or finding by pk and no records matched" type="\ActiveRecord\{@link">
            <type by_reference="false">\ActiveRecord\{@link</type>
          </tag>
          <tag line="1467" name="return" description="An array of records found if doing a find_all otherwise a&#10;  single Model object or null if it wasn't found. NULL is only return when&#10;  doing a first/last find. If doing an all find and no records matched this&#10;  will return an empty array." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1581" package="ActiveRecord">
        <name>find_by_pk</name>
        <full_name>find_by_pk</full_name>
        <docblock line="1572">
          <description>Finder method which will find by a single or array of primary keys for this model.</description>
          <long-description/>
          <tag line="1572" name="see" description="\ActiveRecord\find" refers="\ActiveRecord\find"/>
          <tag line="1572" name="param" description="An array containing values for the pk" type="array" variable="$values">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1572" name="param" description="An options array" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1572" name="return" description="" type="\ActiveRecord\Model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
          <tag line="1572" name="throws" description="RecordNotFound} if a record could not be found" type="\ActiveRecord\{@link">
            <type by_reference="false">\ActiveRecord\{@link</type>
          </tag>
        </docblock>
        <argument line="1581">
          <name>$values</name>
          <default/>
          <type/>
        </argument>
        <argument line="1581">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1617" package="ActiveRecord">
        <name>find_by_sql</name>
        <full_name>find_by_sql</full_name>
        <docblock line="1605">
          <description>Find using a raw SELECT query.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;YourModel::find_by_sql("SELECT * FROM people WHERE name=?",array('Tito'));
YourModel::find_by_sql("SELECT * FROM people WHERE name='Tito'");
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="1605" name="param" description="The raw SELECT query" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1605" name="param" description="An array of values for any parameters that needs to be bound" type="array" variable="$values">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1605" name="return" description="An array of models" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1617">
          <name>$sql</name>
          <default/>
          <type/>
        </argument>
        <argument line="1617">
          <name>$values</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1629" package="ActiveRecord">
        <name>query</name>
        <full_name>query</full_name>
        <docblock line="1622">
          <description>Helper method to run arbitrary queries against the model's database connection.</description>
          <long-description/>
          <tag line="1622" name="param" description="SQL to execute" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1622" name="param" description="Bind values, if any, for the query" type="array" variable="$values">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1622" name="return" description="A PDOStatement object" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="1629">
          <name>$sql</name>
          <default/>
          <type/>
        </argument>
        <argument line="1629">
          <name>$values</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1642" package="ActiveRecord">
        <name>is_options_hash</name>
        <full_name>is_options_hash</full_name>
        <docblock line="1634">
          <description>Determines if the specified array is a valid ActiveRecord options array.</description>
          <long-description/>
          <tag line="1634" name="param" description="An options array" type="array" variable="$array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1634" name="param" description="True to throw an exception if not valid" type="bool" variable="$throw">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="1634" name="return" description="True if valid otherwise valse" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="1634" name="throws" description="ActiveRecordException} if the array contained any invalid options" type="\ActiveRecord\{@link">
            <type by_reference="false">\ActiveRecord\{@link</type>
          </tag>
        </docblock>
        <argument line="1642">
          <name>$array</name>
          <default/>
          <type/>
        </argument>
        <argument line="1642">
          <name>$throw</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1667" package="ActiveRecord">
        <name>pk_conditions</name>
        <full_name>pk_conditions</full_name>
        <docblock line="1660">
          <description>Returns a hash containing the names =&gt; values of the primary key.</description>
          <long-description/>
          <tag line="1660" name="internal" description="This needs to eventually support composite keys."/>
          <tag line="1660" name="param" description="Primary key value(s)" type="mixed" variable="$args">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1660" name="return" description="An array in the form array(name =&gt; value, ...)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1667">
          <name>$args</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1681" package="ActiveRecord">
        <name>extract_and_validate_options</name>
        <full_name>extract_and_validate_options</full_name>
        <docblock line="1674">
          <description>Pulls out the options hash from $array if any.</description>
          <long-description/>
          <tag line="1674" name="internal" description="DO NOT remove the reference on $array."/>
          <tag line="1674" name="param" description="&amp;$array An array" type="array" variable="$array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1674" name="return" description="A valid options array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1681">
          <name>$array</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1715" package="ActiveRecord">
        <name>to_json</name>
        <full_name>to_json</full_name>
        <docblock line="1708">
          <description>Returns a JSON representation of this model.</description>
          <long-description/>
          <tag line="1708" name="see" description="\ActiveRecord\Serialization" refers="\ActiveRecord\Serialization"/>
          <tag line="1708" name="param" description="An array containing options for json serialization (see {@link Serialization} for valid options)" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1708" name="return" description="JSON representation of the model" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1715">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1727" package="ActiveRecord">
        <name>to_xml</name>
        <full_name>to_xml</full_name>
        <docblock line="1720">
          <description>Returns an XML representation of this model.</description>
          <long-description/>
          <tag line="1720" name="see" description="\ActiveRecord\Serialization" refers="\ActiveRecord\Serialization"/>
          <tag line="1720" name="param" description="An array containing options for xml serialization (see {@link Serialization} for valid options)" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1720" name="return" description="XML representation of the model" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1727">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1752" package="ActiveRecord">
        <name>to_csv</name>
        <full_name>to_csv</full_name>
        <docblock line="1732">
          <description>Returns an CSV representation of this model.</description>
          <long-description>&lt;p&gt;Can take optional delimiter and enclosure
(defaults are , and double quotes)&lt;/p&gt;

&lt;p&gt;Ex:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActiveRecord\CsvSerializer::$delimiter=';';
ActiveRecord\CsvSerializer::$enclosure='';
YourModel::find('first')-&gt;to_csv(array('only'=&gt;array('name','level')));
returns: Joe,2

YourModel::find('first')-&gt;to_csv(array('only_header'=&gt;true,'only'=&gt;array('name','level')));
returns: name,level
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="1732" name="see" description="\ActiveRecord\Serialization" refers="\ActiveRecord\Serialization"/>
          <tag line="1732" name="param" description="An array containing options for csv serialization (see {@link Serialization} for valid options)" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1732" name="return" description="CSV representation of the model" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1752">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="1764" package="ActiveRecord">
        <name>to_array</name>
        <full_name>to_array</full_name>
        <docblock line="1757">
          <description>Returns an Array representation of this model.</description>
          <long-description/>
          <tag line="1757" name="see" description="\ActiveRecord\Serialization" refers="\ActiveRecord\Serialization"/>
          <tag line="1757" name="param" description="An array containing options for json serialization (see {@link Serialization} for valid options)" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1757" name="return" description="Array representation of the model" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1764">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="1786" package="ActiveRecord">
        <name>serialize</name>
        <full_name>serialize</full_name>
        <docblock line="1769">
          <description>Creates a serializer based on pre-defined to_serializer()</description>
          <long-description>&lt;p&gt;An options array can take the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;only:&lt;/b&gt; a string or array of attributes to be included.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;excluded:&lt;/b&gt; a string or array of attributes to be excluded.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;methods:&lt;/b&gt; a string or array of methods to invoke. The method's name will be used as a key for the final attributes array
along with the method's returned value&lt;/li&gt;
&lt;li&gt;&lt;b&gt;include:&lt;/b&gt; a string or array of associated models to include in the final serialized product.&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="1769" name="param" description="Either Xml, Json, Csv or Array" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1769" name="param" description="Options array for the serializer" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1769" name="return" description="Serialized representation of the model" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1786">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
        <argument line="1786">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="1801" package="ActiveRecord">
        <name>invoke_callback</name>
        <full_name>invoke_callback</full_name>
        <docblock line="1794">
          <description>Invokes the specified callback on this model.</description>
          <long-description/>
          <tag line="1794" name="param" description="Name of the call back to run." type="string" variable="$method_name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1794" name="param" description="Set to true to raise an exception if the callback does not exist." type="boolean" variable="$must_exist">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="1794" name="return" description="True if invoked or null if not" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1801">
          <name>$method_name</name>
          <default/>
          <type/>
        </argument>
        <argument line="1801">
          <name>$must_exist</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="1837" package="ActiveRecord">
        <name>transaction</name>
        <full_name>transaction</full_name>
        <docblock line="1806">
          <description>Executes a block of code inside a database transaction.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;YourModel::transaction(function()
{
  YourModel::create(array("name" =&gt; "blah"));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If an exception is thrown inside the closure the transaction will
automatically be rolled back. You can also return false from your
closure to cause a rollback:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;YourModel::transaction(function()
{
  YourModel::create(array("name" =&gt; "blah"));
  throw new Exception("rollback!");
});

YourModel::transaction(function()
{
  YourModel::create(array("name" =&gt; "blah"));
  return false; # rollback!
});
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="1806" name="param" description="The closure to execute. To cause a rollback have your closure return false or throw an exception." type="\ActiveRecord\Closure" variable="$closure">
            <type by_reference="false">\ActiveRecord\Closure</type>
          </tag>
          <tag line="1806" name="return" description="True if the transaction was committed, False if rolled back." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1837">
          <name>$closure</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/Model.php</critical>
      <error line="423" code="50010">No DocBlock was found for method __wakeup()</error>
      <error line="871" code="50015">Argument $options is missing from the Docblock of delete_all()</error>
      <error line="929" code="50015">Argument $options is missing from the Docblock of update_all()</error>
      <error line="1251" code="50010">No DocBlock was found for method __clone()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Exceptions.php" hash="b4c9e1eb67825972891a1a12ca667139" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="false" namespace="ActiveRecord" line="12" package="ActiveRecord">
      <extends>\Exception</extends>
      <name>ActiveRecordException</name>
      <full_name>\ActiveRecord\ActiveRecordException</full_name>
      <docblock line="7">
        <description>Generic base exception for all ActiveRecord specific errors.</description>
        <long-description/>
        <tag line="7" name="package" description="ActiveRecord"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="19" package="ActiveRecord">
      <extends>\ActiveRecord\ActiveRecordException</extends>
      <name>RecordNotFound</name>
      <full_name>\ActiveRecord\RecordNotFound</full_name>
      <docblock line="14">
        <description>Thrown when a record cannot be found.</description>
        <long-description/>
        <tag line="14" name="package" description="ActiveRecord"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="28" package="ActiveRecord">
      <extends>\ActiveRecord\ActiveRecordException</extends>
      <name>DatabaseException</name>
      <full_name>\ActiveRecord\DatabaseException</full_name>
      <docblock line="21">
        <description>Thrown when there was an error performing a database operation.</description>
        <long-description>&lt;p&gt;The error will be specific to whatever database you are running.&lt;/p&gt;</long-description>
        <tag line="21" name="package" description="ActiveRecord"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="30" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="30">
          <name>$adapter_or_string_or_mystery</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="54" package="ActiveRecord">
      <extends>\ActiveRecord\ActiveRecordException</extends>
      <name>ModelException</name>
      <full_name>\ActiveRecord\ModelException</full_name>
      <docblock line="49">
        <description>Thrown by {@link Model}.</description>
        <long-description/>
        <tag line="49" name="package" description="ActiveRecord"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="61" package="ActiveRecord">
      <extends>\ActiveRecord\ActiveRecordException</extends>
      <name>ExpressionsException</name>
      <full_name>\ActiveRecord\ExpressionsException</full_name>
      <docblock line="56">
        <description>Thrown by {@link Expressions}.</description>
        <long-description/>
        <tag line="56" name="package" description="ActiveRecord"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="68" package="ActiveRecord">
      <extends>\ActiveRecord\ActiveRecordException</extends>
      <name>ConfigException</name>
      <full_name>\ActiveRecord\ConfigException</full_name>
      <docblock line="63">
        <description>Thrown for configuration problems.</description>
        <long-description/>
        <tag line="63" name="package" description="ActiveRecord"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="75" package="ActiveRecord">
      <extends>\ActiveRecord\ModelException</extends>
      <name>UndefinedPropertyException</name>
      <full_name>\ActiveRecord\UndefinedPropertyException</full_name>
      <docblock line="70">
        <description>Thrown when attempting to access an invalid property on a {@link Model}.</description>
        <long-description/>
        <tag line="70" name="package" description="ActiveRecord"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="83" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="77">
          <description>Sets the exception message to show the undefined property's name.</description>
          <long-description/>
          <tag line="77" name="param" description="name of undefined property" type="\ActiveRecord\str" variable="$property_name">
            <type by_reference="false">\ActiveRecord\str</type>
          </tag>
          <tag line="77" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$class_name</name>
          <default/>
          <type/>
        </argument>
        <argument line="83">
          <name>$property_name</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="101" package="ActiveRecord">
      <extends>\ActiveRecord\ModelException</extends>
      <name>ReadOnlyException</name>
      <full_name>\ActiveRecord\ReadOnlyException</full_name>
      <docblock line="96">
        <description>Thrown when attempting to perform a write operation on a {@link Model} that is in read-only mode.</description>
        <long-description/>
        <tag line="96" name="package" description="ActiveRecord"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="110" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="103">
          <description>Sets the exception message to show the undefined property's name.</description>
          <long-description/>
          <tag line="103" name="param" description="name of the model that is read only" type="\ActiveRecord\str" variable="$class_name">
            <type by_reference="false">\ActiveRecord\str</type>
          </tag>
          <tag line="103" name="param" description="name of method which attempted to modify the model" type="\ActiveRecord\str" variable="$method_name">
            <type by_reference="false">\ActiveRecord\str</type>
          </tag>
          <tag line="103" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$class_name</name>
          <default/>
          <type/>
        </argument>
        <argument line="110">
          <name>$method_name</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="122" package="ActiveRecord">
      <extends>\ActiveRecord\ActiveRecordException</extends>
      <name>ValidationsArgumentError</name>
      <full_name>\ActiveRecord\ValidationsArgumentError</full_name>
      <docblock line="117">
        <description>Thrown for validations exceptions.</description>
        <long-description/>
        <tag line="117" name="package" description="ActiveRecord"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="129" package="ActiveRecord">
      <extends>\ActiveRecord\ActiveRecordException</extends>
      <name>RelationshipException</name>
      <full_name>\ActiveRecord\RelationshipException</full_name>
      <docblock line="124">
        <description>Thrown for relationship exceptions.</description>
        <long-description/>
        <tag line="124" name="package" description="ActiveRecord"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="136" package="ActiveRecord">
      <extends>\ActiveRecord\RelationshipException</extends>
      <name>HasManyThroughAssociationException</name>
      <full_name>\ActiveRecord\HasManyThroughAssociationException</full_name>
      <docblock line="131">
        <description>Thrown for has many thru exceptions.</description>
        <long-description/>
        <tag line="131" name="package" description="ActiveRecord"/>
      </docblock>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/Exceptions.php</critical>
      <error line="30" code="50010">No DocBlock was found for method __construct()</error>
      <error line="77" code="50014">Name of argument $class_name does not match with the DocBlock's name $property_name in __construct()</error>
      <error line="77" code="50015">Argument $property_name is missing from the Docblock of __construct()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Config.php" hash="0382e700e342a10b5291b5b0839a0ca9" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="false" namespace="ActiveRecord" line="22" package="ActiveRecord">
      <extends>\ActiveRecord\Singleton</extends>
      <name>Config</name>
      <full_name>\ActiveRecord\Config</full_name>
      <docblock line="8">
        <description>Manages configuration options for ActiveRecord.</description>
        <long-description>&lt;pre&gt;&lt;code&gt;ActiveRecord::initialize(function($cfg) {
  $cfg-&gt;set_model_home('models');
  $cfg-&gt;set_connections(array(
    'development' =&gt; 'mysql://user:pass@development.com/awesome_development',
    'production' =&gt; 'mysql://user:pass@production.com/awesome_production'));
});
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="8" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="44" namespace="ActiveRecord" package="Default">
        <name>$default_connection</name>
        <default>'development'</default>
        <docblock line="24">
          <description>Name of the connection to use by default.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;ActiveRecord\Config::initialize(function($cfg) {
  $cfg-&gt;set_model_directory('/your/app/models');
  $cfg-&gt;set_connections(array(
    'development' =&gt; 'mysql://user:pass@development.com/awesome_development',
    'production' =&gt; 'mysql://user:pass@production.com/awesome_production'));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a singleton class so you can retrieve the {@link Singleton} instance by doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$config = ActiveRecord\Config::instance();
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="24" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="51" namespace="ActiveRecord" package="Default">
        <name>$connections</name>
        <default>array()</default>
        <docblock line="46">
          <description>Contains the list of database connection strings.</description>
          <long-description/>
          <tag line="46" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="59" namespace="ActiveRecord" package="Default">
        <name>$model_directory</name>
        <default/>
        <docblock line="53">
          <description>Directory for the auto_loading of model classes.</description>
          <long-description/>
          <tag line="53" name="see" description="\ActiveRecord\activerecord_autoload" refers="\ActiveRecord\activerecord_autoload"/>
          <tag line="53" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="66" namespace="ActiveRecord" package="Default">
        <name>$logging</name>
        <default>false</default>
        <docblock line="61">
          <description>Switch for logging.</description>
          <long-description/>
          <tag line="61" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="73" namespace="ActiveRecord" package="Default">
        <name>$logger</name>
        <default/>
        <docblock line="68">
          <description>Contains a Logger object that must impelement a log() method.</description>
          <long-description/>
          <tag line="68" name="var" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="80" namespace="ActiveRecord" package="Default">
        <name>$date_format</name>
        <default>\DateTime::ISO8601</default>
        <docblock line="75">
          <description>The format to serialize DateTime values into.</description>
          <long-description/>
          <tag line="75" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="107" package="ActiveRecord">
        <name>initialize</name>
        <full_name>initialize</full_name>
        <docblock line="82">
          <description>Allows config initialization using a closure.</description>
          <long-description>&lt;p&gt;This method is just syntatic sugar.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActiveRecord\Config::initialize(function($cfg) {
  $cfg-&gt;set_model_directory('/path/to/your/model_directory');
  $cfg-&gt;set_connections(array(
    'development' =&gt; 'mysql://username:password@127.0.0.1/database_name'));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also initialize by grabbing the singleton object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cfg = ActiveRecord\Config::instance();
$cfg-&gt;set_model_directory('/path/to/your/model_directory');
$cfg-&gt;set_connections(array('development' =&gt;
  'mysql://username:password@localhost/database_name'));
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="82" name="param" description="A closure" type="\Closure" variable="$initializer">
            <type by_reference="false">\Closure</type>
          </tag>
          <tag line="82" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$initializer</name>
          <default/>
          <type>\Closure</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="125" package="ActiveRecord">
        <name>set_connections</name>
        <full_name>set_connections</full_name>
        <docblock line="112">
          <description>Sets the list of database connection strings.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;$config-&gt;set_connections(array(
    'development' =&gt; 'mysql://username:password@127.0.0.1/database_name'));
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="112" name="param" description="Array of connections" type="array" variable="$connections">
            <type by_reference="false">array</type>
          </tag>
          <tag line="112" name="param" description="Optionally specify the default_connection" type="string" variable="$default_connection">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="112" name="throws" description="" type="\ActiveRecord\ActiveRecord\ConfigException">
            <type by_reference="false">\ActiveRecord\ActiveRecord\ConfigException</type>
          </tag>
        </docblock>
        <argument line="125">
          <name>$connections</name>
          <default/>
          <type/>
        </argument>
        <argument line="125">
          <name>$default_connection</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="141" package="ActiveRecord">
        <name>get_connections</name>
        <full_name>get_connections</full_name>
        <docblock line="136">
          <description>Returns the connection strings array.</description>
          <long-description/>
          <tag line="136" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="152" package="ActiveRecord">
        <name>get_connection</name>
        <full_name>get_connection</full_name>
        <docblock line="146">
          <description>Returns a connection string if found otherwise null.</description>
          <long-description/>
          <tag line="146" name="param" description="Name of connection to retrieve" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="146" name="return" description="connection info for specified connection name" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="152">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="165" package="ActiveRecord">
        <name>get_default_connection_string</name>
        <full_name>get_default_connection_string</full_name>
        <docblock line="160">
          <description>Returns the default connection string or null if there is none.</description>
          <long-description/>
          <tag line="160" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="176" package="ActiveRecord">
        <name>get_default_connection</name>
        <full_name>get_default_connection</full_name>
        <docblock line="171">
          <description>Returns the name of the default connection.</description>
          <long-description/>
          <tag line="171" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="187" package="ActiveRecord">
        <name>set_default_connection</name>
        <full_name>set_default_connection</full_name>
        <docblock line="181">
          <description>Set the name of the default connection.</description>
          <long-description/>
          <tag line="181" name="param" description="Name of a connection in the connections array" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="181" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="198" package="ActiveRecord">
        <name>set_model_directory</name>
        <full_name>set_model_directory</full_name>
        <docblock line="192">
          <description>Sets the directory where models are located.</description>
          <long-description/>
          <tag line="192" name="param" description="Directory path containing your models" type="string" variable="$dir">
            <type by_reference="false">string</type>
          </tag>
          <tag line="192" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="198">
          <name>$dir</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="209" package="ActiveRecord">
        <name>get_model_directory</name>
        <full_name>get_model_directory</full_name>
        <docblock line="203">
          <description>Returns the model directory.</description>
          <long-description/>
          <tag line="203" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="203" name="throws" description="if specified directory was not found" type="\ActiveRecord\ConfigException">
            <type by_reference="false">\ActiveRecord\ConfigException</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="223" package="ActiveRecord">
        <name>set_logging</name>
        <full_name>set_logging</full_name>
        <docblock line="217">
          <description>Turn on/off logging</description>
          <long-description/>
          <tag line="217" name="param" description="" type="boolean" variable="$bool">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="217" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="223">
          <name>$bool</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="235" package="ActiveRecord">
        <name>set_logger</name>
        <full_name>set_logger</full_name>
        <docblock line="228">
          <description>Sets the logger object for future SQL logging</description>
          <long-description/>
          <tag line="228" name="param" description="" type="object" variable="$logger">
            <type by_reference="false">object</type>
          </tag>
          <tag line="228" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="228" name="throws" description="if Logger objecct does not implement public log()" type="\ActiveRecord\ConfigException">
            <type by_reference="false">\ActiveRecord\ConfigException</type>
          </tag>
        </docblock>
        <argument line="235">
          <name>$logger</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="250" package="ActiveRecord">
        <name>get_logging</name>
        <full_name>get_logging</full_name>
        <docblock line="245">
          <description>Return whether or not logging is on</description>
          <long-description/>
          <tag line="245" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="260" package="ActiveRecord">
        <name>get_logger</name>
        <full_name>get_logger</full_name>
        <docblock line="255">
          <description>Returns the logger</description>
          <long-description/>
          <tag line="255" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="268" package="ActiveRecord">
        <name>get_date_format</name>
        <full_name>get_date_format</full_name>
        <docblock line="265">
          <description/>
          <long-description/>
          <tag line="265" name="deprecated" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="277" package="ActiveRecord">
        <name>set_date_format</name>
        <full_name>set_date_format</full_name>
        <docblock line="274">
          <description/>
          <long-description/>
          <tag line="274" name="deprecated" description=""/>
        </docblock>
        <argument line="277">
          <name>$format</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="299" package="ActiveRecord">
        <name>set_cache</name>
        <full_name>set_cache</full_name>
        <docblock line="283">
          <description>Sets the url for the cache server to enable query caching.</description>
          <long-description>&lt;p&gt;Only table schema queries are cached at the moment. A general query cache
will follow.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$config-&gt;set_cache("memcached://localhost");
$config-&gt;set_cache("memcached://localhost",array("expire" =&gt; 60));
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="283" name="param" description="Url to your cache server." type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
          <tag line="283" name="param" description="Array of options" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="299">
          <name>$url</name>
          <default/>
          <type/>
        </argument>
        <argument line="299">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/Config.php</critical>
      <error line="265" code="50012">No short description for method get_date_format()</error>
      <error line="274" code="50012">No short description for method set_date_format()</error>
      <error line="274" code="50015">Argument $format is missing from the Docblock of set_date_format()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Validations.php" hash="9e21992d50d2a39d1acba64e0728f175" package="ActiveRecord">
    <docblock line="2">
      <description>These two classes have been &lt;i&gt;heavily borrowed&lt;/i&gt; from Ruby on Rails' ActiveRecord so much that
this piece can be considered a straight port.</description>
      <long-description>&lt;p&gt;The reason for this is that the vaildation process is
tricky due to order of operations/events. The former combined with PHP's odd typecasting means
that it was easier to formulate this piece base on the rails code.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="false" namespace="ActiveRecord" line="42" package="ActiveRecord">
      <extends/>
      <name>Validations</name>
      <full_name>\ActiveRecord\Validations</full_name>
      <docblock line="16">
        <description>Manages validations for a {@link Model}.</description>
        <long-description>&lt;p&gt;This class isn't meant to be directly used. Instead you define
validators thru static variables in your {@link Model}. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Person extends ActiveRecord\Model {
  static $validates_length_of = array(
    array('name', 'within' =&gt; array(30,100),
    array('state', 'is' =&gt; 2)
  );
}

$person = new Person();
$person-&gt;name = 'Tito';
$person-&gt;state = 'this is not two characters';

if (!$person-&gt;is_valid())
  print_r($person-&gt;errors);
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="16" name="package" description="ActiveRecord"/>
        <tag line="16" name="see" description="\ActiveRecord\Errors" refers="\ActiveRecord\Errors"/>
        <tag line="16" name="link" description="http://www.phpactiverecord.org/guides/validations" link="http://www.phpactiverecord.org/guides/validations"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="44" namespace="ActiveRecord" package="Default">
        <name>$model</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="45" namespace="ActiveRecord" package="Default">
        <name>$options</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="46" namespace="ActiveRecord" package="Default">
        <name>$validators</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="47" namespace="ActiveRecord" package="Default">
        <name>$record</name>
        <default/>
      </property>
      <property final="false" static="true" visibility="private" line="49" namespace="ActiveRecord" package="Default">
        <name>$VALIDATION_FUNCTIONS</name>
        <default>array('validates_presence_of', 'validates_size_of', 'validates_length_of', 'validates_inclusion_of', 'validates_exclusion_of', 'validates_format_of', 'validates_numericality_of', 'validates_uniqueness_of')</default>
      </property>
      <property final="false" static="true" visibility="private" line="60" namespace="ActiveRecord" package="Default">
        <name>$DEFAULT_VALIDATION_OPTIONS</name>
        <default>array('on' =&gt; 'save', 'allow_null' =&gt; false, 'allow_blank' =&gt; false, 'message' =&gt; null)</default>
      </property>
      <property final="false" static="true" visibility="private" line="67" namespace="ActiveRecord" package="Default">
        <name>$ALL_RANGE_OPTIONS</name>
        <default>array('is' =&gt; null, 'within' =&gt; null, 'in' =&gt; null, 'minimum' =&gt; null, 'maximum' =&gt; null)</default>
      </property>
      <property final="false" static="true" visibility="private" line="75" namespace="ActiveRecord" package="Default">
        <name>$ALL_NUMERICALITY_CHECKS</name>
        <default>array('greater_than' =&gt; null, 'greater_than_or_equal_to' =&gt; null, 'equal_to' =&gt; null, 'less_than' =&gt; null, 'less_than_or_equal_to' =&gt; null, 'odd' =&gt; null, 'even' =&gt; null)</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="91" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="85">
          <description>Constructs a {@link Validations} object.</description>
          <long-description/>
          <tag line="85" name="param" description="The model to validate" type="\ActiveRecord\Model" variable="$model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
          <tag line="85" name="return" description="" type="\ActiveRecord\Validations">
            <type by_reference="false">\ActiveRecord\Validations</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="99" package="ActiveRecord">
        <name>get_record</name>
        <full_name>get_record</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="109" package="ActiveRecord">
        <name>rules</name>
        <full_name>rules</full_name>
        <docblock line="104">
          <description>Returns validator data.</description>
          <long-description/>
          <tag line="104" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="136" package="ActiveRecord">
        <name>validate</name>
        <full_name>validate</full_name>
        <docblock line="131">
          <description>Runs the validators.</description>
          <long-description/>
          <tag line="131" name="return" description="the validation errors if any" type="\ActiveRecord\Errors">
            <type by_reference="false">\ActiveRecord\Errors</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="175" package="ActiveRecord">
        <name>validates_presence_of</name>
        <full_name>validates_presence_of</full_name>
        <docblock line="153">
          <description>Validates a field is not null and not blank.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;class Person extends ActiveRecord\Model {
  static $validates_presence_of = array(
    array('first_name'),
    array('last_name')
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Available options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;message:&lt;/b&gt; custom error message&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_blank:&lt;/b&gt; allow blank strings&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_null:&lt;/b&gt; allow null strings&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="153" name="param" description="Validation definition" type="array" variable="$attrs">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="175">
          <name>$attrs</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="208" package="ActiveRecord">
        <name>validates_inclusion_of</name>
        <full_name>validates_inclusion_of</full_name>
        <docblock line="186">
          <description>Validates that a value is included the specified array.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;class Car extends ActiveRecord\Model {
  static $validates_inclusion_of = array(
    array('fuel_type', 'in' =&gt; array('hyrdogen', 'petroleum', 'electric')),
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Available options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;in/within:&lt;/b&gt; attribute should/shouldn't be a value within an array&lt;/li&gt;
&lt;li&gt;&lt;b&gt;message:&lt;/b&gt; custome error message&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_blank:&lt;/b&gt; allow blank strings&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_null:&lt;/b&gt; allow null strings&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="186" name="param" description="Validation definition" type="array" variable="$attrs">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="208">
          <name>$attrs</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="228" package="ActiveRecord">
        <name>validates_exclusion_of</name>
        <full_name>validates_exclusion_of</full_name>
        <docblock line="213">
          <description>This is the opposite of {@link validates_include_of}.</description>
          <long-description>&lt;p&gt;Available options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;in/within:&lt;/b&gt; attribute should/shouldn't be a value within an array&lt;/li&gt;
&lt;li&gt;&lt;b&gt;message:&lt;/b&gt; custome error message&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_blank:&lt;/b&gt; allow blank strings&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_null:&lt;/b&gt; allow null strings&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="213" name="param" description="Validation definition" type="array" variable="$attrs">
            <type by_reference="false">array</type>
          </tag>
          <tag line="213" name="see" description="\ActiveRecord\validates_inclusion_of" refers="\ActiveRecord\validates_inclusion_of"/>
        </docblock>
        <argument line="228">
          <name>$attrs</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="250" package="ActiveRecord">
        <name>validates_inclusion_or_exclusion_of</name>
        <full_name>validates_inclusion_or_exclusion_of</full_name>
        <docblock line="233">
          <description>Validates that a value is in or out of a specified list of values.</description>
          <long-description>&lt;p&gt;Available options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;in/within:&lt;/b&gt; attribute should/shouldn't be a value within an array&lt;/li&gt;
&lt;li&gt;&lt;b&gt;message:&lt;/b&gt; custome error message&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_blank:&lt;/b&gt; allow blank strings&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_null:&lt;/b&gt; allow null strings&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="233" name="see" description="\ActiveRecord\validates_inclusion_of" refers="\ActiveRecord\validates_inclusion_of"/>
          <tag line="233" name="see" description="\ActiveRecord\validates_exclusion_of" refers="\ActiveRecord\validates_exclusion_of"/>
          <tag line="233" name="param" description="Either inclusion or exclusion" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="233" name="param" description="Validation definition" type="\ActiveRecord\" variable="$attrs"/>
        </docblock>
        <argument line="250">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
        <argument line="250">
          <name>$attrs</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="306" package="ActiveRecord">
        <name>validates_numericality_of</name>
        <full_name>validates_numericality_of</full_name>
        <docblock line="278">
          <description>Validates that a value is numeric.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;class Person extends ActiveRecord\Model {
  static $validates_numericality_of = array(
    array('salary', 'greater_than' =&gt; 19.99, 'less_than' =&gt; 99.99)
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Available options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;only_integer:&lt;/b&gt; value must be an integer (e.g. not a float)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;even:&lt;/b&gt; must be even&lt;/li&gt;
&lt;li&gt;&lt;b&gt;odd:&lt;/b&gt; must be odd"&lt;/li&gt;
&lt;li&gt;&lt;b&gt;greater_than:&lt;/b&gt; must be greater than specified number&lt;/li&gt;
&lt;li&gt;&lt;b&gt;greater_than_or_equal_to:&lt;/b&gt; must be greater than or equal to specified number&lt;/li&gt;
&lt;li&gt;&lt;b&gt;equal_to:&lt;/b&gt; ...&lt;/li&gt;
&lt;li&gt;&lt;b&gt;less_than:&lt;/b&gt; ...&lt;/li&gt;
&lt;li&gt;&lt;b&gt;less_than_or_equal_to:&lt;/b&gt; ...&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_blank:&lt;/b&gt; allow blank strings&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_null:&lt;/b&gt; allow null strings&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="278" name="param" description="Validation definition" type="array" variable="$attrs">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="306">
          <name>$attrs</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="388" package="ActiveRecord">
        <name>validates_size_of</name>
        <full_name>validates_size_of</full_name>
        <docblock line="383">
          <description>Alias of {@link validates_length_of}</description>
          <long-description/>
          <tag line="383" name="param" description="Validation definition" type="array" variable="$attrs">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="388">
          <name>$attrs</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="415" package="ActiveRecord">
        <name>validates_format_of</name>
        <full_name>validates_format_of</full_name>
        <docblock line="393">
          <description>Validates that a value is matches a regex.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;class Person extends ActiveRecord\Model {
  static $validates_format_of = array(
    array('email', 'with' =&gt; '/^.*?@.*$/')
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Available options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;with:&lt;/b&gt; a regular expression&lt;/li&gt;
&lt;li&gt;&lt;b&gt;message:&lt;/b&gt; custom error message&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_blank:&lt;/b&gt; allow blank strings&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_null:&lt;/b&gt; allow null strings&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="393" name="param" description="Validation definition" type="array" variable="$attrs">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="415">
          <name>$attrs</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="462" package="ActiveRecord">
        <name>validates_length_of</name>
        <full_name>validates_length_of</full_name>
        <docblock line="438">
          <description>Validates the length of a value.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;class Person extends ActiveRecord\Model {
  static $validates_length_of = array(
    array('name', 'within' =&gt; array(1,50))
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Available options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;is:&lt;/b&gt; attribute should be exactly n characters long&lt;/li&gt;
&lt;li&gt;&lt;b&gt;in/within:&lt;/b&gt; attribute should be within an range array(min,max)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;maximum/minimum:&lt;/b&gt; attribute should not be above/below respectively&lt;/li&gt;
&lt;li&gt;&lt;b&gt;message:&lt;/b&gt; custome error message&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_blank:&lt;/b&gt; allow blank strings&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_null:&lt;/b&gt; allow null strings. (Even if this is set to false, a null string is always shorter than a maximum value.)&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="438" name="param" description="Validation definition" type="array" variable="$attrs">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="462">
          <name>$attrs</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="563" package="ActiveRecord">
        <name>validates_uniqueness_of</name>
        <full_name>validates_uniqueness_of</full_name>
        <docblock line="540">
          <description>Validates the uniqueness of a value.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;class Person extends ActiveRecord\Model {
  static $validates_uniqueness_of = array(
    array('name'),
    array(array('blah','bleh'), 'message' =&gt; 'blech')
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Available options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;with:&lt;/b&gt; a regular expression&lt;/li&gt;
&lt;li&gt;&lt;b&gt;message:&lt;/b&gt; custom error message&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_blank:&lt;/b&gt; allow blank strings&lt;/li&gt;
&lt;li&gt;&lt;b&gt;allow_null:&lt;/b&gt; allow null strings&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="540" name="param" description="Validation definition" type="array" variable="$attrs">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="563">
          <name>$attrs</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="614" package="ActiveRecord">
        <name>is_null_with_option</name>
        <full_name>is_null_with_option</full_name>
        <argument line="614">
          <name>$var</name>
          <default/>
          <type/>
        </argument>
        <argument line="614">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="619" package="ActiveRecord">
        <name>is_blank_with_option</name>
        <full_name>is_blank_with_option</full_name>
        <argument line="619">
          <name>$var</name>
          <default/>
          <type/>
        </argument>
        <argument line="619">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="630" package="ActiveRecord">
      <extends/>
      <implements>\IteratorAggregate</implements>
      <name>Errors</name>
      <full_name>\ActiveRecord\Errors</full_name>
      <docblock line="625">
        <description>Class that holds {@link Validations} errors.</description>
        <long-description/>
        <tag line="625" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="632" namespace="ActiveRecord" package="Default">
        <name>$model</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="633" namespace="ActiveRecord" package="Default">
        <name>$errors</name>
        <default/>
      </property>
      <property final="false" static="true" visibility="public" line="635" namespace="ActiveRecord" package="Default">
        <name>$DEFAULT_ERROR_MESSAGES</name>
        <default>array('inclusion' =&gt; "is not included in the list", 'exclusion' =&gt; "is reserved", 'invalid' =&gt; "is invalid", 'confirmation' =&gt; "doesn't match confirmation", 'accepted' =&gt; "must be accepted", 'empty' =&gt; "can't be empty", 'blank' =&gt; "can't be blank", 'too_long' =&gt; "is too long (maximum is %d characters)", 'too_short' =&gt; "is too short (minimum is %d characters)", 'wrong_length' =&gt; "is the wrong length (should be %d characters)", 'taken' =&gt; "has already been taken", 'not_a_number' =&gt; "is not a number", 'greater_than' =&gt; "must be greater than %d", 'equal_to' =&gt; "must be equal to %d", 'less_than' =&gt; "must be less than %d", 'odd' =&gt; "must be odd", 'even' =&gt; "must be even", 'unique' =&gt; "must be unique", 'less_than_or_equal_to' =&gt; "must be less than or equal to %d", 'greater_than_or_equal_to' =&gt; "must be greater than or equal to %d")</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="664" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="658">
          <description>Constructs an {@link Errors} object.</description>
          <long-description/>
          <tag line="658" name="param" description="The model the error is for" type="\ActiveRecord\Model" variable="$model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
          <tag line="658" name="return" description="" type="\ActiveRecord\Errors">
            <type by_reference="false">\ActiveRecord\Errors</type>
          </tag>
        </docblock>
        <argument line="664">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="673" package="ActiveRecord">
        <name>clear_model</name>
        <full_name>clear_model</full_name>
        <docblock line="669">
          <description>Nulls $model so we don't get pesky circular references.</description>
          <long-description>&lt;p&gt;$model is only needed during the
validation process and so can be safely cleared once that is done.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="684" package="ActiveRecord">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="678">
          <description>Add an error message.</description>
          <long-description/>
          <tag line="678" name="param" description="Name of an attribute on the model" type="string" variable="$attribute">
            <type by_reference="false">string</type>
          </tag>
          <tag line="678" name="param" description="The error message" type="string" variable="$msg">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="684">
          <name>$attribute</name>
          <default/>
          <type/>
        </argument>
        <argument line="684">
          <name>$msg</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="701" package="ActiveRecord">
        <name>add_on_empty</name>
        <full_name>add_on_empty</full_name>
        <docblock line="695">
          <description>Adds an error message only if the attribute value is {@link http://www.php.net/empty empty}.</description>
          <long-description/>
          <tag line="695" name="param" description="Name of an attribute on the model" type="string" variable="$attribute">
            <type by_reference="false">string</type>
          </tag>
          <tag line="695" name="param" description="The error message" type="string" variable="$msg">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="701">
          <name>$attribute</name>
          <default/>
          <type/>
        </argument>
        <argument line="701">
          <name>$msg</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="716" package="ActiveRecord">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="710">
          <description>Retrieve error messages for an attribute.</description>
          <long-description/>
          <tag line="710" name="param" description="Name of an attribute on the model" type="string" variable="$attribute">
            <type by_reference="false">string</type>
          </tag>
          <tag line="710" name="return" description="or null if there is no error." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="716">
          <name>$attribute</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="730" package="ActiveRecord">
        <name>add_on_blank</name>
        <full_name>add_on_blank</full_name>
        <docblock line="724">
          <description>Adds the error message only if the attribute value was null or an empty string.</description>
          <long-description/>
          <tag line="724" name="param" description="Name of an attribute on the model" type="string" variable="$attribute">
            <type by_reference="false">string</type>
          </tag>
          <tag line="724" name="param" description="The error message" type="string" variable="$msg">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="730">
          <name>$attribute</name>
          <default/>
          <type/>
        </argument>
        <argument line="730">
          <name>$msg</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="745" package="ActiveRecord">
        <name>is_invalid</name>
        <full_name>is_invalid</full_name>
        <docblock line="739">
          <description>Returns true if the specified attribute had any error messages.</description>
          <long-description/>
          <tag line="739" name="param" description="Name of an attribute on the model" type="string" variable="$attribute">
            <type by_reference="false">string</type>
          </tag>
          <tag line="739" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="745">
          <name>$attribute</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="756" package="ActiveRecord">
        <name>on</name>
        <full_name>on</full_name>
        <docblock line="750">
          <description>Returns the error message(s) for the specified attribute or null if none.</description>
          <long-description/>
          <tag line="750" name="param" description="Name of an attribute on the model" type="string" variable="$attribute">
            <type by_reference="false">string</type>
          </tag>
          <tag line="750" name="return" description="Array of strings if several error occured on this attribute." type="\ActiveRecord\string/array">
            <type by_reference="false">\ActiveRecord\string/array</type>
          </tag>
        </docblock>
        <argument line="756">
          <name>$attribute</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="775" package="ActiveRecord">
        <name>get_raw_errors</name>
        <full_name>get_raw_errors</full_name>
        <docblock line="763">
          <description>Returns the internal errors object.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;$model-&gt;errors-&gt;get_raw_errors();

# array(
#  "name" =&gt; array("can't be blank"),
#  "state" =&gt; array("is the wrong length (should be 2 chars)",
# )
&lt;/code&gt;&lt;/pre&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="794" package="ActiveRecord">
        <name>full_messages</name>
        <full_name>full_messages</full_name>
        <docblock line="780">
          <description>Returns all the error messages as an array.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;$model-&gt;errors-&gt;full_messages();

# array(
#  "Name can't be blank",
#  "State is the wrong length (should be 2 chars)"
# )
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="780" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="822" package="ActiveRecord">
        <name>to_array</name>
        <full_name>to_array</full_name>
        <docblock line="805">
          <description>Returns all the error messages as an array, including error key.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;$model-&gt;errors-&gt;errors();

# array(
#  "name" =&gt; array("Name can't be blank"),
#  "state" =&gt; array("State is the wrong length (should be 2 chars)")
# )
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="805" name="param" description="Closure to fetch the errors in some other format (optional)&#10;                      This closure has the signature function($attribute, $message)&#10;                      and is called for each available error message." type="array" variable="$closure">
            <type by_reference="false">array</type>
          </tag>
          <tag line="805" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="822">
          <name>$closure</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="856" package="ActiveRecord">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="845">
          <description>Convert all error messages to a String.</description>
          <long-description>&lt;p&gt;This function is called implicitely if the object is casted to a string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo $error;

# "Name can't be blank\nState is the wrong length (should be 2 chars)"
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="845" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="865" package="ActiveRecord">
        <name>is_empty</name>
        <full_name>is_empty</full_name>
        <docblock line="861">
          <description>Returns true if there are no error messages.</description>
          <long-description/>
          <tag line="861" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="873" package="ActiveRecord">
        <name>clear</name>
        <full_name>clear</full_name>
        <docblock line="870">
          <description>Clears out all error messages.</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="882" package="ActiveRecord">
        <name>size</name>
        <full_name>size</full_name>
        <docblock line="878">
          <description>Returns the number of error messages there are.</description>
          <long-description/>
          <tag line="878" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="907" package="ActiveRecord">
        <name>getIterator</name>
        <full_name>getIterator</full_name>
        <docblock line="895">
          <description>Returns an iterator to the error messages.</description>
          <long-description>&lt;p&gt;This will allow you to iterate over the {@link Errors} object using foreach.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach ($model-&gt;errors as $msg)
  echo "$msg\n";
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="895" name="return" description="" type="\ArrayIterator">
            <type by_reference="false">\ArrayIterator</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="44" code="50018">No DocBlock was found for property $model</error>
      <error line="45" code="50018">No DocBlock was found for property $options</error>
      <error line="46" code="50018">No DocBlock was found for property $validators</error>
      <error line="47" code="50018">No DocBlock was found for property $record</error>
      <error line="49" code="50018">No DocBlock was found for property $VALIDATION_FUNCTIONS</error>
      <error line="60" code="50018">No DocBlock was found for property $DEFAULT_VALIDATION_OPTIONS</error>
      <error line="67" code="50018">No DocBlock was found for property $ALL_RANGE_OPTIONS</error>
      <error line="75" code="50018">No DocBlock was found for property $ALL_NUMERICALITY_CHECKS</error>
      <error line="99" code="50010">No DocBlock was found for method get_record()</error>
      <error line="614" code="50010">No DocBlock was found for method is_null_with_option()</error>
      <error line="619" code="50010">No DocBlock was found for method is_blank_with_option()</error>
      <error line="632" code="50018">No DocBlock was found for property $model</error>
      <error line="633" code="50018">No DocBlock was found for property $errors</error>
      <error line="635" code="50018">No DocBlock was found for property $DEFAULT_ERROR_MESSAGES</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/ConnectionManager.php" hash="08d2f4f16cf0ede92a017977ed0254f6" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="false" namespace="ActiveRecord" line="12" package="ActiveRecord">
      <extends>\ActiveRecord\Singleton</extends>
      <name>ConnectionManager</name>
      <full_name>\ActiveRecord\ConnectionManager</full_name>
      <docblock line="7">
        <description>Singleton to manage any and all database connections.</description>
        <long-description/>
        <tag line="7" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="18" namespace="ActiveRecord" package="Default">
        <name>$connections</name>
        <default>array()</default>
        <docblock line="14">
          <description>Array of {@link Connection} objects.</description>
          <long-description/>
          <tag line="14" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="27" package="ActiveRecord">
        <name>get_connection</name>
        <full_name>get_connection</full_name>
        <docblock line="20">
          <description>If $name is null then the default connection will be returned.</description>
          <long-description/>
          <tag line="20" name="see" description="\ActiveRecord\Config" refers="\ActiveRecord\Config"/>
          <tag line="20" name="param" description="Optional name of a connection" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="20" name="return" description="" type="\ActiveRecord\Connection">
            <type by_reference="false">\ActiveRecord\Connection</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="44" package="ActiveRecord">
        <name>drop_connection</name>
        <full_name>drop_connection</full_name>
        <docblock line="38">
          <description>Drops the connection from the connection manager.</description>
          <long-description>&lt;p&gt;Does not actually close it since there
is no close method in PDO.&lt;/p&gt;</long-description>
          <tag line="38" name="param" description="Name of the connection to forget about" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/ConnectionManager.php</critical>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Connection.php" hash="3e0b29bc24f8bd3af3883bc9e4a83cc3" package="ActiveRecord">
    <docblock line="3">
      <description/>
      <long-description/>
      <tag line="3" name="package" description="ActiveRecord"/>
    </docblock>
    <include line="9" type="Require Once" package="Default">
      <name>Column.php</name>
    </include>
    <include line="139" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="true" namespace="ActiveRecord" line="20" package="ActiveRecord">
      <extends/>
      <name>Connection</name>
      <full_name>\ActiveRecord\Connection</full_name>
      <docblock line="15">
        <description>The base class for database connection adapters.</description>
        <long-description/>
        <tag line="15" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="27" namespace="ActiveRecord" package="Default">
        <name>$connection</name>
        <default/>
        <docblock line="23">
          <description>The PDO connection object.</description>
          <long-description/>
          <tag line="23" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="32" namespace="ActiveRecord" package="Default">
        <name>$last_query</name>
        <default/>
        <docblock line="28">
          <description>The last query run.</description>
          <long-description/>
          <tag line="28" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="38" namespace="ActiveRecord" package="Default">
        <name>$logging</name>
        <default>false</default>
        <docblock line="33">
          <description>Switch for logging.</description>
          <long-description/>
          <tag line="33" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="44" namespace="ActiveRecord" package="Default">
        <name>$logger</name>
        <default/>
        <docblock line="39">
          <description>Contains a Logger object that must impelement a log() method.</description>
          <long-description/>
          <tag line="39" name="var" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="49" namespace="ActiveRecord" package="Default">
        <name>$protocol</name>
        <default/>
        <docblock line="45">
          <description>The name of the protocol that is used.</description>
          <long-description/>
          <tag line="45" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="54" namespace="ActiveRecord" package="Default">
        <name>$date_format</name>
        <default>'Y-m-d'</default>
        <docblock line="50">
          <description>Database's date format</description>
          <long-description/>
          <tag line="50" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="59" namespace="ActiveRecord" package="Default">
        <name>$datetime_format</name>
        <default>'Y-m-d H:i:s T'</default>
        <docblock line="55">
          <description>Database's datetime format</description>
          <long-description/>
          <tag line="55" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="64" namespace="ActiveRecord" package="Default">
        <name>$PDO_OPTIONS</name>
        <default>array(\PDO::ATTR_CASE =&gt; \PDO::CASE_LOWER, \PDO::ATTR_ERRMODE =&gt; \PDO::ERRMODE_EXCEPTION, \PDO::ATTR_ORACLE_NULLS =&gt; \PDO::NULL_NATURAL, \PDO::ATTR_STRINGIFY_FETCHES =&gt; false)</default>
        <docblock line="60">
          <description>Default PDO options to set for each connection.</description>
          <long-description/>
          <tag line="60" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="73" namespace="ActiveRecord" package="Default">
        <name>$QUOTE_CHARACTER</name>
        <default>'`'</default>
        <docblock line="69">
          <description>The quote character for stuff like column and field names.</description>
          <long-description/>
          <tag line="69" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="78" namespace="ActiveRecord" package="Default">
        <name>$DEFAULT_PORT</name>
        <default>0</default>
        <docblock line="74">
          <description>Default port.</description>
          <long-description/>
          <tag line="74" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="91" package="ActiveRecord">
        <name>instance</name>
        <full_name>instance</full_name>
        <docblock line="80">
          <description>Retrieve a database connection.</description>
          <long-description/>
          <tag line="80" name="param" description="A database connection string (ex. mysql://user:pass@host[:port]/dbname)&#10;  Everything after the protocol:// part is specific to the connection adapter.&#10;  OR&#10;  A connection name that is set in ActiveRecord\Config&#10;  If null it will use the default connection specified by ActiveRecord\Config-&gt;set_default_connection" type="string" variable="$connection_string_or_connection_name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="80" name="return" description="" type="\ActiveRecord\Connection">
            <type by_reference="false">\ActiveRecord\Connection</type>
          </tag>
          <tag line="80" name="see" description="\ActiveRecord\parse_connection_url" refers="\ActiveRecord\parse_connection_url"/>
        </docblock>
        <argument line="91">
          <name>$connection_string_or_connection_name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="ActiveRecord" line="130" package="ActiveRecord">
        <name>load_adapter_class</name>
        <full_name>load_adapter_class</full_name>
        <docblock line="124">
          <description>Loads the specified class for an adapter.</description>
          <long-description/>
          <tag line="124" name="param" description="Name of the adapter." type="string" variable="$adapter">
            <type by_reference="false">string</type>
          </tag>
          <tag line="124" name="return" description="The full name of the class including namespace." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="130">
          <name>$adapter</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="165" package="ActiveRecord">
        <name>parse_connection_url</name>
        <full_name>parse_connection_url</full_name>
        <docblock line="143">
          <description>Use this for any adapters that can take connection info in the form below
to set the adapters connection info.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;protocol://username:password@host[:port]/dbname
protocol://urlencoded%20username:urlencoded%20password@host[:port]/dbname?decode=true
protocol://username:password@unix(/some/file/path)/dbname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sqlite has a special syntax, as it does not need a database name or user authentication:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sqlite://file.db
sqlite://../relative/path/to/file.db
sqlite://unix(/absolute/path/to/file.db)
sqlite://windows(c%2A/absolute/path/to/file.db)
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="143" name="param" description="A connection URL" type="string" variable="$connection_url">
            <type by_reference="false">string</type>
          </tag>
          <tag line="143" name="return" description="the parsed URL as an object." type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="165">
          <name>$connection_url</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="235" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="229">
          <description>Class Connection is a singleton.</description>
          <long-description>&lt;p&gt;Access it via instance().&lt;/p&gt;</long-description>
          <tag line="229" name="param" description="Array containing URL parts" type="array" variable="$info">
            <type by_reference="false">array</type>
          </tag>
          <tag line="229" name="return" description="" type="\ActiveRecord\Connection">
            <type by_reference="false">\ActiveRecord\Connection</type>
          </tag>
        </docblock>
        <argument line="235">
          <name>$info</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="261" package="ActiveRecord">
        <name>columns</name>
        <full_name>columns</full_name>
        <docblock line="255">
          <description>Retrieves column meta data for the specified table.</description>
          <long-description/>
          <tag line="255" name="param" description="Name of a table" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="255" name="return" description="An array of {@link Column} objects." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="261">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="279" package="ActiveRecord">
        <name>escape</name>
        <full_name>escape</full_name>
        <docblock line="273">
          <description>Escapes quotes in a string.</description>
          <long-description/>
          <tag line="273" name="param" description="The string to be quoted." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="273" name="return" description="The string with any quotes in it properly escaped." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="279">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="290" package="ActiveRecord">
        <name>insert_id</name>
        <full_name>insert_id</full_name>
        <docblock line="284">
          <description>Retrieve the insert id of the last model saved.</description>
          <long-description/>
          <tag line="284" name="param" description="Optional name of a sequence to use" type="string" variable="$sequence">
            <type by_reference="false">string</type>
          </tag>
          <tag line="284" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="290">
          <name>$sequence</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="302" package="ActiveRecord">
        <name>query</name>
        <full_name>query</full_name>
        <docblock line="295">
          <description>Execute a raw SQL query on the database.</description>
          <long-description/>
          <tag line="295" name="param" description="Raw SQL string to execute." type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="295" name="param" description="&amp;$values Optional array of bind values" type="array" variable="$values">
            <type by_reference="false">array</type>
          </tag>
          <tag line="295" name="return" description="A result set object" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="302">
          <name>$sql</name>
          <default/>
          <type/>
        </argument>
        <argument line="302">
          <name>$values</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="337" package="ActiveRecord">
        <name>query_and_fetch_one</name>
        <full_name>query_and_fetch_one</full_name>
        <docblock line="330">
          <description>Execute a query that returns maximum of one row with one field and return it.</description>
          <long-description/>
          <tag line="330" name="param" description="Raw SQL string to execute." type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="330" name="param" description="&amp;$values Optional array of values to bind to the query." type="array" variable="$values">
            <type by_reference="false">array</type>
          </tag>
          <tag line="330" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="337">
          <name>$sql</name>
          <default/>
          <type/>
        </argument>
        <argument line="337">
          <name>$values</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="350" package="ActiveRecord">
        <name>query_and_fetch</name>
        <full_name>query_and_fetch</full_name>
        <docblock line="344">
          <description>Execute a raw SQL query and fetch the results.</description>
          <long-description/>
          <tag line="344" name="param" description="Raw SQL string to execute." type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="344" name="param" description="Closure that will be passed the fetched results." type="\Closure" variable="$handler">
            <type by_reference="false">\Closure</type>
          </tag>
        </docblock>
        <argument line="350">
          <name>$sql</name>
          <default/>
          <type/>
        </argument>
        <argument line="350">
          <name>$handler</name>
          <default/>
          <type>\Closure</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="363" package="ActiveRecord">
        <name>tables</name>
        <full_name>tables</full_name>
        <docblock line="358">
          <description>Returns all tables for the current database.</description>
          <long-description/>
          <tag line="358" name="return" description="Array containing table names." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="377" package="ActiveRecord">
        <name>transaction</name>
        <full_name>transaction</full_name>
        <docblock line="374">
          <description>Starts a transaction.</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="386" package="ActiveRecord">
        <name>commit</name>
        <full_name>commit</full_name>
        <docblock line="383">
          <description>Commits the current transaction.</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="395" package="ActiveRecord">
        <name>rollback</name>
        <full_name>rollback</full_name>
        <docblock line="392">
          <description>Rollback a transaction.</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="406" package="ActiveRecord">
        <name>supports_sequences</name>
        <full_name>supports_sequences</full_name>
        <docblock line="401">
          <description>Tells you if this adapter supports sequences or not.</description>
          <long-description/>
          <tag line="401" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="418" package="ActiveRecord">
        <name>get_sequence_name</name>
        <full_name>get_sequence_name</full_name>
        <docblock line="411">
          <description>Return a default sequence name for the specified table.</description>
          <long-description/>
          <tag line="411" name="param" description="Name of a table" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="411" name="param" description="Name of column sequence is for" type="string" variable="$column_name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="411" name="return" description="sequence name or null if not supported." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="418">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
        <argument line="418">
          <name>$column_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="429" package="ActiveRecord">
        <name>next_sequence_value</name>
        <full_name>next_sequence_value</full_name>
        <docblock line="423">
          <description>Return SQL for getting the next value in a sequence.</description>
          <long-description/>
          <tag line="423" name="param" description="Name of the sequence" type="string" variable="$sequence_name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="423" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="429">
          <name>$sequence_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="440" package="ActiveRecord">
        <name>quote_name</name>
        <full_name>quote_name</full_name>
        <docblock line="434">
          <description>Quote a name like table names and field names.</description>
          <long-description/>
          <tag line="434" name="param" description="String to quote." type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="434" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="440">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="452" package="ActiveRecord">
        <name>date_to_string</name>
        <full_name>date_to_string</full_name>
        <docblock line="446">
          <description>Return a date time formatted into the database's date format.</description>
          <long-description/>
          <tag line="446" name="param" description="The DateTime object" type="\ActiveRecord\DateTime" variable="$datetime">
            <type by_reference="false">\ActiveRecord\DateTime</type>
          </tag>
          <tag line="446" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="452">
          <name>$datetime</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="463" package="ActiveRecord">
        <name>datetime_to_string</name>
        <full_name>datetime_to_string</full_name>
        <docblock line="457">
          <description>Return a date time formatted into the database's datetime format.</description>
          <long-description/>
          <tag line="457" name="param" description="The DateTime object" type="\ActiveRecord\DateTime" variable="$datetime">
            <type by_reference="false">\ActiveRecord\DateTime</type>
          </tag>
          <tag line="457" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="463">
          <name>$datetime</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="474" package="ActiveRecord">
        <name>string_to_datetime</name>
        <full_name>string_to_datetime</full_name>
        <docblock line="468">
          <description>Converts a string representation of a datetime into a DateTime object.</description>
          <long-description/>
          <tag line="468" name="param" description="A datetime in the form accepted by date_create()" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="468" name="return" description="" type="\ActiveRecord\DateTime">
            <type by_reference="false">\ActiveRecord\DateTime</type>
          </tag>
        </docblock>
        <argument line="474">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ActiveRecord" line="493" package="ActiveRecord">
        <name>limit</name>
        <full_name>limit</full_name>
        <docblock line="485">
          <description>Adds a limit clause to the SQL query.</description>
          <long-description/>
          <tag line="485" name="param" description="The SQL statement." type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="485" name="param" description="Row offset to start at." type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="485" name="param" description="Maximum number of rows to return." type="int" variable="$limit">
            <type by_reference="false">int</type>
          </tag>
          <tag line="485" name="return" description="The SQL query that will limit results to specified parameters" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="493">
          <name>$sql</name>
          <default/>
          <type/>
        </argument>
        <argument line="493">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
        <argument line="493">
          <name>$limit</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ActiveRecord" line="501" package="ActiveRecord">
        <name>query_column_info</name>
        <full_name>query_column_info</full_name>
        <docblock line="495">
          <description>Query for column meta info and return statement handle.</description>
          <long-description/>
          <tag line="495" name="param" description="Name of a table" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="495" name="return" description="" type="\ActiveRecord\PDOStatement">
            <type by_reference="false">\ActiveRecord\PDOStatement</type>
          </tag>
        </docblock>
        <argument line="501">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ActiveRecord" line="509" package="ActiveRecord">
        <name>query_for_tables</name>
        <full_name>query_for_tables</full_name>
        <docblock line="503">
          <description>Query for all tables in the current database.</description>
          <long-description>&lt;p&gt;The result must only
contain one column which has the name of the table.&lt;/p&gt;</long-description>
          <tag line="503" name="return" description="" type="\ActiveRecord\PDOStatement">
            <type by_reference="false">\ActiveRecord\PDOStatement</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ActiveRecord" line="514" package="ActiveRecord">
        <name>set_encoding</name>
        <full_name>set_encoding</full_name>
        <docblock line="511">
          <description>Executes query to specify the character set for this connection.</description>
          <long-description/>
        </docblock>
        <argument line="514">
          <name>$charset</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ActiveRecord" line="520" package="ActiveRecord">
        <name>native_database_types</name>
        <full_name>native_database_types</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="528" package="ActiveRecord">
        <name>accepts_limit_and_order_for_update_and_delete</name>
        <full_name>accepts_limit_and_order_for_update_and_delete</full_name>
        <docblock line="522">
          <description>Specifies whether or not adapter can use LIMIT/ORDER clauses with DELETE &amp; UPDATE operations</description>
          <long-description/>
          <tag line="522" name="internal" description=""/>
          <tag line="522" name="returns" description="boolean (FALSE by default)"/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="3" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/Connection.php</critical>
      <error line="511" code="50015">Argument $charset is missing from the Docblock of set_encoding()</error>
      <error line="520" code="50010">No DocBlock was found for method native_database_types()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/adapters/SqliteAdapter.php" hash="9e32aecba182a0df3030f79957675e93" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="false" namespace="ActiveRecord" line="14" package="ActiveRecord">
      <extends>\ActiveRecord\Connection</extends>
      <name>SqliteAdapter</name>
      <full_name>\ActiveRecord\SqliteAdapter</full_name>
      <docblock line="9">
        <description>Adapter for SQLite.</description>
        <long-description/>
        <tag line="9" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="17" namespace="ActiveRecord" package="Default">
        <name>$datetime_format</name>
        <default>'Y-m-d H:i:s'</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="19" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="19">
          <name>$info</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="27" package="ActiveRecord">
        <name>limit</name>
        <full_name>limit</full_name>
        <argument line="27">
          <name>$sql</name>
          <default/>
          <type/>
        </argument>
        <argument line="27">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
        <argument line="27">
          <name>$limit</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="34" package="ActiveRecord">
        <name>query_column_info</name>
        <full_name>query_column_info</full_name>
        <argument line="34">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="39" package="ActiveRecord">
        <name>query_for_tables</name>
        <full_name>query_for_tables</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="44" package="ActiveRecord">
        <name>create_column</name>
        <full_name>create_column</full_name>
        <argument line="44">
          <name>$column</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="87" package="ActiveRecord">
        <name>set_encoding</name>
        <full_name>set_encoding</full_name>
        <argument line="87">
          <name>$charset</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="92" package="ActiveRecord">
        <name>accepts_limit_and_order_for_update_and_delete</name>
        <full_name>accepts_limit_and_order_for_update_and_delete</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="94" package="ActiveRecord">
        <name>native_database_types</name>
        <full_name>native_database_types</full_name>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/adapters/SqliteAdapter.php</critical>
      <error line="17" code="50018">No DocBlock was found for property $datetime_format</error>
      <error line="19" code="50010">No DocBlock was found for method __construct()</error>
      <error line="27" code="50010">No DocBlock was found for method limit()</error>
      <error line="34" code="50010">No DocBlock was found for method query_column_info()</error>
      <error line="39" code="50010">No DocBlock was found for method query_for_tables()</error>
      <error line="44" code="50010">No DocBlock was found for method create_column()</error>
      <error line="87" code="50010">No DocBlock was found for method set_encoding()</error>
      <error line="92" code="50010">No DocBlock was found for method accepts_limit_and_order_for_update_and_delete()</error>
      <error line="94" code="50010">No DocBlock was found for method native_database_types()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/adapters/PgsqlAdapter.php" hash="ed3022d3e1e7a48bdaa47bcdc01f7d63" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="false" namespace="ActiveRecord" line="12" package="ActiveRecord">
      <extends>\ActiveRecord\Connection</extends>
      <name>PgsqlAdapter</name>
      <full_name>\ActiveRecord\PgsqlAdapter</full_name>
      <docblock line="7">
        <description>Adapter for Postgres (not completed yet)</description>
        <long-description/>
        <tag line="7" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="14" namespace="ActiveRecord" package="Default">
        <name>$QUOTE_CHARACTER</name>
        <default>'"'</default>
      </property>
      <property final="false" static="true" visibility="public" line="15" namespace="ActiveRecord" package="Default">
        <name>$DEFAULT_PORT</name>
        <default>5432</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="17" package="ActiveRecord">
        <name>supports_sequences</name>
        <full_name>supports_sequences</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="22" package="ActiveRecord">
        <name>get_sequence_name</name>
        <full_name>get_sequence_name</full_name>
        <argument line="22">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
        <argument line="22">
          <name>$column_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="27" package="ActiveRecord">
        <name>next_sequence_value</name>
        <full_name>next_sequence_value</full_name>
        <argument line="27">
          <name>$sequence_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="32" package="ActiveRecord">
        <name>limit</name>
        <full_name>limit</full_name>
        <argument line="32">
          <name>$sql</name>
          <default/>
          <type/>
        </argument>
        <argument line="32">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
        <argument line="32">
          <name>$limit</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="37" package="ActiveRecord">
        <name>query_column_info</name>
        <full_name>query_column_info</full_name>
        <argument line="37">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="67" package="ActiveRecord">
        <name>query_for_tables</name>
        <full_name>query_for_tables</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="72" package="ActiveRecord">
        <name>create_column</name>
        <full_name>create_column</full_name>
        <argument line="72">
          <name>$column</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="116" package="ActiveRecord">
        <name>set_encoding</name>
        <full_name>set_encoding</full_name>
        <argument line="116">
          <name>$charset</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="121" package="ActiveRecord">
        <name>native_database_types</name>
        <full_name>native_database_types</full_name>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/adapters/PgsqlAdapter.php</critical>
      <error line="14" code="50018">No DocBlock was found for property $QUOTE_CHARACTER</error>
      <error line="15" code="50018">No DocBlock was found for property $DEFAULT_PORT</error>
      <error line="17" code="50010">No DocBlock was found for method supports_sequences()</error>
      <error line="22" code="50010">No DocBlock was found for method get_sequence_name()</error>
      <error line="27" code="50010">No DocBlock was found for method next_sequence_value()</error>
      <error line="32" code="50010">No DocBlock was found for method limit()</error>
      <error line="37" code="50010">No DocBlock was found for method query_column_info()</error>
      <error line="67" code="50010">No DocBlock was found for method query_for_tables()</error>
      <error line="72" code="50010">No DocBlock was found for method create_column()</error>
      <error line="116" code="50010">No DocBlock was found for method set_encoding()</error>
      <error line="121" code="50010">No DocBlock was found for method native_database_types()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/adapters/OciAdapter.php" hash="b637519f87a227231226894c8e6572c4" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="false" namespace="ActiveRecord" line="14" package="ActiveRecord">
      <extends>\ActiveRecord\Connection</extends>
      <name>OciAdapter</name>
      <full_name>\ActiveRecord\OciAdapter</full_name>
      <docblock line="9">
        <description>Adapter for OCI (not completed yet).</description>
        <long-description/>
        <tag line="9" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="16" namespace="ActiveRecord" package="Default">
        <name>$QUOTE_CHARACTER</name>
        <default>''</default>
      </property>
      <property final="false" static="true" visibility="public" line="17" namespace="ActiveRecord" package="Default">
        <name>$DEFAULT_PORT</name>
        <default>1521</default>
      </property>
      <property final="false" static="false" visibility="public" line="19" namespace="ActiveRecord" package="Default">
        <name>$dsn_params</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="21" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="21">
          <name>$info</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="31" package="ActiveRecord">
        <name>supports_sequences</name>
        <full_name>supports_sequences</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="33" package="ActiveRecord">
        <name>get_next_sequence_value</name>
        <full_name>get_next_sequence_value</full_name>
        <argument line="33">
          <name>$sequence_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="38" package="ActiveRecord">
        <name>next_sequence_value</name>
        <full_name>next_sequence_value</full_name>
        <argument line="38">
          <name>$sequence_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="43" package="ActiveRecord">
        <name>date_to_string</name>
        <full_name>date_to_string</full_name>
        <argument line="43">
          <name>$datetime</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="48" package="ActiveRecord">
        <name>datetime_to_string</name>
        <full_name>datetime_to_string</full_name>
        <argument line="48">
          <name>$datetime</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="54" package="ActiveRecord">
        <name>string_to_datetime</name>
        <full_name>string_to_datetime</full_name>
        <argument line="54">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="59" package="ActiveRecord">
        <name>limit</name>
        <full_name>limit</full_name>
        <argument line="59">
          <name>$sql</name>
          <default/>
          <type/>
        </argument>
        <argument line="59">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
        <argument line="59">
          <name>$limit</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="68" package="ActiveRecord">
        <name>query_column_info</name>
        <full_name>query_column_info</full_name>
        <argument line="68">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="85" package="ActiveRecord">
        <name>query_for_tables</name>
        <full_name>query_for_tables</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="90" package="ActiveRecord">
        <name>create_column</name>
        <full_name>create_column</full_name>
        <argument line="90">
          <name>$column</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="124" package="ActiveRecord">
        <name>set_encoding</name>
        <full_name>set_encoding</full_name>
        <argument line="124">
          <name>$charset</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="129" package="ActiveRecord">
        <name>native_database_types</name>
        <full_name>native_database_types</full_name>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/adapters/OciAdapter.php</critical>
      <error line="16" code="50018">No DocBlock was found for property $QUOTE_CHARACTER</error>
      <error line="17" code="50018">No DocBlock was found for property $DEFAULT_PORT</error>
      <error line="19" code="50018">No DocBlock was found for property $dsn_params</error>
      <error line="21" code="50010">No DocBlock was found for method __construct()</error>
      <error line="31" code="50010">No DocBlock was found for method supports_sequences()</error>
      <error line="33" code="50010">No DocBlock was found for method get_next_sequence_value()</error>
      <error line="38" code="50010">No DocBlock was found for method next_sequence_value()</error>
      <error line="43" code="50010">No DocBlock was found for method date_to_string()</error>
      <error line="48" code="50010">No DocBlock was found for method datetime_to_string()</error>
      <error line="54" code="50010">No DocBlock was found for method string_to_datetime()</error>
      <error line="59" code="50010">No DocBlock was found for method limit()</error>
      <error line="68" code="50010">No DocBlock was found for method query_column_info()</error>
      <error line="85" code="50010">No DocBlock was found for method query_for_tables()</error>
      <error line="90" code="50010">No DocBlock was found for method create_column()</error>
      <error line="124" code="50010">No DocBlock was found for method set_encoding()</error>
      <error line="129" code="50010">No DocBlock was found for method native_database_types()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/adapters/MysqlAdapter.php" hash="c0f450587fc365647f7cd84de92a2749" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="false" namespace="ActiveRecord" line="12" package="ActiveRecord">
      <extends>\ActiveRecord\Connection</extends>
      <name>MysqlAdapter</name>
      <full_name>\ActiveRecord\MysqlAdapter</full_name>
      <docblock line="7">
        <description>Adapter for MySQL.</description>
        <long-description/>
        <tag line="7" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="14" namespace="ActiveRecord" package="Default">
        <name>$DEFAULT_PORT</name>
        <default>3306</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="16" package="ActiveRecord">
        <name>limit</name>
        <full_name>limit</full_name>
        <argument line="16">
          <name>$sql</name>
          <default/>
          <type/>
        </argument>
        <argument line="16">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
        <argument line="16">
          <name>$limit</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="23" package="ActiveRecord">
        <name>query_column_info</name>
        <full_name>query_column_info</full_name>
        <argument line="23">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="28" package="ActiveRecord">
        <name>query_for_tables</name>
        <full_name>query_for_tables</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="33" package="ActiveRecord">
        <name>create_column</name>
        <full_name>create_column</full_name>
        <argument line="33">
          <name>$column</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="73" package="ActiveRecord">
        <name>set_encoding</name>
        <full_name>set_encoding</full_name>
        <argument line="73">
          <name>$charset</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="79" package="ActiveRecord">
        <name>accepts_limit_and_order_for_update_and_delete</name>
        <full_name>accepts_limit_and_order_for_update_and_delete</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="81" package="ActiveRecord">
        <name>native_database_types</name>
        <full_name>native_database_types</full_name>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/adapters/MysqlAdapter.php</critical>
      <error line="14" code="50018">No DocBlock was found for property $DEFAULT_PORT</error>
      <error line="16" code="50010">No DocBlock was found for method limit()</error>
      <error line="23" code="50010">No DocBlock was found for method query_column_info()</error>
      <error line="28" code="50010">No DocBlock was found for method query_for_tables()</error>
      <error line="33" code="50010">No DocBlock was found for method create_column()</error>
      <error line="73" code="50010">No DocBlock was found for method set_encoding()</error>
      <error line="79" code="50010">No DocBlock was found for method accepts_limit_and_order_for_update_and_delete()</error>
      <error line="81" code="50010">No DocBlock was found for method native_database_types()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Singleton.php" hash="175fdb8999851dd216f4424a850c42c4" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="true" namespace="ActiveRecord" line="15" package="ActiveRecord">
      <extends/>
      <name>Singleton</name>
      <full_name>\ActiveRecord\Singleton</full_name>
      <docblock line="7">
        <description>This implementation of the singleton pattern does not conform to the strong definition
given by the "Gang of Four." The __construct() method has not be privatized so that
a singleton pattern is capable of being achieved; however, multiple instantiations are also
possible.</description>
        <long-description>&lt;p&gt;This allows the user more freedom with this pattern.&lt;/p&gt;</long-description>
        <tag line="7" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="22" namespace="ActiveRecord" package="Default">
        <name>$instances</name>
        <default>array()</default>
        <docblock line="17">
          <description>Array of cached singleton objects.</description>
          <long-description/>
          <tag line="17" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="true" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="29" package="ActiveRecord">
        <name>instance</name>
        <full_name>instance</full_name>
        <docblock line="24">
          <description>Static method for instantiating a singleton object.</description>
          <long-description/>
          <tag line="24" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </method>
      <method final="true" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="44" package="ActiveRecord">
        <name>__clone</name>
        <full_name>__clone</full_name>
        <docblock line="39">
          <description>Singleton objects should not be cloned.</description>
          <long-description/>
          <tag line="39" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="true" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="51" package="ActiveRecord">
        <name>get_called_class</name>
        <full_name>get_called_class</full_name>
        <docblock line="46">
          <description>Similar to a get_called_class() for a child class to invoke.</description>
          <long-description/>
          <tag line="46" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/Singleton.php</critical>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Expressions.php" hash="4f4757f19cd1537b9561b44a8c14bd3a" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="false" namespace="ActiveRecord" line="17" package="ActiveRecord">
      <extends/>
      <name>Expressions</name>
      <full_name>\ActiveRecord\Expressions</full_name>
      <docblock line="7">
        <description>Templating like class for building SQL statements.</description>
        <long-description>&lt;p&gt;Examples:
'name = :name AND author = :author'
'id = IN(:ids)'
'id IN(:subselect)'&lt;/p&gt;</long-description>
        <tag line="7" name="package" description="ActiveRecord"/>
      </docblock>
      <constant namespace="ActiveRecord" line="19" package="ActiveRecord">
        <name>ParameterMarker</name>
        <full_name>ParameterMarker</full_name>
        <value>'?'</value>
      </constant>
      <property final="false" static="false" visibility="private" line="21" namespace="ActiveRecord" package="Default">
        <name>$expressions</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="22" namespace="ActiveRecord" package="Default">
        <name>$values</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="23" namespace="ActiveRecord" package="Default">
        <name>$connection</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="25" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="25">
          <name>$connection</name>
          <default/>
          <type/>
        </argument>
        <argument line="25">
          <name>$expressions</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="50" package="ActiveRecord">
        <name>bind</name>
        <full_name>bind</full_name>
        <docblock line="46">
          <description>Bind a value to the specific one based index.</description>
          <long-description>&lt;p&gt;There must be a bind marker
for each value bound or to_s() will throw an exception.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="50">
          <name>$parameter_number</name>
          <default/>
          <type/>
        </argument>
        <argument line="50">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="58" package="ActiveRecord">
        <name>bind_values</name>
        <full_name>bind_values</full_name>
        <argument line="58">
          <name>$values</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="66" package="ActiveRecord">
        <name>values</name>
        <full_name>values</full_name>
        <docblock line="63">
          <description>Returns all the values currently bound.</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="74" package="ActiveRecord">
        <name>get_connection</name>
        <full_name>get_connection</full_name>
        <docblock line="71">
          <description>Returns the connection object.</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="85" package="ActiveRecord">
        <name>set_connection</name>
        <full_name>set_connection</full_name>
        <docblock line="79">
          <description>Sets the connection object.</description>
          <long-description>&lt;p&gt;It is highly recommended to set this so we can
use the adapter's native escaping mechanism.&lt;/p&gt;</long-description>
          <tag line="79" name="param" description="a Connection instance" type="string" variable="$connection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$connection</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="90" package="ActiveRecord">
        <name>to_s</name>
        <full_name>to_s</full_name>
        <argument line="90">
          <name>$substitute</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="90">
          <name>$options</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="124" package="ActiveRecord">
        <name>build_sql_from_hash</name>
        <full_name>build_sql_from_hash</full_name>
        <argument line="124">
          <name>$hash</name>
          <default/>
          <type/>
        </argument>
        <argument line="124">
          <name>$glue</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="145" package="ActiveRecord">
        <name>substitute</name>
        <full_name>substitute</full_name>
        <argument line="145">
          <name>$values</name>
          <default/>
          <type/>
        </argument>
        <argument line="145">
          <name>$substitute</name>
          <default/>
          <type/>
        </argument>
        <argument line="145">
          <name>$pos</name>
          <default/>
          <type/>
        </argument>
        <argument line="145">
          <name>$parameter_index</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="169" package="ActiveRecord">
        <name>stringify_value</name>
        <full_name>stringify_value</full_name>
        <argument line="169">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="177" package="ActiveRecord">
        <name>quote_string</name>
        <full_name>quote_string</full_name>
        <argument line="177">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/Expressions.php</critical>
      <error line="21" code="50018">No DocBlock was found for property $expressions</error>
      <error line="22" code="50018">No DocBlock was found for property $values</error>
      <error line="23" code="50018">No DocBlock was found for property $connection</error>
      <error line="25" code="50010">No DocBlock was found for method __construct()</error>
      <error line="46" code="50015">Argument $parameter_number is missing from the Docblock of bind()</error>
      <error line="46" code="50015">Argument $value is missing from the Docblock of bind()</error>
      <error line="58" code="50010">No DocBlock was found for method bind_values()</error>
      <error line="90" code="50010">No DocBlock was found for method to_s()</error>
      <error line="124" code="50010">No DocBlock was found for method build_sql_from_hash()</error>
      <error line="145" code="50010">No DocBlock was found for method substitute()</error>
      <error line="169" code="50010">No DocBlock was found for method stringify_value()</error>
      <error line="177" code="50010">No DocBlock was found for method quote_string()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Relationship.php" hash="3938c4564c3d563bbdce9f50189f92ec" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <interface namespace="ActiveRecord" line="12" package="ActiveRecord">
      <name>InterfaceRelationship</name>
      <full_name>\ActiveRecord\InterfaceRelationship</full_name>
      <docblock line="7">
        <description>Interface for a table relationship.</description>
        <long-description/>
        <tag line="7" name="package" description="ActiveRecord"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="14" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="14">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="15" package="ActiveRecord">
        <name>build_association</name>
        <full_name>build_association</full_name>
        <argument line="15">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
        <argument line="15">
          <name>$attributes</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="16" package="ActiveRecord">
        <name>create_association</name>
        <full_name>create_association</full_name>
        <argument line="16">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
        <argument line="16">
          <name>$attributes</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
    </interface>
    <class final="false" abstract="true" namespace="ActiveRecord" line="25" package="ActiveRecord">
      <extends/>
      <implements>\ActiveRecord\InterfaceRelationship</implements>
      <name>AbstractRelationship</name>
      <full_name>\ActiveRecord\AbstractRelationship</full_name>
      <docblock line="19">
        <description>Abstract class that all relationships must extend from.</description>
        <long-description/>
        <tag line="19" name="package" description="ActiveRecord"/>
        <tag line="19" name="see" description="\ActiveRecord\http://www.phpactiverecord.org/guides/associations" refers="\ActiveRecord\http://www.phpactiverecord.org/guides/associations"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="32" namespace="ActiveRecord" package="Default">
        <name>$attribute_name</name>
        <default/>
        <docblock line="27">
          <description>Name to be used that will trigger call to the relationship.</description>
          <long-description/>
          <tag line="27" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="39" namespace="ActiveRecord" package="Default">
        <name>$class_name</name>
        <default/>
        <docblock line="34">
          <description>Class name of the associated model.</description>
          <long-description/>
          <tag line="34" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="46" namespace="ActiveRecord" package="Default">
        <name>$foreign_key</name>
        <default>array()</default>
        <docblock line="41">
          <description>Name of the foreign key.</description>
          <long-description/>
          <tag line="41" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="53" namespace="ActiveRecord" package="Default">
        <name>$options</name>
        <default>array()</default>
        <docblock line="48">
          <description>Options of the relationship.</description>
          <long-description/>
          <tag line="48" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" namespace="ActiveRecord" package="Default">
        <name>$poly_relationship</name>
        <default>false</default>
        <docblock line="55">
          <description>Is the relationship single or multi.</description>
          <long-description/>
          <tag line="55" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="67" namespace="ActiveRecord" package="Default">
        <name>$valid_association_options</name>
        <default>array('class_name', 'class', 'foreign_key', 'conditions', 'select', 'readonly', 'namespace')</default>
        <docblock line="62">
          <description>List of valid options for relationships.</description>
          <long-description/>
          <tag line="62" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="75" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="69">
          <description>Constructs a relationship.</description>
          <long-description/>
          <tag line="69" name="param" description="Options for the relationship (see {@link valid_association_options})" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="69" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="99" package="ActiveRecord">
        <name>get_table</name>
        <full_name>get_table</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="109" package="ActiveRecord">
        <name>is_poly</name>
        <full_name>is_poly</full_name>
        <docblock line="104">
          <description>What is this relationship's cardinality?</description>
          <long-description/>
          <tag line="104" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="129" package="ActiveRecord">
        <name>query_and_attach_related_models_eagerly</name>
        <full_name>query_and_attach_related_models_eagerly</full_name>
        <docblock line="114">
          <description>Eagerly loads relationships for $models.</description>
          <long-description>&lt;p&gt;This method takes an array of models, collects PK or FK (whichever is needed for relationship), then queries
the related table by PK/FK and attaches the array of returned relationships to the appropriately named relationship on
$models.&lt;/p&gt;</long-description>
          <tag line="114" name="param" description="" type="\ActiveRecord\Table" variable="$table">
            <type by_reference="false">\ActiveRecord\Table</type>
          </tag>
          <tag line="114" name="param" description="array of model objects" type="\ActiveRecord\" variable="$models"/>
          <tag line="114" name="param" description="array of attributes from $models" type="\ActiveRecord\" variable="$attributes"/>
          <tag line="114" name="param" description="array of eager load directives" type="\ActiveRecord\" variable="$includes"/>
          <tag line="114" name="param" description="-&gt; key(s) to be queried for on included/related table" type="\ActiveRecord\" variable="$query_keys"/>
          <tag line="114" name="param" description="-&gt; key(s)/value(s) to be used in query from model which is including" type="\ActiveRecord\" variable="$model_values_keys"/>
          <tag line="114" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$table</name>
          <default/>
          <type>\ActiveRecord\Table</type>
        </argument>
        <argument line="129">
          <name>$models</name>
          <default/>
          <type/>
        </argument>
        <argument line="129">
          <name>$attributes</name>
          <default/>
          <type/>
        </argument>
        <argument line="129">
          <name>$includes</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="129">
          <name>$query_keys</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="129">
          <name>$model_values_keys</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="220" package="ActiveRecord">
        <name>build_association</name>
        <full_name>build_association</full_name>
        <docblock line="213">
          <description>Creates a new instance of specified {@link Model} with the attributes pre-loaded.</description>
          <long-description/>
          <tag line="213" name="param" description="The model which holds this association" type="\ActiveRecord\Model" variable="$model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
          <tag line="213" name="param" description="Hash containing attributes to initialize the model with" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="213" name="return" description="" type="\ActiveRecord\Model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
        </docblock>
        <argument line="220">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
        <argument line="220">
          <name>$attributes</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="233" package="ActiveRecord">
        <name>create_association</name>
        <full_name>create_association</full_name>
        <docblock line="226">
          <description>Creates a new instance of {@link Model} and invokes save.</description>
          <long-description/>
          <tag line="226" name="param" description="The model which holds this association" type="\ActiveRecord\Model" variable="$model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
          <tag line="226" name="param" description="Hash containing attributes to initialize the model with" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="226" name="return" description="" type="\ActiveRecord\Model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
        </docblock>
        <argument line="233">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
        <argument line="233">
          <name>$attributes</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="240" package="ActiveRecord">
        <name>append_record_to_associate</name>
        <full_name>append_record_to_associate</full_name>
        <argument line="240">
          <name>$associate</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
        <argument line="240">
          <name>$record</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="252" package="ActiveRecord">
        <name>merge_association_options</name>
        <full_name>merge_association_options</full_name>
        <argument line="252">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="263" package="ActiveRecord">
        <name>unset_non_finder_options</name>
        <full_name>unset_non_finder_options</full_name>
        <argument line="263">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="281" package="ActiveRecord">
        <name>set_inferred_class_name</name>
        <full_name>set_inferred_class_name</full_name>
        <docblock line="273">
          <description>Infers the $this-&gt;class_name based on $this-&gt;attribute_name.</description>
          <long-description>&lt;p&gt;Will try to guess the appropriate class by singularizing and uppercasing $this-&gt;attribute_name.&lt;/p&gt;</long-description>
          <tag line="273" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="273" name="see" description="\ActiveRecord\attribute_name" refers="\ActiveRecord\attribute_name"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="287" package="ActiveRecord">
        <name>set_class_name</name>
        <full_name>set_class_name</full_name>
        <argument line="287">
          <name>$class_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="301" package="ActiveRecord">
        <name>create_conditions_from_keys</name>
        <full_name>create_conditions_from_keys</full_name>
        <argument line="301">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
        <argument line="301">
          <name>$condition_keys</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="301">
          <name>$value_keys</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="329" package="ActiveRecord">
        <name>construct_inner_join_sql</name>
        <full_name>construct_inner_join_sql</full_name>
        <docblock line="321">
          <description>Creates INNER JOIN SQL for associations.</description>
          <long-description/>
          <tag line="321" name="param" description="the table used for the FROM SQL statement" type="\ActiveRecord\Table" variable="$from_table">
            <type by_reference="false">\ActiveRecord\Table</type>
          </tag>
          <tag line="321" name="param" description="is this a THROUGH relationship?" type="bool" variable="$using_through">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="321" name="param" description="a table alias for when a table is being joined twice" type="string" variable="$alias">
            <type by_reference="false">string</type>
          </tag>
          <tag line="321" name="return" description="SQL INNER JOIN fragment" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="329">
          <name>$from_table</name>
          <default/>
          <type>\ActiveRecord\Table</type>
        </argument>
        <argument line="329">
          <name>$using_through</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="329">
          <name>$alias</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ActiveRecord" line="382" package="ActiveRecord">
        <name>load</name>
        <full_name>load</full_name>
        <docblock line="377">
          <description>This will load the related model data.</description>
          <long-description/>
          <tag line="377" name="param" description="The model this relationship belongs to" type="\ActiveRecord\Model" variable="$model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
        </docblock>
        <argument line="382">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="427" package="ActiveRecord">
      <extends>\ActiveRecord\AbstractRelationship</extends>
      <name>HasMany</name>
      <full_name>\ActiveRecord\HasMany</full_name>
      <docblock line="385">
        <description>One-to-many relationship.</description>
        <long-description>&lt;pre&gt;&lt;code&gt;# Table: people
# Primary key: id
# Foreign key: school_id
class Person extends ActiveRecord\Model {}

# Table: schools
# Primary key: id
class School extends ActiveRecord\Model {
  static $has_many = array(
    array('people')
  );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example using options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Payment extends ActiveRecord\Model {
  static $belongs_to = array(
    array('person'),
    array('order')
  );
}

class Order extends ActiveRecord\Model {
  static $has_many = array(
    array('people',
          'through'    =&gt; 'payments',
          'select'     =&gt; 'people.*, payments.amount',
          'conditions' =&gt; 'payments.amount &lt; 200')
    );
}
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="385" name="package" description="ActiveRecord"/>
        <tag line="385" name="see" description="\ActiveRecord\http://www.phpactiverecord.org/guides/associations" refers="\ActiveRecord\http://www.phpactiverecord.org/guides/associations"/>
        <tag line="385" name="see" description="\ActiveRecord\valid_association_options" refers="\ActiveRecord\valid_association_options"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="442" namespace="ActiveRecord" package="Default">
        <name>$valid_association_options</name>
        <default>array('primary_key', 'order', 'group', 'having', 'limit', 'offset', 'through', 'source')</default>
        <docblock line="429">
          <description>Valid options to use for a {@link HasMany} relationship.</description>
          <long-description>&lt;ul&gt;
&lt;li&gt;&lt;b&gt;limit/offset:&lt;/b&gt; limit the number of records&lt;/li&gt;
&lt;li&gt;&lt;b&gt;primary_key:&lt;/b&gt; name of the primary_key of the association (defaults to "id")&lt;/li&gt;
&lt;li&gt;&lt;b&gt;group:&lt;/b&gt; GROUP BY clause&lt;/li&gt;
&lt;li&gt;&lt;b&gt;order:&lt;/b&gt; ORDER BY clause&lt;/li&gt;
&lt;li&gt;&lt;b&gt;through:&lt;/b&gt; name of a model&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="429" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="444" namespace="ActiveRecord" package="Default">
        <name>$primary_key</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="446" namespace="ActiveRecord" package="Default">
        <name>$has_one</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="447" namespace="ActiveRecord" package="Default">
        <name>$through</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="455" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="449">
          <description>Constructs a {@link HasMany} relationship.</description>
          <long-description/>
          <tag line="449" name="param" description="Options for the association" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="449" name="return" description="" type="\ActiveRecord\HasMany">
            <type by_reference="false">\ActiveRecord\HasMany</type>
          </tag>
        </docblock>
        <argument line="455">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="474" package="ActiveRecord">
        <name>set_keys</name>
        <full_name>set_keys</full_name>
        <argument line="474">
          <name>$model_class_name</name>
          <default/>
          <type/>
        </argument>
        <argument line="474">
          <name>$override</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="484" package="ActiveRecord">
        <name>load</name>
        <full_name>load</full_name>
        <argument line="484">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="530" package="ActiveRecord">
        <name>inject_foreign_key_for_new_association</name>
        <full_name>inject_foreign_key_for_new_association</full_name>
        <argument line="530">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
        <argument line="530">
          <name>$attributes</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="541" package="ActiveRecord">
        <name>build_association</name>
        <full_name>build_association</full_name>
        <argument line="541">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
        <argument line="541">
          <name>$attributes</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="547" package="ActiveRecord">
        <name>create_association</name>
        <full_name>create_association</full_name>
        <argument line="547">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
        <argument line="547">
          <name>$attributes</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="553" package="ActiveRecord">
        <name>load_eagerly</name>
        <full_name>load_eagerly</full_name>
        <argument line="553">
          <name>$models</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="553">
          <name>$attributes</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="553">
          <name>$includes</name>
          <default/>
          <type/>
        </argument>
        <argument line="553">
          <name>$table</name>
          <default/>
          <type>\ActiveRecord\Table</type>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="578" package="ActiveRecord">
      <extends>\ActiveRecord\HasMany</extends>
      <name>HasOne</name>
      <full_name>\ActiveRecord\HasOne</full_name>
      <docblock line="560">
        <description>One-to-one relationship.</description>
        <long-description>&lt;pre&gt;&lt;code&gt;# Table name: states
# Primary key: id
class State extends ActiveRecord\Model {}

# Table name: people
# Foreign key: state_id
class Person extends ActiveRecord\Model {
  static $has_one = array(array('state'));
}
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="560" name="package" description="ActiveRecord"/>
        <tag line="560" name="see" description="\ActiveRecord\http://www.phpactiverecord.org/guides/associations" refers="\ActiveRecord\http://www.phpactiverecord.org/guides/associations"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="587" package="ActiveRecord">
      <extends>\ActiveRecord\AbstractRelationship</extends>
      <name>HasAndBelongsToMany</name>
      <full_name>\ActiveRecord\HasAndBelongsToMany</full_name>
      <docblock line="582">
        <description/>
        <long-description/>
        <tag line="582" name="todo" description="implement me"/>
        <tag line="582" name="package" description="ActiveRecord"/>
        <tag line="582" name="see" description="\ActiveRecord\http://www.phpactiverecord.org/guides/associations" refers="\ActiveRecord\http://www.phpactiverecord.org/guides/associations"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="589" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="589">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="600" package="ActiveRecord">
        <name>load</name>
        <full_name>load</full_name>
        <argument line="600">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="635" package="ActiveRecord">
      <extends>\ActiveRecord\AbstractRelationship</extends>
      <name>BelongsTo</name>
      <full_name>\ActiveRecord\BelongsTo</full_name>
      <docblock line="606">
        <description>Belongs to relationship.</description>
        <long-description>&lt;pre&gt;&lt;code&gt;class School extends ActiveRecord\Model {}

class Person extends ActiveRecord\Model {
  static $belongs_to = array(
    array('school')
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example using options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class School extends ActiveRecord\Model {}

class Person extends ActiveRecord\Model {
  static $belongs_to = array(
    array('school', 'primary_key' =&gt; 'school_id')
  );
}
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="606" name="package" description="ActiveRecord"/>
        <tag line="606" name="see" description="\ActiveRecord\valid_association_options" refers="\ActiveRecord\valid_association_options"/>
        <tag line="606" name="see" description="\ActiveRecord\http://www.phpactiverecord.org/guides/associations" refers="\ActiveRecord\http://www.phpactiverecord.org/guides/associations"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="637" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="637">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="649" package="ActiveRecord">
        <name>__get</name>
        <full_name>__get</full_name>
        <argument line="649">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="658" package="ActiveRecord">
        <name>load</name>
        <full_name>load</full_name>
        <argument line="658">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="675" package="ActiveRecord">
        <name>load_eagerly</name>
        <full_name>load_eagerly</full_name>
        <argument line="675">
          <name>$models</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="675">
          <name>$attributes</name>
          <default/>
          <type/>
        </argument>
        <argument line="675">
          <name>$includes</name>
          <default/>
          <type/>
        </argument>
        <argument line="675">
          <name>$table</name>
          <default/>
          <type>\ActiveRecord\Table</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/Relationship.php</critical>
      <error line="14" code="50010">No DocBlock was found for method __construct()</error>
      <error line="15" code="50010">No DocBlock was found for method build_association()</error>
      <error line="16" code="50010">No DocBlock was found for method create_association()</error>
      <error line="99" code="50010">No DocBlock was found for method get_table()</error>
      <error line="240" code="50010">No DocBlock was found for method append_record_to_associate()</error>
      <error line="252" code="50010">No DocBlock was found for method merge_association_options()</error>
      <error line="263" code="50010">No DocBlock was found for method unset_non_finder_options()</error>
      <error line="287" code="50010">No DocBlock was found for method set_class_name()</error>
      <error line="301" code="50010">No DocBlock was found for method create_conditions_from_keys()</error>
      <error line="444" code="50018">No DocBlock was found for property $primary_key</error>
      <error line="446" code="50018">No DocBlock was found for property $has_one</error>
      <error line="447" code="50018">No DocBlock was found for property $through</error>
      <error line="474" code="50010">No DocBlock was found for method set_keys()</error>
      <error line="484" code="50010">No DocBlock was found for method load()</error>
      <error line="530" code="50010">No DocBlock was found for method inject_foreign_key_for_new_association()</error>
      <error line="541" code="50010">No DocBlock was found for method build_association()</error>
      <error line="547" code="50010">No DocBlock was found for method create_association()</error>
      <error line="553" code="50010">No DocBlock was found for method load_eagerly()</error>
      <critical line="582" code="50005">No short description for class \ActiveRecord\HasAndBelongsToMany</critical>
      <error line="589" code="50010">No DocBlock was found for method __construct()</error>
      <error line="600" code="50010">No DocBlock was found for method load()</error>
      <error line="637" code="50010">No DocBlock was found for method __construct()</error>
      <error line="649" code="50010">No DocBlock was found for method __get()</error>
      <error line="658" code="50010">No DocBlock was found for method load()</error>
      <error line="675" code="50010">No DocBlock was found for method load_eagerly()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Table.php" hash="4402c088615e3b4492cfd226d387cec9" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <include line="459" type="Require Once" package="Default">
      <name>Relationship.php</name>
    </include>
    <class final="false" abstract="false" namespace="ActiveRecord" line="16" package="ActiveRecord">
      <extends/>
      <name>Table</name>
      <full_name>\ActiveRecord\Table</full_name>
      <docblock line="7">
        <description>Manages reading and writing to a database table.</description>
        <long-description>&lt;p&gt;This class manages a database table and is used by the Model class for
reading and writing to its database table. There is one instance of Table
for every table you have a model for.&lt;/p&gt;</long-description>
        <tag line="7" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="18" namespace="ActiveRecord" package="Default">
        <name>$cache</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="public" line="20" namespace="ActiveRecord" package="Default">
        <name>$class</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="public" line="21" namespace="ActiveRecord" package="Default">
        <name>$conn</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="public" line="22" namespace="ActiveRecord" package="Default">
        <name>$pk</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="public" line="23" namespace="ActiveRecord" package="Default">
        <name>$last_sql</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="public" line="26" namespace="ActiveRecord" package="Default">
        <name>$columns</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="public" line="31" namespace="ActiveRecord" package="Default">
        <name>$table</name>
        <default/>
        <docblock line="28">
          <description>Name of the table.</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" namespace="ActiveRecord" package="Default">
        <name>$db_name</name>
        <default/>
        <docblock line="33">
          <description>Name of the database (optional)</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="41" namespace="ActiveRecord" package="Default">
        <name>$sequence</name>
        <default/>
        <docblock line="38">
          <description>Name of the sequence for this table (optional).</description>
          <long-description>&lt;p&gt;Defaults to {$table}_seq&lt;/p&gt;</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="48" namespace="ActiveRecord" package="Default">
        <name>$callback</name>
        <default/>
        <docblock line="43">
          <description>A instance of CallBack for this model/table</description>
          <long-description/>
          <tag line="43" name="static" description=""/>
          <tag line="43" name="var" description="ActiveRecord\CallBack" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="53" namespace="ActiveRecord" package="Default">
        <name>$relationships</name>
        <default>array()</default>
        <docblock line="50">
          <description>List of relationships for this table.</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="55" package="ActiveRecord">
        <name>load</name>
        <full_name>load</full_name>
        <argument line="55">
          <name>$model_class_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="68" package="ActiveRecord">
        <name>clear_cache</name>
        <full_name>clear_cache</full_name>
        <argument line="68">
          <name>$model_class_name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="76" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="76">
          <name>$class_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="93" package="ActiveRecord">
        <name>reestablish_connection</name>
        <full_name>reestablish_connection</full_name>
        <argument line="93">
          <name>$close</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="106" package="ActiveRecord">
        <name>create_joins</name>
        <full_name>create_joins</full_name>
        <argument line="106">
          <name>$joins</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="150" package="ActiveRecord">
        <name>options_to_sql</name>
        <full_name>options_to_sql</full_name>
        <argument line="150">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="203" package="ActiveRecord">
        <name>find</name>
        <full_name>find</full_name>
        <argument line="203">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="212" package="ActiveRecord">
        <name>find_by_sql</name>
        <full_name>find_by_sql</full_name>
        <argument line="212">
          <name>$sql</name>
          <default/>
          <type/>
        </argument>
        <argument line="212">
          <name>$values</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="212">
          <name>$readonly</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="212">
          <name>$includes</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="247" package="ActiveRecord">
        <name>execute_eager_load</name>
        <full_name>execute_eager_load</full_name>
        <docblock line="239">
          <description>Executes an eager load of a given named relationship for this table.</description>
          <long-description/>
          <tag line="239" name="param" description="array found modesl for this table" type="\ActiveRecord\" variable="$models"/>
          <tag line="239" name="param" description="array of attrs from $models" type="\ActiveRecord\" variable="$attrs"/>
          <tag line="239" name="param" description="array eager load directives" type="\ActiveRecord\" variable="$includes"/>
          <tag line="239" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="247">
          <name>$models</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="247">
          <name>$attrs</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="247">
          <name>$includes</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="268" package="ActiveRecord">
        <name>get_column_by_inflected_name</name>
        <full_name>get_column_by_inflected_name</full_name>
        <argument line="268">
          <name>$inflected_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="278" package="ActiveRecord">
        <name>get_fully_qualified_table_name</name>
        <full_name>get_fully_qualified_table_name</full_name>
        <argument line="278">
          <name>$quote_name</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="297" package="ActiveRecord">
        <name>get_relationship</name>
        <full_name>get_relationship</full_name>
        <docblock line="288">
          <description>Retrieve a relationship object for this table.</description>
          <long-description>&lt;p&gt;Strict as true will throw an error
if the relationship name does not exist.&lt;/p&gt;</long-description>
          <tag line="288" name="param" description="string name of Relationship" type="\ActiveRecord\" variable="$name"/>
          <tag line="288" name="param" description="bool" type="\ActiveRecord\" variable="$strict"/>
          <tag line="288" name="throws" description="" type="\ActiveRecord\RelationshipException">
            <type by_reference="false">\ActiveRecord\RelationshipException</type>
          </tag>
          <tag line="288" name="return" description="or null" type="\ActiveRecord\Relationship">
            <type by_reference="false">\ActiveRecord\Relationship</type>
          </tag>
        </docblock>
        <argument line="297">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="297">
          <name>$strict</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="314" package="ActiveRecord">
        <name>has_relationship</name>
        <full_name>has_relationship</full_name>
        <docblock line="308">
          <description>Does a given relationship exist?</description>
          <long-description/>
          <tag line="308" name="param" description="string name of Relationship" type="\ActiveRecord\" variable="$name"/>
          <tag line="308" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="314">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="319" package="ActiveRecord">
        <name>insert</name>
        <full_name>insert</full_name>
        <argument line="319">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="319">
          <name>$pk</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="319">
          <name>$sequence_name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="330" package="ActiveRecord">
        <name>update</name>
        <full_name>update</full_name>
        <argument line="330">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="330">
          <name>$where</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="341" package="ActiveRecord">
        <name>delete</name>
        <full_name>delete</full_name>
        <argument line="341">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="357" package="ActiveRecord">
        <name>add_relationship</name>
        <full_name>add_relationship</full_name>
        <docblock line="352">
          <description>Add a relationship.</description>
          <long-description/>
          <tag line="352" name="param" description="a Relationship object" type="\ActiveRecord\Relationship" variable="$relationship">
            <type by_reference="false">\ActiveRecord\Relationship</type>
          </tag>
        </docblock>
        <argument line="357">
          <name>$relationship</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="362" package="ActiveRecord">
        <name>get_meta_data</name>
        <full_name>get_meta_data</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="380" package="ActiveRecord">
        <name>map_names</name>
        <full_name>map_names</full_name>
        <docblock line="373">
          <description>Replaces any aliases used in a hash based condition.</description>
          <long-description/>
          <tag line="373" name="param" description="array A hash" type="\ActiveRecord\" variable="$hash"/>
          <tag line="373" name="param" description="array Hash of used_name =&gt; real_name" type="\ActiveRecord\" variable="$map"/>
          <tag line="373" name="return" description="Array with any aliases replaced with their read field name" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="380">
          <name>$hash</name>
          <default/>
          <type/>
        </argument>
        <argument line="380">
          <name>$map</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="394" package="ActiveRecord">
        <name>process_data</name>
        <full_name>process_data</full_name>
        <argument line="394">
          <name>$hash</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="414" package="ActiveRecord">
        <name>set_primary_key</name>
        <full_name>set_primary_key</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="430" package="ActiveRecord">
        <name>set_table_name</name>
        <full_name>set_table_name</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="448" package="ActiveRecord">
        <name>set_sequence_name</name>
        <full_name>set_sequence_name</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="457" package="ActiveRecord">
        <name>set_associations</name>
        <full_name>set_associations</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="505" package="ActiveRecord">
        <name>set_delegates</name>
        <full_name>set_delegates</full_name>
        <docblock line="497">
          <description>Rebuild the delegates array into format that we can more easily work with in Model.</description>
          <long-description>&lt;p&gt;Will end up consisting of array of:&lt;/p&gt;

&lt;p&gt;array('delegate' =&gt; array('field1','field2',...),
      'to'       =&gt; 'delegate_to_relationship',
      'prefix'  =&gt; 'prefix')&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="545" package="ActiveRecord">
        <name>set_setters_and_getters</name>
        <full_name>set_setters_and_getters</full_name>
        <docblock line="542">
          <description/>
          <long-description/>
          <tag line="542" name="deprecated" description="Model.php now checks for get|set_ methods via method_exists so there is no need for declaring static g|setters."/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/Table.php</critical>
      <error line="18" code="50018">No DocBlock was found for property $cache</error>
      <error line="20" code="50018">No DocBlock was found for property $class</error>
      <error line="21" code="50018">No DocBlock was found for property $conn</error>
      <error line="22" code="50018">No DocBlock was found for property $pk</error>
      <error line="23" code="50018">No DocBlock was found for property $last_sql</error>
      <error line="26" code="50018">No DocBlock was found for property $columns</error>
      <error line="55" code="50010">No DocBlock was found for method load()</error>
      <error line="68" code="50010">No DocBlock was found for method clear_cache()</error>
      <error line="76" code="50010">No DocBlock was found for method __construct()</error>
      <error line="93" code="50010">No DocBlock was found for method reestablish_connection()</error>
      <error line="106" code="50010">No DocBlock was found for method create_joins()</error>
      <error line="150" code="50010">No DocBlock was found for method options_to_sql()</error>
      <error line="203" code="50010">No DocBlock was found for method find()</error>
      <error line="212" code="50010">No DocBlock was found for method find_by_sql()</error>
      <error line="268" code="50010">No DocBlock was found for method get_column_by_inflected_name()</error>
      <error line="278" code="50010">No DocBlock was found for method get_fully_qualified_table_name()</error>
      <error line="319" code="50010">No DocBlock was found for method insert()</error>
      <error line="330" code="50010">No DocBlock was found for method update()</error>
      <error line="341" code="50010">No DocBlock was found for method delete()</error>
      <error line="362" code="50010">No DocBlock was found for method get_meta_data()</error>
      <error line="394" code="50010">No DocBlock was found for method process_data()</error>
      <error line="414" code="50010">No DocBlock was found for method set_primary_key()</error>
      <error line="430" code="50010">No DocBlock was found for method set_table_name()</error>
      <error line="448" code="50010">No DocBlock was found for method set_sequence_name()</error>
      <error line="457" code="50010">No DocBlock was found for method set_associations()</error>
      <error line="542" code="50012">No short description for method set_setters_and_getters()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Inflector.php" hash="4556e2ae051bbc246e79d45ed5a88493" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="true" namespace="ActiveRecord" line="10" package="ActiveRecord">
      <extends/>
      <name>Inflector</name>
      <full_name>\ActiveRecord\Inflector</full_name>
      <docblock line="7">
        <description/>
        <long-description/>
        <tag line="7" name="package" description="ActiveRecord"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="17" package="ActiveRecord">
        <name>instance</name>
        <full_name>instance</full_name>
        <docblock line="12">
          <description>Get an instance of the {@link Inflector} class.</description>
          <long-description/>
          <tag line="12" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="28" package="ActiveRecord">
        <name>camelize</name>
        <full_name>camelize</full_name>
        <docblock line="22">
          <description>Turn a string into its camelized version.</description>
          <long-description/>
          <tag line="22" name="param" description="string to convert" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="57" package="ActiveRecord">
        <name>is_upper</name>
        <full_name>is_upper</full_name>
        <docblock line="51">
          <description>Determines if a string contains all uppercase characters.</description>
          <long-description/>
          <tag line="51" name="param" description="string to check" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="68" package="ActiveRecord">
        <name>is_lower</name>
        <full_name>is_lower</full_name>
        <docblock line="62">
          <description>Determines if a string contains all lowercase characters.</description>
          <long-description/>
          <tag line="62" name="param" description="string to check" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="79" package="ActiveRecord">
        <name>uncamelize</name>
        <full_name>uncamelize</full_name>
        <docblock line="73">
          <description>Convert a camelized string to a lowercase, underscored string.</description>
          <long-description/>
          <tag line="73" name="param" description="string to convert" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="99" package="ActiveRecord">
        <name>underscorify</name>
        <full_name>underscorify</full_name>
        <docblock line="93">
          <description>Convert a string with space into a underscored equivalent.</description>
          <long-description/>
          <tag line="93" name="param" description="string to convert" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
          <tag line="93" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="104" package="ActiveRecord">
        <name>keyify</name>
        <full_name>keyify</full_name>
        <argument line="104">
          <name>$class_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ActiveRecord" line="109" package="ActiveRecord">
        <name>variablize</name>
        <full_name>variablize</full_name>
        <argument line="109">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="115" package="ActiveRecord">
      <extends>\ActiveRecord\Inflector</extends>
      <name>StandardInflector</name>
      <full_name>\ActiveRecord\StandardInflector</full_name>
      <docblock line="112">
        <description/>
        <long-description/>
        <tag line="112" name="package" description="ActiveRecord"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="117" package="ActiveRecord">
        <name>tableize</name>
        <full_name>tableize</full_name>
        <argument line="117">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="118" package="ActiveRecord">
        <name>variablize</name>
        <full_name>variablize</full_name>
        <argument line="118">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/Inflector.php</critical>
      <critical line="7" code="50005">No short description for class \ActiveRecord\Inflector</critical>
      <error line="104" code="50010">No DocBlock was found for method keyify()</error>
      <error line="109" code="50010">No DocBlock was found for method variablize()</error>
      <critical line="112" code="50005">No short description for class \ActiveRecord\StandardInflector</critical>
      <error line="117" code="50010">No DocBlock was found for method tableize()</error>
      <error line="118" code="50010">No DocBlock was found for method variablize()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/SQLBuilder.php" hash="d73184cd3c9f23a556c364ac404e6777" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <include line="294" type="Require Once" package="Default">
      <name>Expressions.php</name>
    </include>
    <include line="348" type="Require Once" package="Default">
      <name>Expressions.php</name>
    </include>
    <class final="false" abstract="false" namespace="ActiveRecord" line="12" package="ActiveRecord">
      <extends/>
      <name>SQLBuilder</name>
      <full_name>\ActiveRecord\SQLBuilder</full_name>
      <docblock line="7">
        <description>Helper class for building sql statements progmatically.</description>
        <long-description/>
        <tag line="7" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="14" namespace="ActiveRecord" package="Default">
        <name>$connection</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="15" namespace="ActiveRecord" package="Default">
        <name>$operation</name>
        <default>'SELECT'</default>
      </property>
      <property final="false" static="false" visibility="private" line="16" namespace="ActiveRecord" package="Default">
        <name>$table</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="17" namespace="ActiveRecord" package="Default">
        <name>$select</name>
        <default>'*'</default>
      </property>
      <property final="false" static="false" visibility="private" line="18" namespace="ActiveRecord" package="Default">
        <name>$joins</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="19" namespace="ActiveRecord" package="Default">
        <name>$order</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="20" namespace="ActiveRecord" package="Default">
        <name>$limit</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="21" namespace="ActiveRecord" package="Default">
        <name>$offset</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="22" namespace="ActiveRecord" package="Default">
        <name>$group</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="23" namespace="ActiveRecord" package="Default">
        <name>$having</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="24" namespace="ActiveRecord" package="Default">
        <name>$update</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="27" namespace="ActiveRecord" package="Default">
        <name>$where</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="28" namespace="ActiveRecord" package="Default">
        <name>$where_values</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="31" namespace="ActiveRecord" package="Default">
        <name>$data</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="32" namespace="ActiveRecord" package="Default">
        <name>$sequence</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="42" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="34">
          <description>Constructor.</description>
          <long-description/>
          <tag line="34" name="param" description="A database connection object" type="\ActiveRecord\Connection" variable="$connection">
            <type by_reference="false">\ActiveRecord\Connection</type>
          </tag>
          <tag line="34" name="param" description="Name of a table" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="return" description="" type="\ActiveRecord\SQLBuilder">
            <type by_reference="false">\ActiveRecord\SQLBuilder</type>
          </tag>
          <tag line="34" name="throws" description="if connection was invalid" type="\ActiveRecord\ActiveRecordException">
            <type by_reference="false">\ActiveRecord\ActiveRecordException</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$connection</name>
          <default/>
          <type/>
        </argument>
        <argument line="42">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="56" package="ActiveRecord">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="51">
          <description>Returns the SQL string.</description>
          <long-description/>
          <tag line="51" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="67" package="ActiveRecord">
        <name>to_s</name>
        <full_name>to_s</full_name>
        <docblock line="61">
          <description>Returns the SQL string.</description>
          <long-description/>
          <tag line="61" name="see" description="\ActiveRecord\__toString" refers="\ActiveRecord\__toString"/>
          <tag line="61" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="78" package="ActiveRecord">
        <name>bind_values</name>
        <full_name>bind_values</full_name>
        <docblock line="73">
          <description>Returns the bind values.</description>
          <long-description/>
          <tag line="73" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="91" package="ActiveRecord">
        <name>get_where_values</name>
        <full_name>get_where_values</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="96" package="ActiveRecord">
        <name>where</name>
        <full_name>where</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="102" package="ActiveRecord">
        <name>order</name>
        <full_name>order</full_name>
        <argument line="102">
          <name>$order</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="108" package="ActiveRecord">
        <name>group</name>
        <full_name>group</full_name>
        <argument line="108">
          <name>$group</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="114" package="ActiveRecord">
        <name>having</name>
        <full_name>having</full_name>
        <argument line="114">
          <name>$having</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="120" package="ActiveRecord">
        <name>limit</name>
        <full_name>limit</full_name>
        <argument line="120">
          <name>$limit</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="126" package="ActiveRecord">
        <name>offset</name>
        <full_name>offset</full_name>
        <argument line="126">
          <name>$offset</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="132" package="ActiveRecord">
        <name>select</name>
        <full_name>select</full_name>
        <argument line="132">
          <name>$select</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="139" package="ActiveRecord">
        <name>joins</name>
        <full_name>joins</full_name>
        <argument line="139">
          <name>$joins</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="145" package="ActiveRecord">
        <name>insert</name>
        <full_name>insert</full_name>
        <argument line="145">
          <name>$hash</name>
          <default/>
          <type/>
        </argument>
        <argument line="145">
          <name>$pk</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="145">
          <name>$sequence_name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="159" package="ActiveRecord">
        <name>update</name>
        <full_name>update</full_name>
        <argument line="159">
          <name>$mixed</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="173" package="ActiveRecord">
        <name>delete</name>
        <full_name>delete</full_name>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="183" package="ActiveRecord">
        <name>reverse_order</name>
        <full_name>reverse_order</full_name>
        <docblock line="180">
          <description>Reverses an order clause.</description>
          <long-description/>
        </docblock>
        <argument line="183">
          <name>$order</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="214" package="ActiveRecord">
        <name>create_conditions_from_underscored_string</name>
        <full_name>create_conditions_from_underscored_string</full_name>
        <docblock line="204">
          <description>Converts a string like "id_and_name_or_z" into a conditions value like array("id=? AND name=? OR z=?", values, .</description>
          <long-description>&lt;p&gt;..).&lt;/p&gt;</long-description>
          <tag line="204" name="param" description="" type="\ActiveRecord\Connection" variable="$connection">
            <type by_reference="false">\ActiveRecord\Connection</type>
          </tag>
          <tag line="204" name="param" description="Underscored string" type="\ActiveRecord\" variable="$name"/>
          <tag line="204" name="param" description="Array of values for the field names. This is used&#10;  to determine what kind of bind marker to use: =?, IN(?), IS NULL" type="\ActiveRecord\" variable="$values"/>
          <tag line="204" name="param" description="A hash of &quot;mapped_column_name&quot; =&gt; &quot;real_column_name&quot;" type="\ActiveRecord\" variable="$map"/>
          <tag line="204" name="return" description="conditions array in the form array(sql_string, value1, value2,...)" type="\ActiveRecord\A">
            <type by_reference="false">\ActiveRecord\A</type>
          </tag>
        </docblock>
        <argument line="214">
          <name>$connection</name>
          <default/>
          <type>\ActiveRecord\Connection</type>
        </argument>
        <argument line="214">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="214">
          <name>$values</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="214">
          <name>$map</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="257" package="ActiveRecord">
        <name>create_hash_from_underscored_string</name>
        <full_name>create_hash_from_underscored_string</full_name>
        <docblock line="249">
          <description>Like create_conditions_from_underscored_string but returns a hash of name =&gt; value array instead.</description>
          <long-description/>
          <tag line="249" name="param" description="A string containing attribute names connected with _and_ or _or_" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="249" name="param" description="Array of values for each attribute in $name" type="\ActiveRecord\" variable="$args"/>
          <tag line="249" name="param" description="A hash of &quot;mapped_column_name&quot; =&gt; &quot;real_column_name&quot;" type="\ActiveRecord\" variable="$map"/>
          <tag line="249" name="return" description="A hash of array(name =&gt; value, ...)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="257">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="257">
          <name>$values</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="257">
          <name>$map</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="278" package="ActiveRecord">
        <name>prepend_table_name_to_fields</name>
        <full_name>prepend_table_name_to_fields</full_name>
        <docblock line="271">
          <description>prepends table name to hash of field names to get around ambiguous fields when SQL builder
has joins</description>
          <long-description/>
          <tag line="271" name="param" description="" type="array" variable="$hash">
            <type by_reference="false">array</type>
          </tag>
          <tag line="271" name="return" description="$new" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="278">
          <name>$hash</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="292" package="ActiveRecord">
        <name>apply_where_conditions</name>
        <full_name>apply_where_conditions</full_name>
        <argument line="292">
          <name>$args</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="327" package="ActiveRecord">
        <name>build_delete</name>
        <full_name>build_delete</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="346" package="ActiveRecord">
        <name>build_insert</name>
        <full_name>build_insert</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="364" package="ActiveRecord">
        <name>build_select</name>
        <full_name>build_select</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="389" package="ActiveRecord">
        <name>build_update</name>
        <full_name>build_update</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="413" package="ActiveRecord">
        <name>quoted_key_names</name>
        <full_name>quoted_key_names</full_name>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/SQLBuilder.php</critical>
      <error line="14" code="50018">No DocBlock was found for property $connection</error>
      <error line="15" code="50018">No DocBlock was found for property $operation</error>
      <error line="16" code="50018">No DocBlock was found for property $table</error>
      <error line="17" code="50018">No DocBlock was found for property $select</error>
      <error line="18" code="50018">No DocBlock was found for property $joins</error>
      <error line="19" code="50018">No DocBlock was found for property $order</error>
      <error line="20" code="50018">No DocBlock was found for property $limit</error>
      <error line="21" code="50018">No DocBlock was found for property $offset</error>
      <error line="22" code="50018">No DocBlock was found for property $group</error>
      <error line="23" code="50018">No DocBlock was found for property $having</error>
      <error line="24" code="50018">No DocBlock was found for property $update</error>
      <error line="27" code="50018">No DocBlock was found for property $where</error>
      <error line="28" code="50018">No DocBlock was found for property $where_values</error>
      <error line="31" code="50018">No DocBlock was found for property $data</error>
      <error line="32" code="50018">No DocBlock was found for property $sequence</error>
      <error line="91" code="50010">No DocBlock was found for method get_where_values()</error>
      <error line="96" code="50010">No DocBlock was found for method where()</error>
      <error line="102" code="50010">No DocBlock was found for method order()</error>
      <error line="108" code="50010">No DocBlock was found for method group()</error>
      <error line="114" code="50010">No DocBlock was found for method having()</error>
      <error line="120" code="50010">No DocBlock was found for method limit()</error>
      <error line="126" code="50010">No DocBlock was found for method offset()</error>
      <error line="132" code="50010">No DocBlock was found for method select()</error>
      <error line="139" code="50010">No DocBlock was found for method joins()</error>
      <error line="145" code="50010">No DocBlock was found for method insert()</error>
      <error line="159" code="50010">No DocBlock was found for method update()</error>
      <error line="173" code="50010">No DocBlock was found for method delete()</error>
      <error line="180" code="50015">Argument $order is missing from the Docblock of reverse_order()</error>
      <error line="249" code="50014">Name of argument $values does not match with the DocBlock's name $args in create_hash_from_underscored_string()</error>
      <notice line="249" code="50013">Parameter $args could not be found in create_hash_from_underscored_string()</notice>
      <error line="292" code="50010">No DocBlock was found for method apply_where_conditions()</error>
      <error line="327" code="50010">No DocBlock was found for method build_delete()</error>
      <error line="346" code="50010">No DocBlock was found for method build_insert()</error>
      <error line="364" code="50010">No DocBlock was found for method build_select()</error>
      <error line="389" code="50010">No DocBlock was found for method build_update()</error>
      <error line="413" code="50010">No DocBlock was found for method quoted_key_names()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/DateTime.php" hash="4f39dd3e2ca4cee890bd4ac73fb1e931" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="false" namespace="ActiveRecord" line="36" package="ActiveRecord">
      <extends>\DateTime</extends>
      <name>DateTime</name>
      <full_name>\ActiveRecord\DateTime</full_name>
      <docblock line="7">
        <description>An extension of PHP's DateTime class to provide dirty flagging and easier formatting options.</description>
        <long-description>&lt;p&gt;All date and datetime fields from your database will be created as instances of this class.&lt;/p&gt;

&lt;p&gt;Example of formatting and changing the default format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$now = new ActiveRecord\DateTime('2010-01-02 03:04:05');
ActiveRecord\DateTime::$DEFAULT_FORMAT = 'short';

echo $now-&gt;format();         # 02 Jan 03:04
echo $now-&gt;format('atom');   # 2010-01-02T03:04:05-05:00
echo $now-&gt;format('Y-m-d');  # 2010-01-02

# __toString() uses the default formatter
echo (string)$now;           # 02 Jan 03:04
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also add your own pre-defined friendly formatters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActiveRecord\DateTime::$FORMATS['awesome_format'] = 'H:i:s m/d/Y';
echo $now-&gt;format('awesome_format')  # 03:04:05 01/02/2010
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="7" name="package" description="ActiveRecord"/>
        <tag line="7" name="see" description="\ActiveRecord\http://php.net/manual/en/class.datetime.php" refers="\ActiveRecord\http://php.net/manual/en/class.datetime.php"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="41" namespace="ActiveRecord" package="Default">
        <name>$DEFAULT_FORMAT</name>
        <default>'rfc2822'</default>
        <docblock line="38">
          <description>Default format used for format() and __toString()</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="46" namespace="ActiveRecord" package="Default">
        <name>$FORMATS</name>
        <default>array('db' =&gt; 'Y-m-d H:i:s', 'number' =&gt; 'YmdHis', 'time' =&gt; 'H:i', 'short' =&gt; 'd M H:i', 'long' =&gt; 'F d, Y H:i', 'atom' =&gt; \DateTime::ATOM, 'cookie' =&gt; \DateTime::COOKIE, 'iso8601' =&gt; \DateTime::ISO8601, 'rfc822' =&gt; \DateTime::RFC822, 'rfc850' =&gt; \DateTime::RFC850, 'rfc1036' =&gt; \DateTime::RFC1036, 'rfc1123' =&gt; \DateTime::RFC1123, 'rfc2822' =&gt; \DateTime::RFC2822, 'rfc3339' =&gt; \DateTime::RFC3339, 'rss' =&gt; \DateTime::RSS, 'w3c' =&gt; \DateTime::W3C)</default>
        <docblock line="43">
          <description>Pre-defined format strings.</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="64" namespace="ActiveRecord" package="Default">
        <name>$model</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="65" namespace="ActiveRecord" package="Default">
        <name>$attribute_name</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="67" package="ActiveRecord">
        <name>attribute_of</name>
        <full_name>attribute_of</full_name>
        <argument line="67">
          <name>$model</name>
          <default/>
          <type/>
        </argument>
        <argument line="67">
          <name>$attribute_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="87" package="ActiveRecord">
        <name>format</name>
        <full_name>format</full_name>
        <docblock line="73">
          <description>Formats the DateTime to the specified format.</description>
          <long-description>&lt;pre&gt;&lt;code&gt;$datetime-&gt;format();         # uses the format defined in DateTime::$DEFAULT_FORMAT
$datetime-&gt;format('short');  # d M H:i
$datetime-&gt;format('Y-m-d');  # Y-m-d
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="73" name="see" description="\ActiveRecord\FORMATS" refers="\ActiveRecord\FORMATS"/>
          <tag line="73" name="see" description="\ActiveRecord\get_format" refers="\ActiveRecord\get_format"/>
          <tag line="73" name="param" description="A format string accepted by get_format()" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="return" description="formatted date and time string" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$format</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="102" package="ActiveRecord">
        <name>get_format</name>
        <full_name>get_format</full_name>
        <docblock line="92">
          <description>Returns the format string.</description>
          <long-description>&lt;p&gt;If $format is a pre-defined format in $FORMATS it will return that otherwise
it will assume $format is a format string itself.&lt;/p&gt;</long-description>
          <tag line="92" name="see" description="\ActiveRecord\FORMATS" refers="\ActiveRecord\FORMATS"/>
          <tag line="92" name="param" description="A pre-defined string format or a raw format string" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="92" name="return" description="a format string" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$format</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="116" package="ActiveRecord">
        <name>__toString</name>
        <full_name>__toString</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="121" package="ActiveRecord">
        <name>flag_dirty</name>
        <full_name>flag_dirty</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="127" package="ActiveRecord">
        <name>setDate</name>
        <full_name>setDate</full_name>
        <argument line="127">
          <name>$year</name>
          <default/>
          <type/>
        </argument>
        <argument line="127">
          <name>$month</name>
          <default/>
          <type/>
        </argument>
        <argument line="127">
          <name>$day</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="133" package="ActiveRecord">
        <name>setISODate</name>
        <full_name>setISODate</full_name>
        <argument line="133">
          <name>$year</name>
          <default/>
          <type/>
        </argument>
        <argument line="133">
          <name>$week</name>
          <default/>
          <type/>
        </argument>
        <argument line="133">
          <name>$day</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="139" package="ActiveRecord">
        <name>setTime</name>
        <full_name>setTime</full_name>
        <argument line="139">
          <name>$hour</name>
          <default/>
          <type/>
        </argument>
        <argument line="139">
          <name>$minute</name>
          <default/>
          <type/>
        </argument>
        <argument line="139">
          <name>$second</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="145" package="ActiveRecord">
        <name>setTimestamp</name>
        <full_name>setTimestamp</full_name>
        <argument line="145">
          <name>$unixtimestamp</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/DateTime.php</critical>
      <error line="64" code="50018">No DocBlock was found for property $model</error>
      <error line="65" code="50018">No DocBlock was found for property $attribute_name</error>
      <error line="67" code="50010">No DocBlock was found for method attribute_of()</error>
      <error line="116" code="50010">No DocBlock was found for method __toString()</error>
      <error line="121" code="50010">No DocBlock was found for method flag_dirty()</error>
      <error line="127" code="50010">No DocBlock was found for method setDate()</error>
      <error line="133" code="50010">No DocBlock was found for method setISODate()</error>
      <error line="139" code="50010">No DocBlock was found for method setTime()</error>
      <error line="145" code="50010">No DocBlock was found for method setTimestamp()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Column.php" hash="1b214c7f7c1febc4622017fc1485ebe7" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="false" namespace="ActiveRecord" line="12" package="ActiveRecord">
      <extends/>
      <name>Column</name>
      <full_name>\ActiveRecord\Column</full_name>
      <docblock line="7">
        <description>Class for a table column.</description>
        <long-description/>
        <tag line="7" name="package" description="ActiveRecord"/>
      </docblock>
      <constant namespace="ActiveRecord" line="15" package="ActiveRecord">
        <name>STRING</name>
        <full_name>STRING</full_name>
        <value>1</value>
      </constant>
      <constant namespace="ActiveRecord" line="16" package="ActiveRecord">
        <name>INTEGER</name>
        <full_name>INTEGER</full_name>
        <value>2</value>
      </constant>
      <constant namespace="ActiveRecord" line="17" package="ActiveRecord">
        <name>DECIMAL</name>
        <full_name>DECIMAL</full_name>
        <value>3</value>
      </constant>
      <constant namespace="ActiveRecord" line="18" package="ActiveRecord">
        <name>DATETIME</name>
        <full_name>DATETIME</full_name>
        <value>4</value>
      </constant>
      <constant namespace="ActiveRecord" line="19" package="ActiveRecord">
        <name>DATE</name>
        <full_name>DATE</full_name>
        <value>5</value>
      </constant>
      <constant namespace="ActiveRecord" line="20" package="ActiveRecord">
        <name>TIME</name>
        <full_name>TIME</full_name>
        <value>6</value>
      </constant>
      <property final="false" static="true" visibility="public" line="27" namespace="ActiveRecord" package="Default">
        <name>$TYPE_MAPPING</name>
        <default>array('datetime' =&gt; self::DATETIME, 'timestamp' =&gt; self::DATETIME, 'date' =&gt; self::DATE, 'time' =&gt; self::TIME, 'int' =&gt; self::INTEGER, 'tinyint' =&gt; self::INTEGER, 'smallint' =&gt; self::INTEGER, 'mediumint' =&gt; self::INTEGER, 'bigint' =&gt; self::INTEGER, 'float' =&gt; self::DECIMAL, 'double' =&gt; self::DECIMAL, 'numeric' =&gt; self::DECIMAL, 'decimal' =&gt; self::DECIMAL, 'dec' =&gt; self::DECIMAL)</default>
        <docblock line="22">
          <description>Map a type to an column type.</description>
          <long-description/>
          <tag line="22" name="static" description=""/>
          <tag line="22" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="49" namespace="ActiveRecord" package="Default">
        <name>$name</name>
        <default/>
        <docblock line="45">
          <description>The true name of this column.</description>
          <long-description/>
          <tag line="45" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="55" namespace="ActiveRecord" package="Default">
        <name>$inflected_name</name>
        <default/>
        <docblock line="51">
          <description>The inflected name of this columns .</description>
          <long-description>&lt;p&gt;. hyphens/spaces will be =&gt; _.&lt;/p&gt;</long-description>
          <tag line="51" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="61" namespace="ActiveRecord" package="Default">
        <name>$type</name>
        <default/>
        <docblock line="57">
          <description>The type of this column: STRING, INTEGER, .</description>
          <long-description>&lt;p&gt;..&lt;/p&gt;</long-description>
          <tag line="57" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="67" namespace="ActiveRecord" package="Default">
        <name>$raw_type</name>
        <default/>
        <docblock line="63">
          <description>The raw database specific type.</description>
          <long-description/>
          <tag line="63" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="73" namespace="ActiveRecord" package="Default">
        <name>$length</name>
        <default/>
        <docblock line="69">
          <description>The maximum length of this column.</description>
          <long-description/>
          <tag line="69" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="79" namespace="ActiveRecord" package="Default">
        <name>$nullable</name>
        <default/>
        <docblock line="75">
          <description>True if this column allows null.</description>
          <long-description/>
          <tag line="75" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="85" namespace="ActiveRecord" package="Default">
        <name>$pk</name>
        <default/>
        <docblock line="81">
          <description>True if this column is a primary key.</description>
          <long-description/>
          <tag line="81" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="91" namespace="ActiveRecord" package="Default">
        <name>$default</name>
        <default/>
        <docblock line="87">
          <description>The default value of the column.</description>
          <long-description/>
          <tag line="87" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="97" namespace="ActiveRecord" package="Default">
        <name>$auto_increment</name>
        <default/>
        <docblock line="93">
          <description>True if this column is set to auto_increment.</description>
          <long-description/>
          <tag line="93" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="103" namespace="ActiveRecord" package="Default">
        <name>$sequence</name>
        <default/>
        <docblock line="99">
          <description>Name of the sequence to use for this column if any.</description>
          <long-description/>
          <tag line="99" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="112" package="ActiveRecord">
        <name>cast</name>
        <full_name>cast</full_name>
        <docblock line="105">
          <description>Casts a value to the column's type.</description>
          <long-description/>
          <tag line="105" name="param" description="The value to cast" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="105" name="param" description="The Connection this column belongs to" type="\ActiveRecord\Connection" variable="$connection">
            <type by_reference="false">\ActiveRecord\Connection</type>
          </tag>
          <tag line="105" name="return" description="type-casted value" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="112">
          <name>$connection</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="142" package="ActiveRecord">
        <name>map_raw_type</name>
        <full_name>map_raw_type</full_name>
        <docblock line="138">
          <description>Sets the $type member variable.</description>
          <long-description/>
          <tag line="138" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/Column.php</critical>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Reflections.php" hash="84038af1219b1f2d35d909ac3f1ff888" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="false" namespace="ActiveRecord" line="13" package="ActiveRecord">
      <extends>\ActiveRecord\Singleton</extends>
      <name>Reflections</name>
      <full_name>\ActiveRecord\Reflections</full_name>
      <docblock line="8">
        <description>Simple class that caches reflections of classes.</description>
        <long-description/>
        <tag line="8" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="20" namespace="ActiveRecord" package="Default">
        <name>$reflections</name>
        <default>array()</default>
        <docblock line="15">
          <description>Current reflections.</description>
          <long-description/>
          <tag line="15" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="28" package="ActiveRecord">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="22">
          <description>Instantiates a new ReflectionClass for the given class.</description>
          <long-description/>
          <tag line="22" name="param" description="Name of a class" type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="return" description="$this so you can chain calls like Reflections::instance()-&gt;add('class')-&gt;get()" type="\ActiveRecord\Reflections">
            <type by_reference="false">\ActiveRecord\Reflections</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$class</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="46" package="ActiveRecord">
        <name>destroy</name>
        <full_name>destroy</full_name>
        <docblock line="38">
          <description>Destroys the cached ReflectionClass.</description>
          <long-description>&lt;p&gt;Put this here mainly for testing purposes.&lt;/p&gt;</long-description>
          <tag line="38" name="param" description="Name of a class." type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="59" package="ActiveRecord">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="52">
          <description>Get a cached ReflectionClass.</description>
          <long-description/>
          <tag line="52" name="param" description="Optional name of a class" type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="52" name="return" description="null or a ReflectionClass instance" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="52" name="throws" description="if class was not found" type="\ActiveRecord\ActiveRecordException">
            <type by_reference="false">\ActiveRecord\ActiveRecordException</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$class</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="75" package="ActiveRecord">
        <name>get_class</name>
        <full_name>get_class</full_name>
        <docblock line="69">
          <description>Retrieve a class name to be reflected.</description>
          <long-description/>
          <tag line="69" name="param" description="An object or name of a class" type="mixed" variable="$mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="69" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$mixed</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/Reflections.php</critical>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Serialization.php" hash="f706a27ce0b21d5553bfba6c885e779c" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="true" namespace="ActiveRecord" line="43" package="ActiveRecord">
      <extends/>
      <name>Serialization</name>
      <full_name>\ActiveRecord\Serialization</full_name>
      <docblock line="8">
        <description>Base class for Model serializers.</description>
        <long-description>&lt;p&gt;All serializers support the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;only:&lt;/b&gt; a string or array of attributes to be included.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;except:&lt;/b&gt; a string or array of attributes to be excluded.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;methods:&lt;/b&gt; a string or array of methods to invoke. The method's name will be used as a key for the final attributes array
along with the method's returned value&lt;/li&gt;
&lt;li&gt;&lt;b&gt;include:&lt;/b&gt; a string or array of associated models to include in the final serialized product.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;only_method:&lt;/b&gt; a method that's called and only the resulting array is serialized
&lt;li&gt;&lt;b&gt;skip_instruct:&lt;/b&gt; set to true to skip the &lt;?xml ...?&gt; declaration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# include the attributes id and name
# run $model-&gt;encoded_description() and include its return value
# include the comments association
# include posts association with its own options (nested)
$model-&gt;to_json(array(
  'only' =&gt; array('id','name', 'encoded_description'),
  'methods' =&gt; array('encoded_description'),
  'include' =&gt; array('comments', 'posts' =&gt; array('only' =&gt; 'id'))
));

# except the password field from being included
$model-&gt;to_xml(array('except' =&gt; 'password')));
&lt;/code&gt;&lt;/pre&gt;</long-description>
        <tag line="8" name="package" description="ActiveRecord"/>
        <tag line="8" name="link" description="http://www.phpactiverecord.org/guides/utilities#topic-serialization" link="http://www.phpactiverecord.org/guides/utilities#topic-serialization"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="45" namespace="ActiveRecord" package="Default">
        <name>$model</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="46" namespace="ActiveRecord" package="Default">
        <name>$options</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="47" namespace="ActiveRecord" package="Default">
        <name>$attributes</name>
        <default/>
      </property>
      <property final="false" static="true" visibility="public" line="54" namespace="ActiveRecord" package="Default">
        <name>$DATETIME_FORMAT</name>
        <default>'iso8601'</default>
        <docblock line="49">
          <description>The default format to serialize DateTime objects to.</description>
          <long-description/>
          <tag line="49" name="see" description="\ActiveRecord\DateTime" refers="\ActiveRecord\DateTime"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="87" namespace="ActiveRecord" package="Default">
        <name>$includes_with_class_name_element</name>
        <default>false</default>
        <docblock line="56">
          <description>Set this to true if the serializer needs to create a nested array keyed
on the name of the included classes such as for xml serialization.</description>
          <long-description>&lt;p&gt;Setting this to true will produce the following attributes array when
the include option was used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$user = array('id' =&gt; 1, 'name' =&gt; 'Tito',
  'permissions' =&gt; array(
    'permission' =&gt; array(
      array('id' =&gt; 100, 'name' =&gt; 'admin'),
      array('id' =&gt; 101, 'name' =&gt; 'normal')
    )
  )
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting to false will produce this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$user = array('id' =&gt; 1, 'name' =&gt; 'Tito',
  'permissions' =&gt; array(
    array('id' =&gt; 100, 'name' =&gt; 'admin'),
    array('id' =&gt; 101, 'name' =&gt; 'normal')
  )
);
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="56" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="96" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="89">
          <description>Constructs a {@link Serialization} object.</description>
          <long-description/>
          <tag line="89" name="param" description="The model to serialize" type="\ActiveRecord\Model" variable="$model">
            <type by_reference="false">\ActiveRecord\Model</type>
          </tag>
          <tag line="89" name="param" description="&amp;$options Options for serialization" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="89" name="return" description="" type="\ActiveRecord\Serialization">
            <type by_reference="false">\ActiveRecord\Serialization</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
        <argument line="96">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="104" package="ActiveRecord">
        <name>parse_options</name>
        <full_name>parse_options</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="113" package="ActiveRecord">
        <name>check_only</name>
        <full_name>check_only</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="124" package="ActiveRecord">
        <name>check_except</name>
        <full_name>check_except</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="133" package="ActiveRecord">
        <name>check_methods</name>
        <full_name>check_methods</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="147" package="ActiveRecord">
        <name>check_only_method</name>
        <full_name>check_only_method</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="157" package="ActiveRecord">
        <name>check_include</name>
        <full_name>check_include</full_name>
      </method>
      <method final="true" abstract="false" static="false" visibility="protected" namespace="ActiveRecord" line="205" package="ActiveRecord">
        <name>options_to_a</name>
        <full_name>options_to_a</full_name>
        <argument line="205">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="215" package="ActiveRecord">
        <name>to_a</name>
        <full_name>to_a</full_name>
        <docblock line="211">
          <description>Returns the attributes array.</description>
          <long-description/>
          <tag line="211" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="230" package="ActiveRecord">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="225">
          <description>Returns the serialized object as a string.</description>
          <long-description/>
          <tag line="225" name="see" description="\ActiveRecord\to_s" refers="\ActiveRecord\to_s"/>
          <tag line="225" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ActiveRecord" line="239" package="ActiveRecord">
        <name>to_s</name>
        <full_name>to_s</full_name>
        <docblock line="235">
          <description>Performs the serialization.</description>
          <long-description/>
          <tag line="235" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="247" package="ActiveRecord">
      <extends>\ActiveRecord\Serialization</extends>
      <name>ArraySerializer</name>
      <full_name>\ActiveRecord\ArraySerializer</full_name>
      <docblock line="242">
        <description>Array serializer.</description>
        <long-description/>
        <tag line="242" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="249" namespace="ActiveRecord" package="Default">
        <name>$include_root</name>
        <default>false</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="251" package="ActiveRecord">
        <name>to_s</name>
        <full_name>to_s</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="262" package="ActiveRecord">
      <extends>\ActiveRecord\ArraySerializer</extends>
      <name>JsonSerializer</name>
      <full_name>\ActiveRecord\JsonSerializer</full_name>
      <docblock line="257">
        <description>JSON serializer.</description>
        <long-description/>
        <tag line="257" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="264" namespace="ActiveRecord" package="Default">
        <name>$include_root</name>
        <default>false</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="266" package="ActiveRecord">
        <name>to_s</name>
        <full_name>to_s</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="278" package="ActiveRecord">
      <extends>\ActiveRecord\Serialization</extends>
      <name>XmlSerializer</name>
      <full_name>\ActiveRecord\XmlSerializer</full_name>
      <docblock line="273">
        <description>XML serializer.</description>
        <long-description/>
        <tag line="273" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="280" namespace="ActiveRecord" package="Default">
        <name>$writer</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="282" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="282">
          <name>$model</name>
          <default/>
          <type>\ActiveRecord\Model</type>
        </argument>
        <argument line="282">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="288" package="ActiveRecord">
        <name>to_s</name>
        <full_name>to_s</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="293" package="ActiveRecord">
        <name>xml_encode</name>
        <full_name>xml_encode</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="310" package="ActiveRecord">
        <name>write</name>
        <full_name>write</full_name>
        <argument line="310">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="310">
          <name>$tag</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="ActiveRecord" line="341" package="ActiveRecord">
      <extends>\ActiveRecord\Serialization</extends>
      <name>CsvSerializer</name>
      <full_name>\ActiveRecord\CsvSerializer</full_name>
      <docblock line="336">
        <description>CSV serializer.</description>
        <long-description/>
        <tag line="336" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="343" namespace="ActiveRecord" package="Default">
        <name>$delimiter</name>
        <default>','</default>
      </property>
      <property final="false" static="true" visibility="public" line="344" namespace="ActiveRecord" package="Default">
        <name>$enclosure</name>
        <default>'"'</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="346" package="ActiveRecord">
        <name>to_s</name>
        <full_name>to_s</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="352" package="ActiveRecord">
        <name>header</name>
        <full_name>header</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="357" package="ActiveRecord">
        <name>row</name>
        <full_name>row</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ActiveRecord" line="362" package="ActiveRecord">
        <name>to_csv</name>
        <full_name>to_csv</full_name>
        <argument line="362">
          <name>$arr</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/Serialization.php</critical>
      <error line="45" code="50018">No DocBlock was found for property $model</error>
      <error line="46" code="50018">No DocBlock was found for property $options</error>
      <error line="47" code="50018">No DocBlock was found for property $attributes</error>
      <error line="104" code="50010">No DocBlock was found for method parse_options()</error>
      <error line="113" code="50010">No DocBlock was found for method check_only()</error>
      <error line="124" code="50010">No DocBlock was found for method check_except()</error>
      <error line="133" code="50010">No DocBlock was found for method check_methods()</error>
      <error line="147" code="50010">No DocBlock was found for method check_only_method()</error>
      <error line="157" code="50010">No DocBlock was found for method check_include()</error>
      <error line="205" code="50010">No DocBlock was found for method options_to_a()</error>
      <error line="249" code="50018">No DocBlock was found for property $include_root</error>
      <error line="251" code="50010">No DocBlock was found for method to_s()</error>
      <error line="264" code="50018">No DocBlock was found for property $include_root</error>
      <error line="266" code="50010">No DocBlock was found for method to_s()</error>
      <error line="280" code="50018">No DocBlock was found for property $writer</error>
      <error line="282" code="50010">No DocBlock was found for method __construct()</error>
      <error line="288" code="50010">No DocBlock was found for method to_s()</error>
      <error line="293" code="50010">No DocBlock was found for method xml_encode()</error>
      <error line="310" code="50010">No DocBlock was found for method write()</error>
      <error line="343" code="50018">No DocBlock was found for property $delimiter</error>
      <error line="344" code="50018">No DocBlock was found for property $enclosure</error>
      <error line="346" code="50010">No DocBlock was found for method to_s()</error>
      <error line="352" code="50010">No DocBlock was found for method header()</error>
      <error line="357" code="50010">No DocBlock was found for method row()</error>
      <error line="362" code="50010">No DocBlock was found for method to_csv()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/cache/Memcache.php" hash="dbbf784e391fde798caf71956537c33d" package="Default">
    <class final="false" abstract="false" namespace="ActiveRecord" line="4" package="Default">
      <extends/>
      <name>Memcache</name>
      <full_name>\ActiveRecord\Memcache</full_name>
      <constant namespace="ActiveRecord" line="6" package="Default">
        <name>DEFAULT_PORT</name>
        <full_name>DEFAULT_PORT</full_name>
        <value>11211</value>
      </constant>
      <property final="false" static="false" visibility="private" line="8" namespace="ActiveRecord" package="Default">
        <name>$memcache</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="21" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="10">
          <description>Creates a Memcache instance.</description>
          <long-description>&lt;p&gt;Takes an $options array w/ the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;host:&lt;/b&gt; host for the memcache server &lt;/li&gt;
&lt;li&gt;&lt;b&gt;port:&lt;/b&gt; port for the memcache server &lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="10" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="21">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="30" package="Default">
        <name>flush</name>
        <full_name>flush</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="35" package="Default">
        <name>read</name>
        <full_name>read</full_name>
        <argument line="35">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="40" package="Default">
        <name>write</name>
        <full_name>write</full_name>
        <argument line="40">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="40">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="40">
          <name>$expire</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file vendor/php-activerecord/php-activerecord/lib/cache/Memcache.php</error>
      <error line="4" code="50000">No DocBlock was found for \ActiveRecord\Memcache</error>
      <error line="8" code="50018">No DocBlock was found for property $memcache</error>
      <error line="30" code="50010">No DocBlock was found for method flush()</error>
      <error line="35" code="50010">No DocBlock was found for method read()</error>
      <error line="40" code="50010">No DocBlock was found for method write()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Cache.php" hash="8a7b2f4ffc020680572e1cfda7f6be5d" package="Default">
    <include line="47" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="ActiveRecord" line="11" package="Default">
      <extends/>
      <name>Cache</name>
      <full_name>\ActiveRecord\Cache</full_name>
      <docblock line="5">
        <description>Cache::get('the-cache-key', function() {
 # this gets executed when cache is stale
 return "your cacheable datas";
});</description>
        <long-description/>
      </docblock>
      <property final="false" static="true" visibility="public" line="13" namespace="ActiveRecord" package="Default">
        <name>$adapter</name>
        <default>null</default>
      </property>
      <property final="false" static="true" visibility="public" line="14" namespace="ActiveRecord" package="Default">
        <name>$options</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="40" package="Default">
        <name>initialize</name>
        <full_name>initialize</full_name>
        <docblock line="16">
          <description>Initializes the cache.</description>
          <long-description>&lt;p&gt;With the $options array it's possible to define:
- expiration of the key, (time in seconds)
- a namespace for the key&lt;/p&gt;

&lt;p&gt;this last one is useful in the case two applications use
a shared key/store (for instance a shared Memcached db)&lt;/p&gt;

&lt;p&gt;Ex:
$cfg_ar = ActiveRecord\Config::instance();
$cfg_ar-&gt;set_cache('memcache://localhost:11211',array('namespace' =&gt; 'my_cool_app',
                                                                                                         'expire'        =&gt; 120
                                                                                                         ));&lt;/p&gt;

&lt;p&gt;In the example above all the keys expire after 120 seconds, and the
all get a postfix 'my_cool_app'.&lt;/p&gt;

&lt;p&gt;(Note: expiring needs to be implemented in your cache store.)&lt;/p&gt;</long-description>
          <tag line="16" name="param" description="URL to your cache server" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
          <tag line="16" name="param" description="Specify additional options" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$url</name>
          <default/>
          <type/>
        </argument>
        <argument line="40">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="56" package="Default">
        <name>flush</name>
        <full_name>flush</full_name>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="62" package="Default">
        <name>get</name>
        <full_name>get</full_name>
        <argument line="62">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="62">
          <name>$closure</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="ActiveRecord" line="75" package="Default">
        <name>get_namespace</name>
        <full_name>get_namespace</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file vendor/php-activerecord/php-activerecord/lib/Cache.php</error>
      <error line="13" code="50018">No DocBlock was found for property $adapter</error>
      <error line="14" code="50018">No DocBlock was found for property $options</error>
      <error line="56" code="50010">No DocBlock was found for method flush()</error>
      <error line="62" code="50010">No DocBlock was found for method get()</error>
      <error line="75" code="50010">No DocBlock was found for method get_namespace()</error>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/CallBack.php" hash="816fd9df4e58ca655472a31e4e319e66" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <class final="false" abstract="false" namespace="ActiveRecord" line="59" package="ActiveRecord">
      <extends/>
      <name>CallBack</name>
      <full_name>\ActiveRecord\CallBack</full_name>
      <docblock line="8">
        <description>Callbacks allow the programmer to hook into the life cycle of a {@link Model}.</description>
        <long-description>&lt;p&gt;You can control the state of your object by declaring certain methods to be
called before or after methods are invoked on your object inside of ActiveRecord.&lt;/p&gt;

&lt;p&gt;Valid callbacks are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;after_construct:&lt;/b&gt; called after a model has been constructed&lt;/li&gt;
&lt;li&gt;&lt;b&gt;before_save:&lt;/b&gt; called before a model is saved&lt;/li&gt;
&lt;li&gt;&lt;b&gt;after_save:&lt;/b&gt; called after a model is saved&lt;/li&gt;
&lt;li&gt;&lt;b&gt;before_create:&lt;/b&gt; called before a NEW model is to be inserted into the database&lt;/li&gt;
&lt;li&gt;&lt;b&gt;after_create:&lt;/b&gt; called after a NEW model has been inserted into the database&lt;/li&gt;
&lt;li&gt;&lt;b&gt;before_update:&lt;/b&gt; called before an existing model has been saved&lt;/li&gt;
&lt;li&gt;&lt;b&gt;after_update:&lt;/b&gt; called after an existing model has been saved&lt;/li&gt;
&lt;li&gt;&lt;b&gt;before_validation:&lt;/b&gt; called before running validators&lt;/li&gt;
&lt;li&gt;&lt;b&gt;after_validation:&lt;/b&gt; called after running validators&lt;/li&gt;
&lt;li&gt;&lt;b&gt;before_validation_on_create:&lt;/b&gt; called before validation on a NEW model being inserted&lt;/li&gt;
&lt;li&gt;&lt;b&gt;after_validation_on_create:&lt;/b&gt; called after validation on a NEW model being inserted&lt;/li&gt;
&lt;li&gt;&lt;b&gt;before_validation_on_update:&lt;/b&gt; see above except for an existing model being saved&lt;/li&gt;
&lt;li&gt;&lt;b&gt;after_validation_on_update:&lt;/b&gt; ...&lt;/li&gt;
&lt;li&gt;&lt;b&gt;before_destroy:&lt;/b&gt; called after a model has been deleted&lt;/li&gt;
&lt;li&gt;&lt;b&gt;after_destroy:&lt;/b&gt; called after a model has been deleted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This class isn't meant to be used directly. Callbacks are defined on your model like the example below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Person extends ActiveRecord\Model {
  static $before_save = array('make_name_uppercase');
  static $after_save = array('do_happy_dance');

  public function make_name_uppercase() {
    $this-&gt;name = strtoupper($this-&gt;name);
  }

  public function do_happy_dance() {
    happy_dance();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Available options for callbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;prepend:&lt;/b&gt; puts the callback at the top of the callback chain instead of the bottom&lt;/li&gt;
&lt;/ul&gt;</long-description>
        <tag line="8" name="package" description="ActiveRecord"/>
        <tag line="8" name="link" description="http://www.phpactiverecord.org/guides/callbacks" link="http://www.phpactiverecord.org/guides/callbacks"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="66" namespace="ActiveRecord" package="Default">
        <name>$VALID_CALLBACKS</name>
        <default>array('after_construct', 'before_save', 'after_save', 'before_create', 'after_create', 'before_update', 'after_update', 'before_validation', 'after_validation', 'before_validation_on_create', 'after_validation_on_create', 'before_validation_on_update', 'after_validation_on_update', 'before_destroy', 'after_destroy')</default>
        <docblock line="61">
          <description>List of available callbacks.</description>
          <long-description/>
          <tag line="61" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="89" namespace="ActiveRecord" package="Default">
        <name>$klass</name>
        <default/>
        <docblock line="84">
          <description>Container for reflection class of given model</description>
          <long-description/>
          <tag line="84" name="var" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="95" namespace="ActiveRecord" package="Default">
        <name>$publicMethods</name>
        <default/>
        <docblock line="91">
          <description>List of public methods of the given model</description>
          <long-description/>
          <tag line="91" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="102" namespace="ActiveRecord" package="Default">
        <name>$registry</name>
        <default>array()</default>
        <docblock line="97">
          <description>Holds data for registered callbacks.</description>
          <long-description/>
          <tag line="97" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="110" package="ActiveRecord">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="104">
          <description>Creates a CallBack.</description>
          <long-description/>
          <tag line="104" name="param" description="The name of a {@link Model} class" type="string" variable="$model_class_name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="104" name="return" description="" type="CallBack">
            <type by_reference="false">CallBack</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$model_class_name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="140" package="ActiveRecord">
        <name>get_callbacks</name>
        <full_name>get_callbacks</full_name>
        <docblock line="134">
          <description>Returns all the callbacks registered for a callback type.</description>
          <long-description/>
          <tag line="134" name="param" description="string Name of a callback (see {@link VALID_CALLBACKS $VALID_CALLBACKS})" type="\ActiveRecord\" variable="$name"/>
          <tag line="134" name="return" description="array of callbacks or null if invalid callback name." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="159" package="ActiveRecord">
        <name>invoke</name>
        <full_name>invoke</full_name>
        <docblock line="145">
          <description>Invokes a callback.</description>
          <long-description/>
          <tag line="145" name="internal" description="This is the only piece of the CallBack class that carries its own logic for the&#10;model object. For (after|before)_(create|update) callbacks, it will merge with&#10;a generic 'save' callback which is called first for the lease amount of precision."/>
          <tag line="145" name="param" description="Model to invoke the callback on." type="string" variable="$model">
            <type by_reference="false">string</type>
          </tag>
          <tag line="145" name="param" description="Name of the callback to invoke" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="145" name="param" description="Set to true to raise an exception if the callback does not exist." type="boolean" variable="$must_exist">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="145" name="return" description="null if $name was not a valid callback type or false if a method was invoked&#10;that was for a before_* callback and that method returned false. If this happens, execution&#10;of any other callbacks after the offending callback will not occur." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="159">
          <name>$model</name>
          <default/>
          <type/>
        </argument>
        <argument line="159">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="159">
          <name>$must_exist</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ActiveRecord" line="211" package="ActiveRecord">
        <name>register</name>
        <full_name>register</full_name>
        <docblock line="197">
          <description>Register a new callback.</description>
          <long-description>&lt;p&gt;The option array can contain the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;prepend:&lt;/b&gt; Add this callback at the beginning of the existing callbacks (true) or at the end (false, default)&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="197" name="param" description="Name of callback type (see {@link VALID_CALLBACKS $VALID_CALLBACKS})" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="197" name="param" description="Either a closure or the name of a method on the {@link Model}" type="mixed" variable="$closure_or_method_name">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="197" name="param" description="Options array" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="197" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="197" name="throws" description="if invalid callback type or callback method was not found" type="\ActiveRecord\ActiveRecordException">
            <type by_reference="false">\ActiveRecord\ActiveRecordException</type>
          </tag>
        </docblock>
        <argument line="211">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="211">
          <name>$closure_or_method_name</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="211">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/CallBack.php</critical>
    </parse_markers>
  </file>
  <file path="vendor/php-activerecord/php-activerecord/lib/Utils.php" hash="8bfab8f742247d5b7eb14c5b7c091ecb" package="ActiveRecord">
    <docblock line="2">
      <description/>
      <long-description/>
      <tag line="2" name="package" description="ActiveRecord"/>
    </docblock>
    <function namespace="ActiveRecord" line="39" package="ActiveRecord">
      <name>classify</name>
      <full_name>\ActiveRecord\classify</full_name>
      <argument line="39">
        <name>$class_name</name>
        <default/>
        <type/>
      </argument>
      <argument line="39">
        <name>$singularize</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="ActiveRecord" line="49" package="ActiveRecord">
      <name>array_flatten</name>
      <full_name>\ActiveRecord\array_flatten</full_name>
      <argument line="49">
        <name>$array</name>
        <default/>
        <type>array</type>
      </argument>
    </function>
    <function namespace="ActiveRecord" line="66" package="ActiveRecord">
      <name>is_hash</name>
      <full_name>\ActiveRecord\is_hash</full_name>
      <docblock line="63">
        <description>Somewhat naive way to determine if an array is a hash.</description>
        <long-description/>
      </docblock>
      <argument line="66">
        <name>$array</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="ActiveRecord" line="82" package="ActiveRecord">
      <name>denamespace</name>
      <full_name>\ActiveRecord\denamespace</full_name>
      <docblock line="75">
        <description>Strips a class name of any namespaces and namespace operator.</description>
        <long-description/>
        <tag line="75" name="param" description="" type="string" variable="$class">
          <type by_reference="false">string</type>
        </tag>
        <tag line="75" name="return" description="stripped class name" type="string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="75" name="access" description="public"/>
      </docblock>
      <argument line="82">
        <name>$class_name</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="ActiveRecord" line="95" package="ActiveRecord">
      <name>get_namespaces</name>
      <full_name>\ActiveRecord\get_namespaces</full_name>
      <argument line="95">
        <name>$class_name</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="ActiveRecord" line="102" package="ActiveRecord">
      <name>has_namespace</name>
      <full_name>\ActiveRecord\has_namespace</full_name>
      <argument line="102">
        <name>$class_name</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="ActiveRecord" line="109" package="ActiveRecord">
      <name>has_absolute_namespace</name>
      <full_name>\ActiveRecord\has_absolute_namespace</full_name>
      <argument line="109">
        <name>$class_name</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="ActiveRecord" line="122" package="ActiveRecord">
      <name>all</name>
      <full_name>\ActiveRecord\all</full_name>
      <docblock line="116">
        <description>Returns true if all values in $haystack === $needle</description>
        <long-description/>
        <tag line="116" name="param" description="" type="\ActiveRecord\" variable="$needle"/>
        <tag line="116" name="param" description="" type="\ActiveRecord\" variable="$haystack"/>
        <tag line="116" name="return" description="" type="\ActiveRecord\unknown_type">
          <type by_reference="false">\ActiveRecord\unknown_type</type>
        </tag>
      </docblock>
      <argument line="122">
        <name>$needle</name>
        <default/>
        <type/>
      </argument>
      <argument line="122">
        <name>$haystack</name>
        <default/>
        <type>array</type>
      </argument>
    </function>
    <function namespace="ActiveRecord" line="132" package="ActiveRecord">
      <name>collect</name>
      <full_name>\ActiveRecord\collect</full_name>
      <argument line="132">
        <name>$enumerable</name>
        <default/>
        <type/>
      </argument>
      <argument line="132">
        <name>$name_or_closure</name>
        <default/>
        <type/>
      </argument>
    </function>
    <function namespace="ActiveRecord" line="149" package="ActiveRecord">
      <name>wrap_strings_in_arrays</name>
      <full_name>\ActiveRecord\wrap_strings_in_arrays</full_name>
      <docblock line="146">
        <description>Wrap string definitions (if any) into arrays.</description>
        <long-description/>
      </docblock>
      <argument line="149">
        <name>$strings</name>
        <default/>
        <type/>
      </argument>
    </function>
    <class final="false" abstract="false" namespace="ActiveRecord" line="169" package="ActiveRecord">
      <extends/>
      <name>Utils</name>
      <full_name>\ActiveRecord\Utils</full_name>
      <docblock line="164">
        <description>Some internal utility functions.</description>
        <long-description/>
        <tag line="164" name="package" description="ActiveRecord"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="226" namespace="ActiveRecord" package="Default">
        <name>$plural</name>
        <default>array('/(quiz)$/i' =&gt; "$1zes", '/^(ox)$/i' =&gt; "$1en", '/([m|l])ouse$/i' =&gt; "$1ice", '/(matr|vert|ind)ix|ex$/i' =&gt; "$1ices", '/(x|ch|ss|sh)$/i' =&gt; "$1es", '/([^aeiouy]|qu)y$/i' =&gt; "$1ies", '/(hive)$/i' =&gt; "$1s", '/(?:([^f])fe|([lr])f)$/i' =&gt; "$1$2ves", '/(shea|lea|loa|thie)f$/i' =&gt; "$1ves", '/sis$/i' =&gt; "ses", '/([ti])um$/i' =&gt; "$1a", '/(tomat|potat|ech|her|vet)o$/i' =&gt; "$1oes", '/(bu)s$/i' =&gt; "$1ses", '/(alias)$/i' =&gt; "$1es", '/(octop)us$/i' =&gt; "$1i", '/(ax|test)is$/i' =&gt; "$1es", '/(us)$/i' =&gt; "$1es", '/s$/i' =&gt; "s", '/$/' =&gt; "s")</default>
      </property>
      <property final="false" static="true" visibility="private" line="248" namespace="ActiveRecord" package="Default">
        <name>$singular</name>
        <default>array('/(quiz)zes$/i' =&gt; "$1", '/(matr)ices$/i' =&gt; "$1ix", '/(vert|ind)ices$/i' =&gt; "$1ex", '/^(ox)en$/i' =&gt; "$1", '/(alias)es$/i' =&gt; "$1", '/(octop|vir)i$/i' =&gt; "$1us", '/(cris|ax|test)es$/i' =&gt; "$1is", '/(shoe)s$/i' =&gt; "$1", '/(o)es$/i' =&gt; "$1", '/(bus)es$/i' =&gt; "$1", '/([m|l])ice$/i' =&gt; "$1ouse", '/(x|ch|ss|sh)es$/i' =&gt; "$1", '/(m)ovies$/i' =&gt; "$1ovie", '/(s)eries$/i' =&gt; "$1eries", '/([^aeiouy]|qu)ies$/i' =&gt; "$1y", '/([lr])ves$/i' =&gt; "$1f", '/(tive)s$/i' =&gt; "$1", '/(hive)s$/i' =&gt; "$1", '/(li|wi|kni)ves$/i' =&gt; "$1fe", '/(shea|loa|lea|thie)ves$/i' =&gt; "$1f", '/(^analy)ses$/i' =&gt; "$1sis", '/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i' =&gt; "$1$2sis", '/([ti])a$/i' =&gt; "$1um", '/(n)ews$/i' =&gt; "$1ews", '/(h|bl)ouses$/i' =&gt; "$1ouse", '/(corpse)s$/i' =&gt; "$1", '/(us)es$/i' =&gt; "$1", '/(us|ss)$/i' =&gt; "$1", '/s$/i' =&gt; "")</default>
      </property>
      <property final="false" static="true" visibility="private" line="280" namespace="ActiveRecord" package="Default">
        <name>$irregular</name>
        <default>array('move' =&gt; 'moves', 'foot' =&gt; 'feet', 'goose' =&gt; 'geese', 'sex' =&gt; 'sexes', 'child' =&gt; 'children', 'man' =&gt; 'men', 'tooth' =&gt; 'teeth', 'person' =&gt; 'people')</default>
      </property>
      <property final="false" static="true" visibility="private" line="291" namespace="ActiveRecord" package="Default">
        <name>$uncountable</name>
        <default>array('sheep', 'fish', 'deer', 'series', 'species', 'money', 'rice', 'information', 'equipment')</default>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="171" package="ActiveRecord">
        <name>extract_options</name>
        <full_name>extract_options</full_name>
        <argument line="171">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="176" package="ActiveRecord">
        <name>add_condition</name>
        <full_name>add_condition</full_name>
        <argument line="176">
          <name>$conditions</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="176">
          <name>$condition</name>
          <default/>
          <type/>
        </argument>
        <argument line="176">
          <name>$conjuction</name>
          <default>'AND'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="194" package="ActiveRecord">
        <name>human_attribute</name>
        <full_name>human_attribute</full_name>
        <argument line="194">
          <name>$attr</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="203" package="ActiveRecord">
        <name>is_odd</name>
        <full_name>is_odd</full_name>
        <argument line="203">
          <name>$number</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="208" package="ActiveRecord">
        <name>is_a</name>
        <full_name>is_a</full_name>
        <argument line="208">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
        <argument line="208">
          <name>$var</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="221" package="ActiveRecord">
        <name>is_blank</name>
        <full_name>is_blank</full_name>
        <argument line="221">
          <name>$var</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="303" package="ActiveRecord">
        <name>pluralize</name>
        <full_name>pluralize</full_name>
        <argument line="303">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="328" package="ActiveRecord">
        <name>singularize</name>
        <full_name>singularize</full_name>
        <argument line="328">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="353" package="ActiveRecord">
        <name>pluralize_if</name>
        <full_name>pluralize_if</full_name>
        <argument line="353">
          <name>$count</name>
          <default/>
          <type/>
        </argument>
        <argument line="353">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ActiveRecord" line="361" package="ActiveRecord">
        <name>squeeze</name>
        <full_name>squeeze</full_name>
        <argument line="361">
          <name>$char</name>
          <default/>
          <type/>
        </argument>
        <argument line="361">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file vendor/php-activerecord/php-activerecord/lib/Utils.php</critical>
      <error line="39" code="50009">No DocBlock was found for function \ActiveRecord\classify()</error>
      <error line="49" code="50009">No DocBlock was found for function \ActiveRecord\array_flatten()</error>
      <error line="63" code="50015">Argument $array is missing from the Docblock of \ActiveRecord\is_hash()</error>
      <error line="75" code="50014">Name of argument $class_name does not match with the DocBlock's name $class in \ActiveRecord\denamespace()</error>
      <notice line="75" code="50013">Parameter $class could not be found in \ActiveRecord\denamespace()</notice>
      <error line="95" code="50009">No DocBlock was found for function \ActiveRecord\get_namespaces()</error>
      <error line="102" code="50009">No DocBlock was found for function \ActiveRecord\has_namespace()</error>
      <error line="109" code="50009">No DocBlock was found for function \ActiveRecord\has_absolute_namespace()</error>
      <error line="116" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $haystack in \ActiveRecord\all()</error>
      <error line="132" code="50009">No DocBlock was found for function \ActiveRecord\collect()</error>
      <error line="146" code="50015">Argument $strings is missing from the Docblock of \ActiveRecord\wrap_strings_in_arrays()</error>
      <error line="226" code="50018">No DocBlock was found for property $plural</error>
      <error line="248" code="50018">No DocBlock was found for property $singular</error>
      <error line="280" code="50018">No DocBlock was found for property $irregular</error>
      <error line="291" code="50018">No DocBlock was found for property $uncountable</error>
      <error line="171" code="50010">No DocBlock was found for method extract_options()</error>
      <error line="176" code="50010">No DocBlock was found for method add_condition()</error>
      <error line="194" code="50010">No DocBlock was found for method human_attribute()</error>
      <error line="203" code="50010">No DocBlock was found for method is_odd()</error>
      <error line="208" code="50010">No DocBlock was found for method is_a()</error>
      <error line="221" code="50010">No DocBlock was found for method is_blank()</error>
      <error line="303" code="50010">No DocBlock was found for method pluralize()</error>
      <error line="328" code="50010">No DocBlock was found for method singularize()</error>
      <error line="353" code="50010">No DocBlock was found for method pluralize_if()</error>
      <error line="361" code="50010">No DocBlock was found for method squeeze()</error>
    </parse_markers>
  </file>
  <package name="ActiveRecord" full_name="ActiveRecord"/>
  <package name="ChickenWire" full_name="ChickenWire"/>
  <package name="Default" full_name="Default"/>
  <package name="Search" full_name="Search"/>
  <namespace name="ActiveRecord" full_name="ActiveRecord"/>
  <namespace name="Application" full_name="Application">
    <namespace name="Controllers" full_name="Application\Controllers"/>
    <namespace name="Models" full_name="Application\Models"/>
  </namespace>
  <namespace name="ChickenWire" full_name="ChickenWire">
    <namespace name="Auth" full_name="ChickenWire\Auth"/>
    <namespace name="Core" full_name="ChickenWire\Core"/>
    <namespace name="Util" full_name="ChickenWire\Util"/>
  </namespace>
  <namespace name="global" full_name="global"/>
  <marker count="1">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="3"/>
</project>
